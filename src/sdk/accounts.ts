/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsAssignAccountCountries } from "../funcs/accountsAssignAccountCountries.js";
import { accountsCreateAccount } from "../funcs/accountsCreateAccount.js";
import { accountsDisconnectAccount } from "../funcs/accountsDisconnectAccount.js";
import { accountsGetAccount } from "../funcs/accountsGetAccount.js";
import { accountsGetAccountCountries } from "../funcs/accountsGetAccountCountries.js";
import { accountsGetMerchantProcessingAgreement } from "../funcs/accountsGetMerchantProcessingAgreement.js";
import { accountsGetTermsOfServiceToken } from "../funcs/accountsGetTermsOfServiceToken.js";
import { accountsListAccounts } from "../funcs/accountsListAccounts.js";
import { accountsPatchAccount } from "../funcs/accountsPatchAccount.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Accounts extends ClientSDK {
  /**
   * You can create **business** or **individual** accounts for your users (i.e., customers, merchants) by passing the required
   * information to Moov. Requirements differ per account type and requested [capabilities](https://docs.moov.io/guides/accounts/capabilities/requirements/).
   *
   * If you're requesting the `wallet`, `send-funds`, `collect-funds`, or `card-issuing` capabilities, you'll need to:
   *   + Send Moov the user [platform terms of service agreement](https://docs.moov.io/guides/accounts/requirements/platform-agreement/) acceptance.
   *     This can be done upon account creation, or by [patching](https://docs.moov.io/api/moov-accounts/accounts/patch/) the account using the `termsOfService` field.
   * If you're creating a business account with the business type `llc`, `partnership`, or `privateCorporation`, you'll need to:
   *   + Provide [business representatives](https://docs.moov.io/api/moov-accounts/representatives/) after creating the account.
   *   + [Patch](https://docs.moov.io/api/moov-accounts/accounts/patch/) the account to indicate that business representative ownership information is complete.
   *
   * Visit our documentation to read more about [creating accounts](https://docs.moov.io/guides/accounts/create-accounts/) and [verification requirements](https://docs.moov.io/guides/accounts/requirements/identity-verification/).
   * Note that the `mode` field (for production or sandbox) is only required when creating a _facilitator_ account. All non-facilitator account requests will ignore the mode field and be set to the calling facilitator's mode.
   */
  async createAccount(
    security: operations.CreateAccountSecurity,
    request: operations.CreateAccountRequest,
    options?: RequestOptions,
  ): Promise<components.Account> {
    return unwrapAsync(accountsCreateAccount(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List or search accounts to which the caller is connected.
   *
   * All supported query parameters are optional. If none are provided the response will include all connected accounts.
   * Pagination is supported via the `skip` and `count` query parameters.
   * Searching by name and email will overlap and return results based on relevance.
   */
  async listAccounts(
    security: operations.ListAccountsSecurity,
    request: operations.ListAccountsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Account>> {
    return unwrapAsync(accountsListAccounts(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieves details for the account with the specified ID.
   */
  async getAccount(
    security: operations.GetAccountSecurity,
    request: operations.GetAccountRequest,
    options?: RequestOptions,
  ): Promise<components.Account> {
    return unwrapAsync(accountsGetAccount(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * When **can** profile data be updated:
   *   + For unverified accounts, all profile data can be edited.
   *   + During the verification process, missing or incomplete profile data can be edited.
   *   + Verified accounts can only add missing profile data.
   *
   *   When **can't** profile data be updated:
   *   + Verified accounts cannot change any existing profile data.
   *
   * If you need to update information in a locked state, please contact Moov support.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/profile.write` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/), and provide the changed information.
   */
  async patchAccount(
    security: operations.PatchAccountSecurity,
    request: operations.PatchAccountRequest,
    options?: RequestOptions,
  ): Promise<components.Account> {
    return unwrapAsync(accountsPatchAccount(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   *   This will sever the connection between you and the account specified and it will no longer be listed as active in the list of accounts.
   *   This also means you'll only have read-only access to the account going forward for reporting purposes.
   *
   *   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/profile.disconnect` scope when generating
   *   a [token](https://docs.moov.io/api/authentication/access-tokens/), and provide the changed information.
   */
  async disconnectAccount(
    security: operations.DisconnectAccountSecurity,
    request: operations.DisconnectAccountRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(accountsDisconnectAccount(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve the specified countries of operation for an account.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/profile.read` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async getAccountCountries(
    security: operations.GetAccountCountriesSecurity,
    request: operations.GetAccountCountriesRequest,
    options?: RequestOptions,
  ): Promise<components.AccountCountries> {
    return unwrapAsync(accountsGetAccountCountries(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Assign the countries of operation for an account.
   *
   * This endpoint will always overwrite the previously assigned values.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/profile.write` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async assignAccountCountries(
    security: operations.AssignAccountCountriesSecurity,
    request: operations.AssignAccountCountriesRequest,
    options?: RequestOptions,
  ): Promise<components.AccountCountries> {
    return unwrapAsync(accountsAssignAccountCountries(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve a merchant account's processing agreement.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
   * to specify the `/accounts/{accountID}/profile.read` scope.
   */
  async getMerchantProcessingAgreement(
    security: operations.GetMerchantProcessingAgreementSecurity,
    request: operations.GetMerchantProcessingAgreementRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(accountsGetMerchantProcessingAgreement(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   *   Generates a non-expiring token that can then be used to accept Moov’s terms of service.
   *
   *   This token can only be generated via API. Any Moov account requesting the collect funds, send funds, wallet, or card issuing capabilities
   *   must accept Moov’s terms of service, then have the generated terms of service token patched to the account. Read more in our [documentation](https://docs.moov.io/guides/accounts/requirements/platform-agreement/).
   */
  async getTermsOfServiceToken(
    request: operations.GetTermsOfServiceTokenRequest,
    options?: RequestOptions,
  ): Promise<components.TermsOfServiceToken> {
    return unwrapAsync(accountsGetTermsOfServiceToken(
      this,
      request,
      options,
    ));
  }
}
