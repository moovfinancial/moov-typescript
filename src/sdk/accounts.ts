/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsAssignCountries } from "../funcs/accountsAssignCountries.js";
import { accountsCreate } from "../funcs/accountsCreate.js";
import { accountsDisconnect } from "../funcs/accountsDisconnect.js";
import { accountsGet } from "../funcs/accountsGet.js";
import { accountsGetCountries } from "../funcs/accountsGetCountries.js";
import { accountsGetMerchantProcessingAgreement } from "../funcs/accountsGetMerchantProcessingAgreement.js";
import { accountsGetTermsOfServiceToken } from "../funcs/accountsGetTermsOfServiceToken.js";
import { accountsList } from "../funcs/accountsList.js";
import { accountsUpdate } from "../funcs/accountsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Accounts extends ClientSDK {
  /**
   * You can create **business** or **individual** accounts for your users (i.e., customers, merchants) by passing the required
   * information to Moov. Requirements differ per account type and requested [capabilities](https://docs.moov.io/guides/accounts/capabilities/requirements/).
   *
   * If you're requesting the `wallet`, `send-funds`, `collect-funds`, or `card-issuing` capabilities, you'll need to:
   *   + Send Moov the user [platform terms of service agreement](https://docs.moov.io/guides/accounts/requirements/platform-agreement/) acceptance.
   *     This can be done upon account creation, or by [patching](https://docs.moov.io/api/moov-accounts/accounts/patch/) the account using the `termsOfService` field.
   * If you're creating a business account with the business type `llc`, `partnership`, or `privateCorporation`, you'll need to:
   *   + Provide [business representatives](https://docs.moov.io/api/moov-accounts/representatives/) after creating the account.
   *   + [Patch](https://docs.moov.io/api/moov-accounts/accounts/patch/) the account to indicate that business representative ownership information is complete.
   *
   * Visit our documentation to read more about [creating accounts](https://docs.moov.io/guides/accounts/create-accounts/) and [verification requirements](https://docs.moov.io/guides/accounts/requirements/identity-verification/).
   * Note that the `mode` field (for production or sandbox) is only required when creating a _facilitator_ account. All non-facilitator account requests will ignore the mode field and be set to the calling facilitator's mode.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
   * to specify the `/accounts.write` scope.
   */
  async create(
    request: components.CreateAccount,
    options?: RequestOptions,
  ): Promise<operations.CreateAccountResponse> {
    return unwrapAsync(accountsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List or search accounts to which the caller is connected.
   *
   * All supported query parameters are optional. If none are provided the response will include all connected accounts.
   * Pagination is supported via the `skip` and `count` query parameters. Searching by name and email will overlap and
   * return results based on relevance.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
   * to specify the `/accounts.read` scope.
   */
  async list(
    request: operations.ListAccountsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListAccountsResponse> {
    return unwrapAsync(accountsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves details for the account with the specified ID.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
   * to specify the `/accounts/{accountID}/profile.read` scope.
   */
  async get(
    request: operations.GetAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAccountResponse> {
    return unwrapAsync(accountsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * When **can** profile data be updated:
   *   + For unverified accounts, all profile data can be edited.
   *   + During the verification process, missing or incomplete profile data can be edited.
   *   + Verified accounts can only add missing profile data.
   *
   *   When **can't** profile data be updated:
   *   + Verified accounts cannot change any existing profile data.
   *
   * If you need to update information in a locked state, please contact Moov support.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
   * to specify the `/accounts/{accountID}/profile.write` scope.
   */
  async update(
    request: operations.UpdateAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAccountResponse> {
    return unwrapAsync(accountsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * This will sever the connection between you and the account specified and it will no longer be listed as
   * active in the list of accounts. This also means you'll only have read-only access to the account going
   * forward for reporting purposes.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/profile.disconnect` scope.
   */
  async disconnect(
    request: operations.DisconnectAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.DisconnectAccountResponse | undefined> {
    return unwrapAsync(accountsDisconnect(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the specified countries of operation for an account.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/profile.read` scope.
   */
  async getCountries(
    request: operations.GetAccountCountriesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAccountCountriesResponse> {
    return unwrapAsync(accountsGetCountries(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign the countries of operation for an account.
   *
   * This endpoint will always overwrite the previously assigned values.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/profile.write` scope.
   */
  async assignCountries(
    request: operations.AssignAccountCountriesRequest,
    options?: RequestOptions,
  ): Promise<operations.AssignAccountCountriesResponse> {
    return unwrapAsync(accountsAssignCountries(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a merchant account's processing agreement.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/profile.read` scope.
   */
  async getMerchantProcessingAgreement(
    request: operations.GetMerchantProcessingAgreementRequest,
    options?: RequestOptions,
  ): Promise<operations.GetMerchantProcessingAgreementResponse> {
    return unwrapAsync(accountsGetMerchantProcessingAgreement(
      this,
      request,
      options,
    ));
  }

  /**
   * Generates a non-expiring token that can then be used to accept Moov's terms of service.
   *
   * This token can only be generated via API. Any Moov account requesting the collect funds, send funds, wallet,
   * or card issuing capabilities must accept Moov's terms of service, then have the generated terms of service
   * token patched to the account. Read more in our [documentation](https://docs.moov.io/guides/accounts/requirements/platform-agreement/).
   */
  async getTermsOfServiceToken(
    request: operations.GetTermsOfServiceTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTermsOfServiceTokenResponse> {
    return unwrapAsync(accountsGetTermsOfServiceToken(
      this,
      request,
      options,
    ));
  }
}
