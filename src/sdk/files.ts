/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { filesGetFileDetails } from "../funcs/filesGetFileDetails.js";
import { filesListFiles } from "../funcs/filesListFiles.js";
import { filesUploadFile } from "../funcs/filesUploadFile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Files extends ClientSDK {
  /**
   * Upload a file and link it to the specified Moov account.
   *
   * The maximum file size is 10MB. Each account is allowed a maximum of 50 files. Acceptable file types include csv, jpg, pdf,
   * and png.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify the
   * `/accounts/{accountID}/files.write` scope.
   */
  async uploadFile(
    security: operations.UploadFileSecurity,
    request: operations.UploadFileRequest,
    options?: RequestOptions,
  ): Promise<components.FileDetails> {
    return unwrapAsync(filesUploadFile(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List all the files associated with a particular Moov account.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify the
   * `/accounts/{accountID}/files.read` scope.
   */
  async listFiles(
    security: operations.ListFilesSecurity,
    request: operations.ListFilesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.FileDetails>> {
    return unwrapAsync(filesListFiles(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve file details associated with a specific Moov account.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify the
   * `/accounts/{accountID}/files.read` scope.
   */
  async getFileDetails(
    security: operations.GetFileDetailsSecurity,
    request: operations.GetFileDetailsRequest,
    options?: RequestOptions,
  ): Promise<components.FileDetails> {
    return unwrapAsync(filesGetFileDetails(
      this,
      security,
      request,
      options,
    ));
  }
}
