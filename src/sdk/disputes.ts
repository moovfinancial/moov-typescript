/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { disputesAccept } from "../funcs/disputesAccept.js";
import { disputesDeleteEvidence } from "../funcs/disputesDeleteEvidence.js";
import { disputesGet } from "../funcs/disputesGet.js";
import { disputesGetEvidence } from "../funcs/disputesGetEvidence.js";
import {
  disputesGetEvidenceData,
  GetEvidenceDataAcceptEnum,
} from "../funcs/disputesGetEvidenceData.js";
import { disputesList } from "../funcs/disputesList.js";
import { disputesListEvidence } from "../funcs/disputesListEvidence.js";
import { disputesSubmitEvidence } from "../funcs/disputesSubmitEvidence.js";
import { disputesUpdateEvidence } from "../funcs/disputesUpdateEvidence.js";
import { disputesUploadEvidenceFile } from "../funcs/disputesUploadEvidenceFile.js";
import { disputesUploadEvidenceText } from "../funcs/disputesUploadEvidenceText.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetEvidenceDataAcceptEnum } from "../funcs/disputesGetEvidenceData.js";

export class Disputes extends ClientSDK {
  /**
   * Returns the list of disputes.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
   */
  async list(
    request: operations.ListDisputesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListDisputesResponse> {
    return unwrapAsync(disputesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a dispute by ID.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
   */
  async get(
    request: operations.GetDisputeRequest,
    options?: RequestOptions,
  ): Promise<operations.GetDisputeResponse> {
    return unwrapAsync(disputesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Accepts liability for a dispute.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
   */
  async accept(
    request: operations.AcceptDisputeRequest,
    options?: RequestOptions,
  ): Promise<operations.AcceptDisputeResponse> {
    return unwrapAsync(disputesAccept(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a dispute's public evidence by its ID.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
   */
  async listEvidence(
    request: operations.ListDisputeEvidenceRequest,
    options?: RequestOptions,
  ): Promise<operations.ListDisputeEvidenceResponse> {
    return unwrapAsync(disputesListEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * Uploads a file as evidence for a dispute.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
   */
  async uploadEvidenceFile(
    request: operations.UploadDisputeEvidenceFileRequest,
    options?: RequestOptions,
  ): Promise<operations.UploadDisputeEvidenceFileResponse | undefined> {
    return unwrapAsync(disputesUploadEvidenceFile(
      this,
      request,
      options,
    ));
  }

  /**
   * Uploads text as evidence for a dispute.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
   */
  async uploadEvidenceText(
    request: operations.UploadDisputeEvidenceTextRequest,
    options?: RequestOptions,
  ): Promise<operations.UploadDisputeEvidenceTextResponse> {
    return unwrapAsync(disputesUploadEvidenceText(
      this,
      request,
      options,
    ));
  }

  /**
   * Submit the evidence associated with a dispute.
   *
   * Evidence items must be uploaded using the appropriate endpoint(s) prior to calling this endpoint to submit it. **Evidence can only
   * be submitted once per dispute.**
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
   */
  async submitEvidence(
    request: operations.SubmitDisputeEvidenceRequest,
    options?: RequestOptions,
  ): Promise<operations.SubmitDisputeEvidenceResponse> {
    return unwrapAsync(disputesSubmitEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * Get dispute evidence by ID.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
   */
  async getEvidence(
    request: operations.GetDisputeEvidenceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetDisputeEvidenceResponse> {
    return unwrapAsync(disputesGetEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates dispute evidence by ID.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
   */
  async updateEvidence(
    request: operations.UpdateDisputeEvidenceRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateDisputeEvidenceResponse> {
    return unwrapAsync(disputesUpdateEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes dispute evidence by ID.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
   */
  async deleteEvidence(
    request: operations.DeleteDisputeEvidenceFileRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteDisputeEvidenceFileResponse | undefined> {
    return unwrapAsync(disputesDeleteEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * Downloads dispute evidence data by ID.
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.
   *
   * To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/)
   * you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
   */
  async getEvidenceData(
    request: operations.GetDisputeEvidenceDataRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetEvidenceDataAcceptEnum;
    },
  ): Promise<operations.GetDisputeEvidenceDataResponse> {
    return unwrapAsync(disputesGetEvidenceData(
      this,
      request,
      options,
    ));
  }
}
