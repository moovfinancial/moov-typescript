/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { issuingTransactionsGetIssuedCardAuthorization } from "../funcs/issuingTransactionsGetIssuedCardAuthorization.js";
import { issuingTransactionsGetIssuedCardTransaction } from "../funcs/issuingTransactionsGetIssuedCardTransaction.js";
import { issuingTransactionsListIssuedCardAuthorizationEvents } from "../funcs/issuingTransactionsListIssuedCardAuthorizationEvents.js";
import { issuingTransactionsListIssuedCardAuthorizations } from "../funcs/issuingTransactionsListIssuedCardAuthorizations.js";
import { issuingTransactionsListIssuedCardTransactions } from "../funcs/issuingTransactionsListIssuedCardTransactions.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class IssuingTransactions extends ClientSDK {
  /**
   * List issued card authorizations associated with a Moov account.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
   * the `/accounts/{accountID}/issued-cards.read` scope.
   */
  async listIssuedCardAuthorizations(
    security: operations.ListIssuedCardAuthorizationsSecurity,
    request: operations.ListIssuedCardAuthorizationsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.IssuedCardAuthorization>> {
    return unwrapAsync(issuingTransactionsListIssuedCardAuthorizations(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieves details of an authorization associated with a specific Moov account.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
   * the `/accounts/{accountID}/issued-cards.read` scope.
   */
  async getIssuedCardAuthorization(
    security: operations.GetIssuedCardAuthorizationSecurity,
    request: operations.GetIssuedCardAuthorizationRequest,
    options?: RequestOptions,
  ): Promise<components.IssuedCardAuthorization> {
    return unwrapAsync(issuingTransactionsGetIssuedCardAuthorization(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List card network and Moov platform events that affect the authorization and its hold on a wallet balance.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
   * the `/accounts/{accountID}/issued-cards.read` scope.
   */
  async listIssuedCardAuthorizationEvents(
    security: operations.ListIssuedCardAuthorizationEventsSecurity,
    request: operations.ListIssuedCardAuthorizationEventsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.IssuedCardAuthorizationEvent>> {
    return unwrapAsync(issuingTransactionsListIssuedCardAuthorizationEvents(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List issued card transactions associated with a Moov account.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
   * the `/accounts/{accountID}/issued-cards.read` scope.
   */
  async listIssuedCardTransactions(
    security: operations.ListIssuedCardTransactionsSecurity,
    request: operations.ListIssuedCardTransactionsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.IssuedCardTransaction>> {
    return unwrapAsync(issuingTransactionsListIssuedCardTransactions(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieves details of an issued card transaction associated with a specific Moov account.
   *
   * To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
   * the `/accounts/{accountID}/issued-cards.read` scope.
   */
  async getIssuedCardTransaction(
    security: operations.GetIssuedCardTransactionSecurity,
    request: operations.GetIssuedCardTransactionRequest,
    options?: RequestOptions,
  ): Promise<components.IssuedCardTransaction> {
    return unwrapAsync(issuingTransactionsGetIssuedCardTransaction(
      this,
      security,
      request,
      options,
    ));
  }
}
