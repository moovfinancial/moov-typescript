/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { schedulingCancelSchedule } from "../funcs/schedulingCancelSchedule.js";
import { schedulingCreateSchedule } from "../funcs/schedulingCreateSchedule.js";
import { schedulingGetScheduledOccurrence } from "../funcs/schedulingGetScheduledOccurrence.js";
import { schedulingGetSchedules } from "../funcs/schedulingGetSchedules.js";
import { schedulingListSchedules } from "../funcs/schedulingListSchedules.js";
import { schedulingUpdateSchedule } from "../funcs/schedulingUpdateSchedule.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Scheduling extends ClientSDK {
  /**
   * Describes the schedule to create or modify.
   */
  async createSchedule(
    security: operations.CreateScheduleSecurity,
    request: operations.CreateScheduleRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduleResponse> {
    return unwrapAsync(schedulingCreateSchedule(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Describes a list of schedules associated with an account. Requires at least 1 occurrence or recurTransfer to be specified.
   */
  async listSchedules(
    security: operations.ListSchedulesSecurity,
    request: operations.ListSchedulesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ScheduleResponse>> {
    return unwrapAsync(schedulingListSchedules(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Describes the schedule to modify.
   */
  async updateSchedule(
    security: operations.UpdateScheduleSecurity,
    request: operations.UpdateScheduleRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduleResponse> {
    return unwrapAsync(schedulingUpdateSchedule(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Describes a schedule associated with an account. Requires at least 1 occurrence or recurTransfer to be specified.
   */
  async getSchedules(
    security: operations.GetSchedulesSecurity,
    request: operations.GetSchedulesRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduleResponse> {
    return unwrapAsync(schedulingGetSchedules(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Describes the schedule to cancel.
   */
  async cancelSchedule(
    security: operations.CancelScheduleSecurity,
    request: operations.CancelScheduleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(schedulingCancelSchedule(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Defines an occurrence for when to run a transfer.
   */
  async getScheduledOccurrence(
    security: operations.GetScheduledOccurrenceSecurity,
    request: operations.GetScheduledOccurrenceRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduleResponse> {
    return unwrapAsync(schedulingGetScheduledOccurrence(
      this,
      security,
      request,
      options,
    ));
  }
}
