/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { cardsCreateApplePaySession } from "../funcs/cardsCreateApplePaySession.js";
import { cardsDisableCard } from "../funcs/cardsDisableCard.js";
import { cardsGetApplePayMerchantDomains } from "../funcs/cardsGetApplePayMerchantDomains.js";
import { cardsGetCard } from "../funcs/cardsGetCard.js";
import { cardsLinkApplePayToken } from "../funcs/cardsLinkApplePayToken.js";
import { cardsLinkCard } from "../funcs/cardsLinkCard.js";
import { cardsListCards } from "../funcs/cardsListCards.js";
import { cardsRegisterApplePayMerchantDomains } from "../funcs/cardsRegisterApplePayMerchantDomains.js";
import { cardsUpdateApplePayMerchantDomains } from "../funcs/cardsUpdateApplePayMerchantDomains.js";
import { cardsUpdateCard } from "../funcs/cardsUpdateCard.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Cards extends ClientSDK {
  /**
   * Add domains to be registered with Apple Pay.
   *
   * Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)
   * with Apple.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a
   * [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async registerApplePayMerchantDomains(
    security: operations.RegisterApplePayMerchantDomainsSecurity,
    request: operations.RegisterApplePayMerchantDomainsRequest,
    options?: RequestOptions,
  ): Promise<components.ApplePayMerchantDomains> {
    return unwrapAsync(cardsRegisterApplePayMerchantDomains(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   *   Add or remove domains to be registered with Apple Pay.
   *
   *   Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)
   *   with Apple.
   *
   *   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a
   *   [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async updateApplePayMerchantDomains(
    security: operations.UpdateApplePayMerchantDomainsSecurity,
    request: operations.UpdateApplePayMerchantDomainsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(cardsUpdateApplePayMerchantDomains(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   *   Get domains registered with Apple Pay.
   *
   *   Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.
   *
   *   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.read` scope when generating a
   *   [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async getApplePayMerchantDomains(
    security: operations.GetApplePayMerchantDomainsSecurity,
    request: operations.GetApplePayMerchantDomainsRequest,
    options?: RequestOptions,
  ): Promise<components.ApplePayMerchantDomains> {
    return unwrapAsync(cardsGetApplePayMerchantDomains(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create a session with Apple Pay to facilitate a payment.
   *
   * Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.
   * A successful response from this endpoint should be passed through to Apple Pay unchanged.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async createApplePaySession(
    security: operations.CreateApplePaySessionSecurity,
    request: operations.CreateApplePaySessionRequest,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(cardsCreateApplePaySession(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Connect an Apple Pay token to the specified account.
   *
   * Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.
   * The `token` data is defined by Apple Pay and should be passed through from Apple Pay's response unmodified.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async linkApplePayToken(
    security: operations.LinkApplePayTokenSecurity,
    request: operations.LinkApplePayTokenRequest,
    options?: RequestOptions,
  ): Promise<components.LinkedApplePayPaymentMethod> {
    return unwrapAsync(cardsLinkApplePayToken(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Link a card to an existing Moov account.
   *
   * Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#link-a-card) to learn more.
   *
   * Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.
   *
   * During card linking, the provided data will be verified by submitting a $0 authorization (account verification) request.
   * If `merchantAccountID` is provided, the authorization request will contain that account's statement descriptor and address.
   * Otherwise, the platform account's profile will be used. If no statement descriptor has been set, the authorization will
   * use the account's name instead.
   *
   * It is strongly recommended that callers include the `X-Wait-For` header, set to `payment-method`, if the newly linked
   * card is intended to be used right away. If this header is not included, the caller will need to poll the [List Payment
   * Methods](https://docs.moov.io/api/sources/payment-methods/list/)
   * endpoint to wait for the new payment methods to be available for use.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope
   * when generating a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async linkCard(
    security: operations.LinkCardSecurity,
    request: operations.LinkCardRequest,
    options?: RequestOptions,
  ): Promise<components.Card> {
    return unwrapAsync(cardsLinkCard(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List all the active cards associated with a Moov account.
   *
   * Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async listCards(
    security: operations.ListCardsSecurity,
    request: operations.ListCardsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Card>> {
    return unwrapAsync(cardsListCards(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Fetch a specific card associated with a Moov account.
   *
   * Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async getCard(
    security: operations.GetCardSecurity,
    request: operations.GetCardRequest,
    options?: RequestOptions,
  ): Promise<components.Card> {
    return unwrapAsync(cardsGetCard(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update a linked card and/or resubmit it for verification.
   *
   * If a value is provided for CVV, a new verification ($0 authorization) will be submitted for the card. Updating the expiration
   * date or
   * address will update the information stored on file for the card but will not be verified.
   *
   * Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#reverify-a-card) to learn
   * more.
   *
   * Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async updateCard(
    security: operations.UpdateCardSecurity,
    request: operations.UpdateCardRequest,
    options?: RequestOptions,
  ): Promise<components.Card> {
    return unwrapAsync(cardsUpdateCard(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Disables a card associated with a Moov account.
   *
   * To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating
   * a [token](https://docs.moov.io/api/authentication/access-tokens/).
   */
  async disableCard(
    security: operations.DisableCardSecurity,
    request: operations.DisableCardRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(cardsDisableCard(
      this,
      security,
      request,
      options,
    ));
  }
}
