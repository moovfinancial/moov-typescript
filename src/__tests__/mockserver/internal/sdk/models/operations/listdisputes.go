// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type ListDisputesGlobals struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
}

func (l ListDisputesGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDisputesGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListDisputesGlobals) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

type ListDisputesRequest struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
	AccountID    string  `pathParam:"style=simple,explode=false,name=accountID"`
	Skip         *int64  `queryParam:"style=form,explode=false,name=skip"`
	Count        *int64  `queryParam:"style=form,explode=false,name=count"`
	// Optional date-time parameter to filter all disputes created on and after the provided date and time.
	StartDateTime *time.Time `queryParam:"style=form,explode=false,name=startDateTime"`
	// Optional date-time parameter to filter all disputes created on and before the provided date and time.
	EndDateTime *time.Time `queryParam:"style=form,explode=false,name=endDateTime"`
	// Optional date-time which exclusively filters all disputes with respond by before this date-time.
	RespondStartDateTime *time.Time `queryParam:"style=form,explode=false,name=respondStartDateTime"`
	// Optional date-time which exclusively filters all disputes with respond by before this date-time.
	RespondEndDateTime *time.Time `queryParam:"style=form,explode=false,name=respondEndDateTime"`
	// Optional dispute status by which to filter the disputes.
	Status *components.DisputeStatus `queryParam:"style=form,explode=false,name=status"`
	// Optional parameter to filter by merchant account ID.
	MerchantAccountID *string `queryParam:"style=form,explode=false,name=merchantAccountID"`
	// Optional parameter to filter by cardholder account ID.
	CardholderAccountID *string `queryParam:"style=form,explode=false,name=cardholderAccountID"`
	// Optional parameter to filter by a comma separated list of dispute IDs.
	DisputeIDs []string `queryParam:"style=form,explode=false,name=disputeIDs"`
	// Optional parameter to filter by a comma separated list of transfer IDs.
	TransferIDs []string `queryParam:"style=form,explode=false,name=transferIDs"`
	OrderBy     *string  `queryParam:"style=form,explode=false,name=orderBy"`
}

func (l ListDisputesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDisputesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListDisputesRequest) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

func (o *ListDisputesRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListDisputesRequest) GetSkip() *int64 {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *ListDisputesRequest) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListDisputesRequest) GetStartDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDateTime
}

func (o *ListDisputesRequest) GetEndDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDateTime
}

func (o *ListDisputesRequest) GetRespondStartDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.RespondStartDateTime
}

func (o *ListDisputesRequest) GetRespondEndDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.RespondEndDateTime
}

func (o *ListDisputesRequest) GetStatus() *components.DisputeStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListDisputesRequest) GetMerchantAccountID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantAccountID
}

func (o *ListDisputesRequest) GetCardholderAccountID() *string {
	if o == nil {
		return nil
	}
	return o.CardholderAccountID
}

func (o *ListDisputesRequest) GetDisputeIDs() []string {
	if o == nil {
		return nil
	}
	return o.DisputeIDs
}

func (o *ListDisputesRequest) GetTransferIDs() []string {
	if o == nil {
		return nil
	}
	return o.TransferIDs
}

func (o *ListDisputesRequest) GetOrderBy() *string {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

type ListDisputesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request completed successfully.
	Disputes []components.Dispute
	Headers  map[string][]string
}

func (o *ListDisputesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListDisputesResponse) GetDisputes() []components.Dispute {
	if o == nil {
		return nil
	}
	return o.Disputes
}

func (o *ListDisputesResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
