// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetPaymentMethodGlobals struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
}

func (g GetPaymentMethodGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetPaymentMethodGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetPaymentMethodGlobals) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

type GetPaymentMethodRequest struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion    *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
	AccountID       string  `pathParam:"style=simple,explode=false,name=accountID"`
	PaymentMethodID string  `pathParam:"style=simple,explode=false,name=paymentMethodID"`
}

func (g GetPaymentMethodRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetPaymentMethodRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetPaymentMethodRequest) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

func (o *GetPaymentMethodRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *GetPaymentMethodRequest) GetPaymentMethodID() string {
	if o == nil {
		return ""
	}
	return o.PaymentMethodID
}

type GetPaymentMethodResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request completed successfully.
	PaymentMethod *components.PaymentMethod
	Headers       map[string][]string
}

func (o *GetPaymentMethodResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPaymentMethodResponse) GetPaymentMethod() *components.PaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *GetPaymentMethodResponse) GetPaymentMethodMoovWallet() *components.MoovWalletPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.MoovWalletPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodAchDebitFund() *components.AchDebitFundPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.AchDebitFundPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodAchDebitCollect() *components.AchDebitCollectPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.AchDebitCollectPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodAchCreditStandard() *components.AchCreditStandardPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.AchCreditStandardPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodAchCreditSameDay() *components.AchCreditSameDayPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.AchCreditSameDayPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodRtpCredit() *components.RtpCreditPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.RtpCreditPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodCardPayment() *components.CardPaymentPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.CardPaymentPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodPushToCard() *components.PushToCardPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.PushToCardPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodPullFromCard() *components.PullFromCardPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.PullFromCardPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodApplePay() *components.ApplePayPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.ApplePayPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetPaymentMethodCardPresentPayment() *components.CardPresentPaymentPaymentMethod {
	if v := o.GetPaymentMethod(); v != nil {
		return v.CardPresentPaymentPaymentMethod
	}
	return nil
}

func (o *GetPaymentMethodResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
