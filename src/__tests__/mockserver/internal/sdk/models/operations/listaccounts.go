// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ListAccountsGlobals struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
}

func (l ListAccountsGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsGlobals) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

type ListAccountsRequest struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
	// Filter connected accounts by name.
	//
	// If provided, this query will attempt to find matches against the following Account and Profile fields:
	// <ul>
	//   <li>Account `displayName`</li>
	//   <li>Individual Profile `firstName`, `middleName`, and `lastName`</li>
	//   <li>Business Profile `legalBusinessName`</li>
	// </ul>
	Name *string `queryParam:"style=form,explode=false,name=name"`
	//   Filter connected accounts by email address.
	//
	//   Provide the full email address to filter by email.
	Email *string `queryParam:"style=form,explode=false,name=email"`
	//   Filter connected accounts by AccountType.
	//
	//   If the `type` parameter is used in combination with `name`, only the corresponding type's name fields will
	//   be searched. For example, if `type=business` and `name=moov`, the search will attempt to find matches against
	//   the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).
	Type *components.AccountType `queryParam:"style=form,explode=false,name=type"`
	//   Filter accounts with AccountType guest.
	//
	//   If true, the response will include guest accounts.
	IncludeGuest *bool `queryParam:"style=form,explode=false,name=includeGuest"`
	//   Serves as an optional alias from a foreign/external system which can be used to reference this resource.
	ForeignID *string `queryParam:"style=form,explode=false,name=foreignID"`
	// Filter disconnected accounts.
	//
	// If true, the response will include disconnected accounts.
	IncludeDisconnected *bool `queryParam:"style=form,explode=false,name=includeDisconnected"`
	//   Filter connected accounts by the capability.
	Capability *components.CapabilityID `queryParam:"style=form,explode=false,name=capability"`
	//   Filter connected accounts by the capability.
	CapabilityStatus *components.CapabilityStatus `queryParam:"style=form,explode=false,name=capabilityStatus"`
	Skip             *int64                       `queryParam:"style=form,explode=false,name=skip"`
	Count            *int64                       `queryParam:"style=form,explode=false,name=count"`
}

func (l ListAccountsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsRequest) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

func (o *ListAccountsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListAccountsRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListAccountsRequest) GetType() *components.AccountType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListAccountsRequest) GetIncludeGuest() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeGuest
}

func (o *ListAccountsRequest) GetForeignID() *string {
	if o == nil {
		return nil
	}
	return o.ForeignID
}

func (o *ListAccountsRequest) GetIncludeDisconnected() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeDisconnected
}

func (o *ListAccountsRequest) GetCapability() *components.CapabilityID {
	if o == nil {
		return nil
	}
	return o.Capability
}

func (o *ListAccountsRequest) GetCapabilityStatus() *components.CapabilityStatus {
	if o == nil {
		return nil
	}
	return o.CapabilityStatus
}

func (o *ListAccountsRequest) GetSkip() *int64 {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *ListAccountsRequest) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

type ListAccountsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request completed successfully.
	Accounts []components.Account
	Headers  map[string][]string
}

func (o *ListAccountsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListAccountsResponse) GetAccounts() []components.Account {
	if o == nil {
		return nil
	}
	return o.Accounts
}

func (o *ListAccountsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
