// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetEnrichmentAddressGlobals struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
}

func (g GetEnrichmentAddressGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEnrichmentAddressGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetEnrichmentAddressGlobals) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

type GetEnrichmentAddressRequest struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
	// Partial or complete address to search.
	Search string `queryParam:"style=form,explode=false,name=search"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=false,name=maxResults"`
	// Limits results to a list of given cities.
	IncludeCities *string `queryParam:"style=form,explode=false,name=includeCities"`
	// Limits results to a list of given states.
	IncludeStates *string `queryParam:"style=form,explode=false,name=includeStates"`
	// Limits results to a list of given zipcodes.
	IncludeZipcodes *string `queryParam:"style=form,explode=false,name=includeZipcodes"`
	// Exclude list of states from results. No `include` pararmeters may be used with this parameter.
	ExcludeStates *string `queryParam:"style=form,explode=false,name=excludeStates"`
	// Display results with the listed cities at the top.
	PreferCities *string `queryParam:"style=form,explode=false,name=preferCities"`
	// Display results with the listed states at the top.
	PreferStates *string `queryParam:"style=form,explode=false,name=preferStates"`
	// Display results with the listed zipcodes at the top.
	PreferZipcodes *string `queryParam:"style=form,explode=false,name=preferZipcodes"`
	// Specifies the percentage of address suggestions that should be preferred and will appear at the top of the results.
	PreferRatio *int64 `queryParam:"style=form,explode=false,name=preferRatio"`
	//   If omitted or set to `city`, it uses the sender's IP address to determine location, then automatically adds the city and state
	//   to the preferCities value. This parameter takes precedence over other `include` or `exclude` parameters meaning that if it is
	//   not set to `none`, you may see addresses from areas you do not wish to see.
	PreferGeolocation *string `queryParam:"style=form,explode=false,name=preferGeolocation"`
	// Useful for narrowing results with `addressLine2` suggestions such as `Apt` (denotes an apartment building with multiple residences).
	Selected *string `queryParam:"style=form,explode=false,name=selected"`
	// Include results from alternate data sources. Allowed values are `all` (non-postal addresses), or `postal` (postal addresses only).
	Source *string `queryParam:"style=form,explode=false,name=source"`
}

func (g GetEnrichmentAddressRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEnrichmentAddressRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetEnrichmentAddressRequest) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

func (o *GetEnrichmentAddressRequest) GetSearch() string {
	if o == nil {
		return ""
	}
	return o.Search
}

func (o *GetEnrichmentAddressRequest) GetMaxResults() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetEnrichmentAddressRequest) GetIncludeCities() *string {
	if o == nil {
		return nil
	}
	return o.IncludeCities
}

func (o *GetEnrichmentAddressRequest) GetIncludeStates() *string {
	if o == nil {
		return nil
	}
	return o.IncludeStates
}

func (o *GetEnrichmentAddressRequest) GetIncludeZipcodes() *string {
	if o == nil {
		return nil
	}
	return o.IncludeZipcodes
}

func (o *GetEnrichmentAddressRequest) GetExcludeStates() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeStates
}

func (o *GetEnrichmentAddressRequest) GetPreferCities() *string {
	if o == nil {
		return nil
	}
	return o.PreferCities
}

func (o *GetEnrichmentAddressRequest) GetPreferStates() *string {
	if o == nil {
		return nil
	}
	return o.PreferStates
}

func (o *GetEnrichmentAddressRequest) GetPreferZipcodes() *string {
	if o == nil {
		return nil
	}
	return o.PreferZipcodes
}

func (o *GetEnrichmentAddressRequest) GetPreferRatio() *int64 {
	if o == nil {
		return nil
	}
	return o.PreferRatio
}

func (o *GetEnrichmentAddressRequest) GetPreferGeolocation() *string {
	if o == nil {
		return nil
	}
	return o.PreferGeolocation
}

func (o *GetEnrichmentAddressRequest) GetSelected() *string {
	if o == nil {
		return nil
	}
	return o.Selected
}

func (o *GetEnrichmentAddressRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

type GetEnrichmentAddressResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request completed successfully.
	EnrichedAddressResponse *components.EnrichedAddressResponse
	Headers                 map[string][]string
}

func (o *GetEnrichmentAddressResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetEnrichmentAddressResponse) GetEnrichedAddressResponse() *components.EnrichedAddressResponse {
	if o == nil {
		return nil
	}
	return o.EnrichedAddressResponse
}

func (o *GetEnrichmentAddressResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
