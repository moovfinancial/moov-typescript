// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ListSchedulesGlobals struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
}

func (l ListSchedulesGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSchedulesGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListSchedulesGlobals) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

type Hydrate string

const (
	HydrateAccounts Hydrate = "accounts"
)

func (e Hydrate) ToPointer() *Hydrate {
	return &e
}
func (e *Hydrate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accounts":
		*e = Hydrate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hydrate: %v", v)
	}
}

type ListSchedulesRequest struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string  `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
	Skip         *int64   `queryParam:"style=form,explode=false,name=skip"`
	Count        *int64   `queryParam:"style=form,explode=false,name=count"`
	Hydrate      *Hydrate `queryParam:"style=form,explode=false,name=hydrate"`
	AccountID    string   `pathParam:"style=simple,explode=false,name=accountID"`
}

func (l ListSchedulesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSchedulesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListSchedulesRequest) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

func (o *ListSchedulesRequest) GetSkip() *int64 {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *ListSchedulesRequest) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListSchedulesRequest) GetHydrate() *Hydrate {
	if o == nil {
		return nil
	}
	return o.Hydrate
}

func (o *ListSchedulesRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

type ListSchedulesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request completed successfully.
	ScheduleListResponses []components.ScheduleListResponse
	Headers               map[string][]string
}

func (o *ListSchedulesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSchedulesResponse) GetScheduleListResponses() []components.ScheduleListResponse {
	if o == nil {
		return nil
	}
	return o.ScheduleListResponses
}

func (o *ListSchedulesResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
