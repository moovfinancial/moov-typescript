// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type ListWalletTransactionsGlobals struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
}

func (l ListWalletTransactionsGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListWalletTransactionsGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListWalletTransactionsGlobals) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

type ListWalletTransactionsRequest struct {
	// Specify an API version.
	//
	// API versioning follows the format `vYYYY.QQ.BB`, where
	//   - `YYYY` is the year
	//   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
	//   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
	//     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
	//
	// The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
	XMoovVersion *string `default:"v2024.01.00" header:"style=simple,explode=false,name=x-moov-version"`
	AccountID    string  `pathParam:"style=simple,explode=false,name=accountID"`
	Skip         *int64  `queryParam:"style=form,explode=false,name=skip"`
	Count        *int64  `queryParam:"style=form,explode=false,name=count"`
	WalletID     string  `pathParam:"style=simple,explode=false,name=walletID"`
	// Optional parameter to filter by transaction type.
	TransactionType *components.WalletTransactionType `queryParam:"style=form,explode=false,name=transactionType"`
	// Optional, comma-separated parameter to filter by transaction types.
	TransactionTypes []components.WalletTransactionType `queryParam:"style=form,explode=false,name=transactionTypes"`
	// Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction).
	SourceType *components.WalletTransactionSourceType `queryParam:"style=form,explode=false,name=sourceType"`
	// Optional parameter to filter by source ID.
	SourceID *string `queryParam:"style=form,explode=false,name=sourceID"`
	// Optional parameter to filter by status (`pending` or `completed`).
	Status *components.WalletTransactionStatus `queryParam:"style=form,explode=false,name=status"`
	// Optional date-time which inclusively filters all transactions created after this date-time.
	CreatedStartDateTime *time.Time `queryParam:"style=form,explode=false,name=createdStartDateTime"`
	// Optional date-time which exclusively filters all transactions created before this date-time.
	CreatedEndDateTime *time.Time `queryParam:"style=form,explode=false,name=createdEndDateTime"`
	// Optional date-time which inclusively filters all transactions completed after this date-time.
	CompletedStartDateTime *time.Time `queryParam:"style=form,explode=false,name=completedStartDateTime"`
	// Optional date-time which exclusively filters all transactions completed before this date-time.
	CompletedEndDateTime *time.Time `queryParam:"style=form,explode=false,name=completedEndDateTime"`
	// Optional ID to filter for transactions accrued in a sweep.
	SweepID *string `queryParam:"style=form,explode=false,name=sweepID"`
}

func (l ListWalletTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListWalletTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListWalletTransactionsRequest) GetXMoovVersion() *string {
	if o == nil {
		return nil
	}
	return o.XMoovVersion
}

func (o *ListWalletTransactionsRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListWalletTransactionsRequest) GetSkip() *int64 {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *ListWalletTransactionsRequest) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListWalletTransactionsRequest) GetWalletID() string {
	if o == nil {
		return ""
	}
	return o.WalletID
}

func (o *ListWalletTransactionsRequest) GetTransactionType() *components.WalletTransactionType {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

func (o *ListWalletTransactionsRequest) GetTransactionTypes() []components.WalletTransactionType {
	if o == nil {
		return nil
	}
	return o.TransactionTypes
}

func (o *ListWalletTransactionsRequest) GetSourceType() *components.WalletTransactionSourceType {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *ListWalletTransactionsRequest) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *ListWalletTransactionsRequest) GetStatus() *components.WalletTransactionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListWalletTransactionsRequest) GetCreatedStartDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedStartDateTime
}

func (o *ListWalletTransactionsRequest) GetCreatedEndDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedEndDateTime
}

func (o *ListWalletTransactionsRequest) GetCompletedStartDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedStartDateTime
}

func (o *ListWalletTransactionsRequest) GetCompletedEndDateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedEndDateTime
}

func (o *ListWalletTransactionsRequest) GetSweepID() *string {
	if o == nil {
		return nil
	}
	return o.SweepID
}

type ListWalletTransactionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request completed successfully.
	WalletTransactions []components.WalletTransaction
	Headers            map[string][]string
}

func (o *ListWalletTransactionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListWalletTransactionsResponse) GetWalletTransactions() []components.WalletTransaction {
	if o == nil {
		return nil
	}
	return o.WalletTransactions
}

func (o *ListWalletTransactionsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
