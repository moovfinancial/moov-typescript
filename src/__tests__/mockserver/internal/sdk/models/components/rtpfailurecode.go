// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// RTPFailureCode - Status codes for RTP failures.
type RTPFailureCode string

const (
	RTPFailureCodeProcessingError         RTPFailureCode = "processing-error"
	RTPFailureCodeInvalidAccount          RTPFailureCode = "invalid-account"
	RTPFailureCodeAccountClosed           RTPFailureCode = "account-closed"
	RTPFailureCodeAccountBlocked          RTPFailureCode = "account-blocked"
	RTPFailureCodeInvalidField            RTPFailureCode = "invalid-field"
	RTPFailureCodeTransactionNotSupported RTPFailureCode = "transaction-not-supported"
	RTPFailureCodeLimitExceeded           RTPFailureCode = "limit-exceeded"
	RTPFailureCodeInvalidAmount           RTPFailureCode = "invalid-amount"
	RTPFailureCodeCustomerDeceased        RTPFailureCode = "customer-deceased"
	RTPFailureCodeOther                   RTPFailureCode = "other"
)

func (e RTPFailureCode) ToPointer() *RTPFailureCode {
	return &e
}
func (e *RTPFailureCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "processing-error":
		fallthrough
	case "invalid-account":
		fallthrough
	case "account-closed":
		fallthrough
	case "account-blocked":
		fallthrough
	case "invalid-field":
		fallthrough
	case "transaction-not-supported":
		fallthrough
	case "limit-exceeded":
		fallthrough
	case "invalid-amount":
		fallthrough
	case "customer-deceased":
		fallthrough
	case "other":
		*e = RTPFailureCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RTPFailureCode: %v", v)
	}
}
