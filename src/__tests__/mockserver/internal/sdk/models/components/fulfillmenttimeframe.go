// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type FulfillmentTimeframe string

const (
	FulfillmentTimeframeImmediate         FulfillmentTimeframe = "immediate"
	FulfillmentTimeframeOther             FulfillmentTimeframe = "other"
	FulfillmentTimeframeOver30Days        FulfillmentTimeframe = "over-30-days"
	FulfillmentTimeframePreOrder          FulfillmentTimeframe = "pre-order"
	FulfillmentTimeframeRecurringSchedule FulfillmentTimeframe = "recurring-schedule"
	FulfillmentTimeframeScheduledEvent    FulfillmentTimeframe = "scheduled-event"
	FulfillmentTimeframeWithin30Days      FulfillmentTimeframe = "within-30-days"
	FulfillmentTimeframeWithin7Days       FulfillmentTimeframe = "within-7-days"
)

func (e FulfillmentTimeframe) ToPointer() *FulfillmentTimeframe {
	return &e
}
func (e *FulfillmentTimeframe) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "immediate":
		fallthrough
	case "other":
		fallthrough
	case "over-30-days":
		fallthrough
	case "pre-order":
		fallthrough
	case "recurring-schedule":
		fallthrough
	case "scheduled-event":
		fallthrough
	case "within-30-days":
		fallthrough
	case "within-7-days":
		*e = FulfillmentTimeframe(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FulfillmentTimeframe: %v", v)
	}
}
