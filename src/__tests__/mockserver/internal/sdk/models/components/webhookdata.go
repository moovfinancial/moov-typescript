// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type WebhookDataType string

const (
	WebhookDataTypeWebhookDataAccountCreated             WebhookDataType = "WebhookDataAccountCreated"
	WebhookDataTypeWebhookDataAccountUpdated             WebhookDataType = "WebhookDataAccountUpdated"
	WebhookDataTypeWebhookDataAccountDeleted             WebhookDataType = "WebhookDataAccountDeleted"
	WebhookDataTypeWebhookDataBalanceUpdated             WebhookDataType = "WebhookDataBalanceUpdated"
	WebhookDataTypeWebhookDataBankAccountCreated         WebhookDataType = "WebhookDataBankAccountCreated"
	WebhookDataTypeWebhookDataBankAccountUpdated         WebhookDataType = "WebhookDataBankAccountUpdated"
	WebhookDataTypeWebhookDataBankAccountDeleted         WebhookDataType = "WebhookDataBankAccountDeleted"
	WebhookDataTypeWebhookDataCancellationCreated        WebhookDataType = "WebhookDataCancellationCreated"
	WebhookDataTypeWebhookDataCancellationUpdated        WebhookDataType = "WebhookDataCancellationUpdated"
	WebhookDataTypeWebhookDataCardAutoUpdated            WebhookDataType = "WebhookDataCardAutoUpdated"
	WebhookDataTypeWebhookDataCapabilityRequested        WebhookDataType = "WebhookDataCapabilityRequested"
	WebhookDataTypeWebhookDataCapabilityUpdated          WebhookDataType = "WebhookDataCapabilityUpdated"
	WebhookDataTypeWebhookDataDisputeCreated             WebhookDataType = "WebhookDataDisputeCreated"
	WebhookDataTypeWebhookDataDisputeUpdated             WebhookDataType = "WebhookDataDisputeUpdated"
	WebhookDataTypeWebhookDataNetworkIDUpdated           WebhookDataType = "WebhookDataNetworkIDUpdated"
	WebhookDataTypeWebhookDataPaymentMethodEnabled       WebhookDataType = "WebhookDataPaymentMethodEnabled"
	WebhookDataTypeWebhookDataPaymentMethodDisabled      WebhookDataType = "WebhookDataPaymentMethodDisabled"
	WebhookDataTypeWebhookDataRefundCreated              WebhookDataType = "WebhookDataRefundCreated"
	WebhookDataTypeWebhookDataRefundUpdated              WebhookDataType = "WebhookDataRefundUpdated"
	WebhookDataTypeWebhookDataRepresentativeCreated      WebhookDataType = "WebhookDataRepresentativeCreated"
	WebhookDataTypeWebhookDataRepresentativeUpdated      WebhookDataType = "WebhookDataRepresentativeUpdated"
	WebhookDataTypeWebhookDataRepresentativeDisabled     WebhookDataType = "WebhookDataRepresentativeDisabled"
	WebhookDataTypeWebhookDataSweepCreated               WebhookDataType = "WebhookDataSweepCreated"
	WebhookDataTypeWebhookDataSweepUpdated               WebhookDataType = "WebhookDataSweepUpdated"
	WebhookDataTypeWebhookDataTerminalApplicationCreated WebhookDataType = "WebhookDataTerminalApplicationCreated"
	WebhookDataTypeWebhookDataTerminalApplicationUpdated WebhookDataType = "WebhookDataTerminalApplicationUpdated"
	WebhookDataTypeWebhookDataTransferCreated            WebhookDataType = "WebhookDataTransferCreated"
	WebhookDataTypeWebhookDataTransferUpdated            WebhookDataType = "WebhookDataTransferUpdated"
	WebhookDataTypeWebhookDataWalletTransactionUpdated   WebhookDataType = "WebhookDataWalletTransactionUpdated"
)

// WebhookData - The data for the webhook event. The contents are based on the event type.
type WebhookData struct {
	WebhookDataAccountCreated             *WebhookDataAccountCreated             `queryParam:"inline"`
	WebhookDataAccountUpdated             *WebhookDataAccountUpdated             `queryParam:"inline"`
	WebhookDataAccountDeleted             *WebhookDataAccountDeleted             `queryParam:"inline"`
	WebhookDataBalanceUpdated             *WebhookDataBalanceUpdated             `queryParam:"inline"`
	WebhookDataBankAccountCreated         *WebhookDataBankAccountCreated         `queryParam:"inline"`
	WebhookDataBankAccountUpdated         *WebhookDataBankAccountUpdated         `queryParam:"inline"`
	WebhookDataBankAccountDeleted         *WebhookDataBankAccountDeleted         `queryParam:"inline"`
	WebhookDataCancellationCreated        *WebhookDataCancellationCreated        `queryParam:"inline"`
	WebhookDataCancellationUpdated        *WebhookDataCancellationUpdated        `queryParam:"inline"`
	WebhookDataCardAutoUpdated            *WebhookDataCardAutoUpdated            `queryParam:"inline"`
	WebhookDataCapabilityRequested        *WebhookDataCapabilityRequested        `queryParam:"inline"`
	WebhookDataCapabilityUpdated          *WebhookDataCapabilityUpdated          `queryParam:"inline"`
	WebhookDataDisputeCreated             *WebhookDataDisputeCreated             `queryParam:"inline"`
	WebhookDataDisputeUpdated             *WebhookDataDisputeUpdated             `queryParam:"inline"`
	WebhookDataNetworkIDUpdated           *WebhookDataNetworkIDUpdated           `queryParam:"inline"`
	WebhookDataPaymentMethodEnabled       *WebhookDataPaymentMethodEnabled       `queryParam:"inline"`
	WebhookDataPaymentMethodDisabled      *WebhookDataPaymentMethodDisabled      `queryParam:"inline"`
	WebhookDataRefundCreated              *WebhookDataRefundCreated              `queryParam:"inline"`
	WebhookDataRefundUpdated              *WebhookDataRefundUpdated              `queryParam:"inline"`
	WebhookDataRepresentativeCreated      *WebhookDataRepresentativeCreated      `queryParam:"inline"`
	WebhookDataRepresentativeUpdated      *WebhookDataRepresentativeUpdated      `queryParam:"inline"`
	WebhookDataRepresentativeDisabled     *WebhookDataRepresentativeDisabled     `queryParam:"inline"`
	WebhookDataSweepCreated               *WebhookDataSweepCreated               `queryParam:"inline"`
	WebhookDataSweepUpdated               *WebhookDataSweepUpdated               `queryParam:"inline"`
	WebhookDataTerminalApplicationCreated *WebhookDataTerminalApplicationCreated `queryParam:"inline"`
	WebhookDataTerminalApplicationUpdated *WebhookDataTerminalApplicationUpdated `queryParam:"inline"`
	WebhookDataTransferCreated            *WebhookDataTransferCreated            `queryParam:"inline"`
	WebhookDataTransferUpdated            *WebhookDataTransferUpdated            `queryParam:"inline"`
	WebhookDataWalletTransactionUpdated   *WebhookDataWalletTransactionUpdated   `queryParam:"inline"`

	Type WebhookDataType
}

func CreateWebhookDataWebhookDataAccountCreated(webhookDataAccountCreated WebhookDataAccountCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataAccountCreated

	return WebhookData{
		WebhookDataAccountCreated: &webhookDataAccountCreated,
		Type:                      typ,
	}
}

func CreateWebhookDataWebhookDataAccountUpdated(webhookDataAccountUpdated WebhookDataAccountUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataAccountUpdated

	return WebhookData{
		WebhookDataAccountUpdated: &webhookDataAccountUpdated,
		Type:                      typ,
	}
}

func CreateWebhookDataWebhookDataAccountDeleted(webhookDataAccountDeleted WebhookDataAccountDeleted) WebhookData {
	typ := WebhookDataTypeWebhookDataAccountDeleted

	return WebhookData{
		WebhookDataAccountDeleted: &webhookDataAccountDeleted,
		Type:                      typ,
	}
}

func CreateWebhookDataWebhookDataBalanceUpdated(webhookDataBalanceUpdated WebhookDataBalanceUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataBalanceUpdated

	return WebhookData{
		WebhookDataBalanceUpdated: &webhookDataBalanceUpdated,
		Type:                      typ,
	}
}

func CreateWebhookDataWebhookDataBankAccountCreated(webhookDataBankAccountCreated WebhookDataBankAccountCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataBankAccountCreated

	return WebhookData{
		WebhookDataBankAccountCreated: &webhookDataBankAccountCreated,
		Type:                          typ,
	}
}

func CreateWebhookDataWebhookDataBankAccountUpdated(webhookDataBankAccountUpdated WebhookDataBankAccountUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataBankAccountUpdated

	return WebhookData{
		WebhookDataBankAccountUpdated: &webhookDataBankAccountUpdated,
		Type:                          typ,
	}
}

func CreateWebhookDataWebhookDataBankAccountDeleted(webhookDataBankAccountDeleted WebhookDataBankAccountDeleted) WebhookData {
	typ := WebhookDataTypeWebhookDataBankAccountDeleted

	return WebhookData{
		WebhookDataBankAccountDeleted: &webhookDataBankAccountDeleted,
		Type:                          typ,
	}
}

func CreateWebhookDataWebhookDataCancellationCreated(webhookDataCancellationCreated WebhookDataCancellationCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataCancellationCreated

	return WebhookData{
		WebhookDataCancellationCreated: &webhookDataCancellationCreated,
		Type:                           typ,
	}
}

func CreateWebhookDataWebhookDataCancellationUpdated(webhookDataCancellationUpdated WebhookDataCancellationUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataCancellationUpdated

	return WebhookData{
		WebhookDataCancellationUpdated: &webhookDataCancellationUpdated,
		Type:                           typ,
	}
}

func CreateWebhookDataWebhookDataCardAutoUpdated(webhookDataCardAutoUpdated WebhookDataCardAutoUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataCardAutoUpdated

	return WebhookData{
		WebhookDataCardAutoUpdated: &webhookDataCardAutoUpdated,
		Type:                       typ,
	}
}

func CreateWebhookDataWebhookDataCapabilityRequested(webhookDataCapabilityRequested WebhookDataCapabilityRequested) WebhookData {
	typ := WebhookDataTypeWebhookDataCapabilityRequested

	return WebhookData{
		WebhookDataCapabilityRequested: &webhookDataCapabilityRequested,
		Type:                           typ,
	}
}

func CreateWebhookDataWebhookDataCapabilityUpdated(webhookDataCapabilityUpdated WebhookDataCapabilityUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataCapabilityUpdated

	return WebhookData{
		WebhookDataCapabilityUpdated: &webhookDataCapabilityUpdated,
		Type:                         typ,
	}
}

func CreateWebhookDataWebhookDataDisputeCreated(webhookDataDisputeCreated WebhookDataDisputeCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataDisputeCreated

	return WebhookData{
		WebhookDataDisputeCreated: &webhookDataDisputeCreated,
		Type:                      typ,
	}
}

func CreateWebhookDataWebhookDataDisputeUpdated(webhookDataDisputeUpdated WebhookDataDisputeUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataDisputeUpdated

	return WebhookData{
		WebhookDataDisputeUpdated: &webhookDataDisputeUpdated,
		Type:                      typ,
	}
}

func CreateWebhookDataWebhookDataNetworkIDUpdated(webhookDataNetworkIDUpdated WebhookDataNetworkIDUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataNetworkIDUpdated

	return WebhookData{
		WebhookDataNetworkIDUpdated: &webhookDataNetworkIDUpdated,
		Type:                        typ,
	}
}

func CreateWebhookDataWebhookDataPaymentMethodEnabled(webhookDataPaymentMethodEnabled WebhookDataPaymentMethodEnabled) WebhookData {
	typ := WebhookDataTypeWebhookDataPaymentMethodEnabled

	return WebhookData{
		WebhookDataPaymentMethodEnabled: &webhookDataPaymentMethodEnabled,
		Type:                            typ,
	}
}

func CreateWebhookDataWebhookDataPaymentMethodDisabled(webhookDataPaymentMethodDisabled WebhookDataPaymentMethodDisabled) WebhookData {
	typ := WebhookDataTypeWebhookDataPaymentMethodDisabled

	return WebhookData{
		WebhookDataPaymentMethodDisabled: &webhookDataPaymentMethodDisabled,
		Type:                             typ,
	}
}

func CreateWebhookDataWebhookDataRefundCreated(webhookDataRefundCreated WebhookDataRefundCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataRefundCreated

	return WebhookData{
		WebhookDataRefundCreated: &webhookDataRefundCreated,
		Type:                     typ,
	}
}

func CreateWebhookDataWebhookDataRefundUpdated(webhookDataRefundUpdated WebhookDataRefundUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataRefundUpdated

	return WebhookData{
		WebhookDataRefundUpdated: &webhookDataRefundUpdated,
		Type:                     typ,
	}
}

func CreateWebhookDataWebhookDataRepresentativeCreated(webhookDataRepresentativeCreated WebhookDataRepresentativeCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataRepresentativeCreated

	return WebhookData{
		WebhookDataRepresentativeCreated: &webhookDataRepresentativeCreated,
		Type:                             typ,
	}
}

func CreateWebhookDataWebhookDataRepresentativeUpdated(webhookDataRepresentativeUpdated WebhookDataRepresentativeUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataRepresentativeUpdated

	return WebhookData{
		WebhookDataRepresentativeUpdated: &webhookDataRepresentativeUpdated,
		Type:                             typ,
	}
}

func CreateWebhookDataWebhookDataRepresentativeDisabled(webhookDataRepresentativeDisabled WebhookDataRepresentativeDisabled) WebhookData {
	typ := WebhookDataTypeWebhookDataRepresentativeDisabled

	return WebhookData{
		WebhookDataRepresentativeDisabled: &webhookDataRepresentativeDisabled,
		Type:                              typ,
	}
}

func CreateWebhookDataWebhookDataSweepCreated(webhookDataSweepCreated WebhookDataSweepCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataSweepCreated

	return WebhookData{
		WebhookDataSweepCreated: &webhookDataSweepCreated,
		Type:                    typ,
	}
}

func CreateWebhookDataWebhookDataSweepUpdated(webhookDataSweepUpdated WebhookDataSweepUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataSweepUpdated

	return WebhookData{
		WebhookDataSweepUpdated: &webhookDataSweepUpdated,
		Type:                    typ,
	}
}

func CreateWebhookDataWebhookDataTerminalApplicationCreated(webhookDataTerminalApplicationCreated WebhookDataTerminalApplicationCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataTerminalApplicationCreated

	return WebhookData{
		WebhookDataTerminalApplicationCreated: &webhookDataTerminalApplicationCreated,
		Type:                                  typ,
	}
}

func CreateWebhookDataWebhookDataTerminalApplicationUpdated(webhookDataTerminalApplicationUpdated WebhookDataTerminalApplicationUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataTerminalApplicationUpdated

	return WebhookData{
		WebhookDataTerminalApplicationUpdated: &webhookDataTerminalApplicationUpdated,
		Type:                                  typ,
	}
}

func CreateWebhookDataWebhookDataTransferCreated(webhookDataTransferCreated WebhookDataTransferCreated) WebhookData {
	typ := WebhookDataTypeWebhookDataTransferCreated

	return WebhookData{
		WebhookDataTransferCreated: &webhookDataTransferCreated,
		Type:                       typ,
	}
}

func CreateWebhookDataWebhookDataTransferUpdated(webhookDataTransferUpdated WebhookDataTransferUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataTransferUpdated

	return WebhookData{
		WebhookDataTransferUpdated: &webhookDataTransferUpdated,
		Type:                       typ,
	}
}

func CreateWebhookDataWebhookDataWalletTransactionUpdated(webhookDataWalletTransactionUpdated WebhookDataWalletTransactionUpdated) WebhookData {
	typ := WebhookDataTypeWebhookDataWalletTransactionUpdated

	return WebhookData{
		WebhookDataWalletTransactionUpdated: &webhookDataWalletTransactionUpdated,
		Type:                                typ,
	}
}

func (u *WebhookData) UnmarshalJSON(data []byte) error {

	var webhookDataRepresentativeCreated WebhookDataRepresentativeCreated = WebhookDataRepresentativeCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataRepresentativeCreated, "", true, true); err == nil {
		u.WebhookDataRepresentativeCreated = &webhookDataRepresentativeCreated
		u.Type = WebhookDataTypeWebhookDataRepresentativeCreated
		return nil
	}

	var webhookDataAccountUpdated WebhookDataAccountUpdated = WebhookDataAccountUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataAccountUpdated, "", true, true); err == nil {
		u.WebhookDataAccountUpdated = &webhookDataAccountUpdated
		u.Type = WebhookDataTypeWebhookDataAccountUpdated
		return nil
	}

	var webhookDataAccountDeleted WebhookDataAccountDeleted = WebhookDataAccountDeleted{}
	if err := utils.UnmarshalJSON(data, &webhookDataAccountDeleted, "", true, true); err == nil {
		u.WebhookDataAccountDeleted = &webhookDataAccountDeleted
		u.Type = WebhookDataTypeWebhookDataAccountDeleted
		return nil
	}

	var webhookDataBalanceUpdated WebhookDataBalanceUpdated = WebhookDataBalanceUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataBalanceUpdated, "", true, true); err == nil {
		u.WebhookDataBalanceUpdated = &webhookDataBalanceUpdated
		u.Type = WebhookDataTypeWebhookDataBalanceUpdated
		return nil
	}

	var webhookDataBankAccountCreated WebhookDataBankAccountCreated = WebhookDataBankAccountCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataBankAccountCreated, "", true, true); err == nil {
		u.WebhookDataBankAccountCreated = &webhookDataBankAccountCreated
		u.Type = WebhookDataTypeWebhookDataBankAccountCreated
		return nil
	}

	var webhookDataTerminalApplicationUpdated WebhookDataTerminalApplicationUpdated = WebhookDataTerminalApplicationUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataTerminalApplicationUpdated, "", true, true); err == nil {
		u.WebhookDataTerminalApplicationUpdated = &webhookDataTerminalApplicationUpdated
		u.Type = WebhookDataTypeWebhookDataTerminalApplicationUpdated
		return nil
	}

	var webhookDataBankAccountDeleted WebhookDataBankAccountDeleted = WebhookDataBankAccountDeleted{}
	if err := utils.UnmarshalJSON(data, &webhookDataBankAccountDeleted, "", true, true); err == nil {
		u.WebhookDataBankAccountDeleted = &webhookDataBankAccountDeleted
		u.Type = WebhookDataTypeWebhookDataBankAccountDeleted
		return nil
	}

	var webhookDataAccountCreated WebhookDataAccountCreated = WebhookDataAccountCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataAccountCreated, "", true, true); err == nil {
		u.WebhookDataAccountCreated = &webhookDataAccountCreated
		u.Type = WebhookDataTypeWebhookDataAccountCreated
		return nil
	}

	var webhookDataTerminalApplicationCreated WebhookDataTerminalApplicationCreated = WebhookDataTerminalApplicationCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataTerminalApplicationCreated, "", true, true); err == nil {
		u.WebhookDataTerminalApplicationCreated = &webhookDataTerminalApplicationCreated
		u.Type = WebhookDataTypeWebhookDataTerminalApplicationCreated
		return nil
	}

	var webhookDataSweepCreated WebhookDataSweepCreated = WebhookDataSweepCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataSweepCreated, "", true, true); err == nil {
		u.WebhookDataSweepCreated = &webhookDataSweepCreated
		u.Type = WebhookDataTypeWebhookDataSweepCreated
		return nil
	}

	var webhookDataRepresentativeDisabled WebhookDataRepresentativeDisabled = WebhookDataRepresentativeDisabled{}
	if err := utils.UnmarshalJSON(data, &webhookDataRepresentativeDisabled, "", true, true); err == nil {
		u.WebhookDataRepresentativeDisabled = &webhookDataRepresentativeDisabled
		u.Type = WebhookDataTypeWebhookDataRepresentativeDisabled
		return nil
	}

	var webhookDataRepresentativeUpdated WebhookDataRepresentativeUpdated = WebhookDataRepresentativeUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataRepresentativeUpdated, "", true, true); err == nil {
		u.WebhookDataRepresentativeUpdated = &webhookDataRepresentativeUpdated
		u.Type = WebhookDataTypeWebhookDataRepresentativeUpdated
		return nil
	}

	var webhookDataCancellationCreated WebhookDataCancellationCreated = WebhookDataCancellationCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataCancellationCreated, "", true, true); err == nil {
		u.WebhookDataCancellationCreated = &webhookDataCancellationCreated
		u.Type = WebhookDataTypeWebhookDataCancellationCreated
		return nil
	}

	var webhookDataCapabilityRequested WebhookDataCapabilityRequested = WebhookDataCapabilityRequested{}
	if err := utils.UnmarshalJSON(data, &webhookDataCapabilityRequested, "", true, true); err == nil {
		u.WebhookDataCapabilityRequested = &webhookDataCapabilityRequested
		u.Type = WebhookDataTypeWebhookDataCapabilityRequested
		return nil
	}

	var webhookDataCancellationUpdated WebhookDataCancellationUpdated = WebhookDataCancellationUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataCancellationUpdated, "", true, true); err == nil {
		u.WebhookDataCancellationUpdated = &webhookDataCancellationUpdated
		u.Type = WebhookDataTypeWebhookDataCancellationUpdated
		return nil
	}

	var webhookDataPaymentMethodEnabled WebhookDataPaymentMethodEnabled = WebhookDataPaymentMethodEnabled{}
	if err := utils.UnmarshalJSON(data, &webhookDataPaymentMethodEnabled, "", true, true); err == nil {
		u.WebhookDataPaymentMethodEnabled = &webhookDataPaymentMethodEnabled
		u.Type = WebhookDataTypeWebhookDataPaymentMethodEnabled
		return nil
	}

	var webhookDataPaymentMethodDisabled WebhookDataPaymentMethodDisabled = WebhookDataPaymentMethodDisabled{}
	if err := utils.UnmarshalJSON(data, &webhookDataPaymentMethodDisabled, "", true, true); err == nil {
		u.WebhookDataPaymentMethodDisabled = &webhookDataPaymentMethodDisabled
		u.Type = WebhookDataTypeWebhookDataPaymentMethodDisabled
		return nil
	}

	var webhookDataRefundCreated WebhookDataRefundCreated = WebhookDataRefundCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataRefundCreated, "", true, true); err == nil {
		u.WebhookDataRefundCreated = &webhookDataRefundCreated
		u.Type = WebhookDataTypeWebhookDataRefundCreated
		return nil
	}

	var webhookDataCardAutoUpdated WebhookDataCardAutoUpdated = WebhookDataCardAutoUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataCardAutoUpdated, "", true, true); err == nil {
		u.WebhookDataCardAutoUpdated = &webhookDataCardAutoUpdated
		u.Type = WebhookDataTypeWebhookDataCardAutoUpdated
		return nil
	}

	var webhookDataCapabilityUpdated WebhookDataCapabilityUpdated = WebhookDataCapabilityUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataCapabilityUpdated, "", true, true); err == nil {
		u.WebhookDataCapabilityUpdated = &webhookDataCapabilityUpdated
		u.Type = WebhookDataTypeWebhookDataCapabilityUpdated
		return nil
	}

	var webhookDataRefundUpdated WebhookDataRefundUpdated = WebhookDataRefundUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataRefundUpdated, "", true, true); err == nil {
		u.WebhookDataRefundUpdated = &webhookDataRefundUpdated
		u.Type = WebhookDataTypeWebhookDataRefundUpdated
		return nil
	}

	var webhookDataSweepUpdated WebhookDataSweepUpdated = WebhookDataSweepUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataSweepUpdated, "", true, true); err == nil {
		u.WebhookDataSweepUpdated = &webhookDataSweepUpdated
		u.Type = WebhookDataTypeWebhookDataSweepUpdated
		return nil
	}

	var webhookDataTransferCreated WebhookDataTransferCreated = WebhookDataTransferCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataTransferCreated, "", true, true); err == nil {
		u.WebhookDataTransferCreated = &webhookDataTransferCreated
		u.Type = WebhookDataTypeWebhookDataTransferCreated
		return nil
	}

	var webhookDataBankAccountUpdated WebhookDataBankAccountUpdated = WebhookDataBankAccountUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataBankAccountUpdated, "", true, true); err == nil {
		u.WebhookDataBankAccountUpdated = &webhookDataBankAccountUpdated
		u.Type = WebhookDataTypeWebhookDataBankAccountUpdated
		return nil
	}

	var webhookDataWalletTransactionUpdated WebhookDataWalletTransactionUpdated = WebhookDataWalletTransactionUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataWalletTransactionUpdated, "", true, true); err == nil {
		u.WebhookDataWalletTransactionUpdated = &webhookDataWalletTransactionUpdated
		u.Type = WebhookDataTypeWebhookDataWalletTransactionUpdated
		return nil
	}

	var webhookDataDisputeCreated WebhookDataDisputeCreated = WebhookDataDisputeCreated{}
	if err := utils.UnmarshalJSON(data, &webhookDataDisputeCreated, "", true, true); err == nil {
		u.WebhookDataDisputeCreated = &webhookDataDisputeCreated
		u.Type = WebhookDataTypeWebhookDataDisputeCreated
		return nil
	}

	var webhookDataDisputeUpdated WebhookDataDisputeUpdated = WebhookDataDisputeUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataDisputeUpdated, "", true, true); err == nil {
		u.WebhookDataDisputeUpdated = &webhookDataDisputeUpdated
		u.Type = WebhookDataTypeWebhookDataDisputeUpdated
		return nil
	}

	var webhookDataNetworkIDUpdated WebhookDataNetworkIDUpdated = WebhookDataNetworkIDUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataNetworkIDUpdated, "", true, true); err == nil {
		u.WebhookDataNetworkIDUpdated = &webhookDataNetworkIDUpdated
		u.Type = WebhookDataTypeWebhookDataNetworkIDUpdated
		return nil
	}

	var webhookDataTransferUpdated WebhookDataTransferUpdated = WebhookDataTransferUpdated{}
	if err := utils.UnmarshalJSON(data, &webhookDataTransferUpdated, "", true, true); err == nil {
		u.WebhookDataTransferUpdated = &webhookDataTransferUpdated
		u.Type = WebhookDataTypeWebhookDataTransferUpdated
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WebhookData", string(data))
}

func (u WebhookData) MarshalJSON() ([]byte, error) {
	if u.WebhookDataAccountCreated != nil {
		return utils.MarshalJSON(u.WebhookDataAccountCreated, "", true)
	}

	if u.WebhookDataAccountUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataAccountUpdated, "", true)
	}

	if u.WebhookDataAccountDeleted != nil {
		return utils.MarshalJSON(u.WebhookDataAccountDeleted, "", true)
	}

	if u.WebhookDataBalanceUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataBalanceUpdated, "", true)
	}

	if u.WebhookDataBankAccountCreated != nil {
		return utils.MarshalJSON(u.WebhookDataBankAccountCreated, "", true)
	}

	if u.WebhookDataBankAccountUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataBankAccountUpdated, "", true)
	}

	if u.WebhookDataBankAccountDeleted != nil {
		return utils.MarshalJSON(u.WebhookDataBankAccountDeleted, "", true)
	}

	if u.WebhookDataCancellationCreated != nil {
		return utils.MarshalJSON(u.WebhookDataCancellationCreated, "", true)
	}

	if u.WebhookDataCancellationUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataCancellationUpdated, "", true)
	}

	if u.WebhookDataCardAutoUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataCardAutoUpdated, "", true)
	}

	if u.WebhookDataCapabilityRequested != nil {
		return utils.MarshalJSON(u.WebhookDataCapabilityRequested, "", true)
	}

	if u.WebhookDataCapabilityUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataCapabilityUpdated, "", true)
	}

	if u.WebhookDataDisputeCreated != nil {
		return utils.MarshalJSON(u.WebhookDataDisputeCreated, "", true)
	}

	if u.WebhookDataDisputeUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataDisputeUpdated, "", true)
	}

	if u.WebhookDataNetworkIDUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataNetworkIDUpdated, "", true)
	}

	if u.WebhookDataPaymentMethodEnabled != nil {
		return utils.MarshalJSON(u.WebhookDataPaymentMethodEnabled, "", true)
	}

	if u.WebhookDataPaymentMethodDisabled != nil {
		return utils.MarshalJSON(u.WebhookDataPaymentMethodDisabled, "", true)
	}

	if u.WebhookDataRefundCreated != nil {
		return utils.MarshalJSON(u.WebhookDataRefundCreated, "", true)
	}

	if u.WebhookDataRefundUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataRefundUpdated, "", true)
	}

	if u.WebhookDataRepresentativeCreated != nil {
		return utils.MarshalJSON(u.WebhookDataRepresentativeCreated, "", true)
	}

	if u.WebhookDataRepresentativeUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataRepresentativeUpdated, "", true)
	}

	if u.WebhookDataRepresentativeDisabled != nil {
		return utils.MarshalJSON(u.WebhookDataRepresentativeDisabled, "", true)
	}

	if u.WebhookDataSweepCreated != nil {
		return utils.MarshalJSON(u.WebhookDataSweepCreated, "", true)
	}

	if u.WebhookDataSweepUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataSweepUpdated, "", true)
	}

	if u.WebhookDataTerminalApplicationCreated != nil {
		return utils.MarshalJSON(u.WebhookDataTerminalApplicationCreated, "", true)
	}

	if u.WebhookDataTerminalApplicationUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataTerminalApplicationUpdated, "", true)
	}

	if u.WebhookDataTransferCreated != nil {
		return utils.MarshalJSON(u.WebhookDataTransferCreated, "", true)
	}

	if u.WebhookDataTransferUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataTransferUpdated, "", true)
	}

	if u.WebhookDataWalletTransactionUpdated != nil {
		return utils.MarshalJSON(u.WebhookDataWalletTransactionUpdated, "", true)
	}

	return nil, errors.New("could not marshal union type WebhookData: all fields are null")
}
