// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type OnboardingInvite struct {
	// A unique code that identifies an onboarding invite.
	Code string `json:"code"`
	// A unique URL, including the invite code, that the recipient can follow to redeem the invitation.
	Link string `json:"link"`
	// The scopes requested by the inviter.
	ReturnURL *string `json:"returnURL,omitempty"`
	// The terms of service URL set by the inviter.
	TermsOfServiceURL *string `json:"termsOfServiceURL,omitempty"`
	// List of [scopes](https://docs.moov.io/api/authentication/scopes/) you request to use on this
	// account. These values are used to determine what can be done with the account onboarded.
	Scopes []ApplicationScope `json:"scopes"`
	//   List of [capabilities](https://docs.moov.io/guides/accounts/capabilities/) you intend to request for this
	//   account. These values are used to determine what information to collect from the user during onboarding.
	Capabilities []CapabilityID `json:"capabilities"`
	// List of fee plan codes to assign the account created by the invitee.
	FeePlanCodes []string `json:"feePlanCodes"`
	// The account ID of the account that redeemed the invite.
	RedeemedAccountID *string        `json:"redeemedAccountID,omitempty"`
	Prefill           *CreateAccount `json:"prefill,omitempty"`
	// The account that created the onboarding invite.
	Partner    *OnboardingPartnerAccount `json:"partner,omitempty"`
	CreatedOn  time.Time                 `json:"createdOn"`
	RevokedOn  *time.Time                `json:"revokedOn,omitempty"`
	RedeemedOn *time.Time                `json:"redeemedOn,omitempty"`
}

func (o OnboardingInvite) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OnboardingInvite) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OnboardingInvite) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *OnboardingInvite) GetLink() string {
	if o == nil {
		return ""
	}
	return o.Link
}

func (o *OnboardingInvite) GetReturnURL() *string {
	if o == nil {
		return nil
	}
	return o.ReturnURL
}

func (o *OnboardingInvite) GetTermsOfServiceURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfServiceURL
}

func (o *OnboardingInvite) GetScopes() []ApplicationScope {
	if o == nil {
		return []ApplicationScope{}
	}
	return o.Scopes
}

func (o *OnboardingInvite) GetCapabilities() []CapabilityID {
	if o == nil {
		return []CapabilityID{}
	}
	return o.Capabilities
}

func (o *OnboardingInvite) GetFeePlanCodes() []string {
	if o == nil {
		return []string{}
	}
	return o.FeePlanCodes
}

func (o *OnboardingInvite) GetRedeemedAccountID() *string {
	if o == nil {
		return nil
	}
	return o.RedeemedAccountID
}

func (o *OnboardingInvite) GetPrefill() *CreateAccount {
	if o == nil {
		return nil
	}
	return o.Prefill
}

func (o *OnboardingInvite) GetPartner() *OnboardingPartnerAccount {
	if o == nil {
		return nil
	}
	return o.Partner
}

func (o *OnboardingInvite) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *OnboardingInvite) GetRevokedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.RevokedOn
}

func (o *OnboardingInvite) GetRedeemedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.RedeemedOn
}
