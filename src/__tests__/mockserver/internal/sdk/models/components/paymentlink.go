// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type PaymentLink struct {
	// Unique code identifying this payment link.
	Code string `json:"code"`
	// The operating mode for an account.
	Mode   Mode              `json:"mode"`
	Status PaymentLinkStatus `json:"status"`
	// The partner's Moov account ID.
	PartnerAccountID string `json:"partnerAccountID"`
	// The merchant's Moov account ID.
	MerchantAccountID string `json:"merchantAccountID"`
	// The merchant's preferred payment method ID. Must be a wallet payment method.
	MerchantPaymentMethodID string `json:"merchantPaymentMethodID"`
	// Link to the payment landing page for this payment link.
	Link   string `json:"link"`
	Amount Amount `json:"amount"`
	// The number of times this payment link has been used.
	Uses int64 `json:"uses"`
	// An optional limit on the number of times this payment link can be used.
	//
	// **For payouts, `maxUses` is always 1.**
	MaxUses *int64 `json:"maxUses,omitempty"`
	// The timestamp when this payment link was last used.
	LastUsedOn *time.Time `json:"lastUsedOn,omitempty"`
	// An optional expiration date for this payment link.
	ExpiresOn *time.Time `json:"expiresOn,omitempty"`
	// Customizable display options for a payment link.
	Display  PaymentLinkDisplayOptions  `json:"display"`
	Customer PaymentLinkCustomerOptions `json:"customer"`
	// Options for payment links used to collect payment.
	Payment    *PaymentLinkPaymentDetails `json:"payment,omitempty"`
	Payout     *PaymentLinkPayoutDetails  `json:"payout,omitempty"`
	CreatedOn  time.Time                  `json:"createdOn"`
	UpdatedOn  time.Time                  `json:"updatedOn"`
	DisabledOn *time.Time                 `json:"disabledOn,omitempty"`
}

func (p PaymentLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PaymentLink) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *PaymentLink) GetMode() Mode {
	if o == nil {
		return Mode("")
	}
	return o.Mode
}

func (o *PaymentLink) GetStatus() PaymentLinkStatus {
	if o == nil {
		return PaymentLinkStatus("")
	}
	return o.Status
}

func (o *PaymentLink) GetPartnerAccountID() string {
	if o == nil {
		return ""
	}
	return o.PartnerAccountID
}

func (o *PaymentLink) GetMerchantAccountID() string {
	if o == nil {
		return ""
	}
	return o.MerchantAccountID
}

func (o *PaymentLink) GetMerchantPaymentMethodID() string {
	if o == nil {
		return ""
	}
	return o.MerchantPaymentMethodID
}

func (o *PaymentLink) GetLink() string {
	if o == nil {
		return ""
	}
	return o.Link
}

func (o *PaymentLink) GetAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.Amount
}

func (o *PaymentLink) GetUses() int64 {
	if o == nil {
		return 0
	}
	return o.Uses
}

func (o *PaymentLink) GetMaxUses() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxUses
}

func (o *PaymentLink) GetLastUsedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUsedOn
}

func (o *PaymentLink) GetExpiresOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresOn
}

func (o *PaymentLink) GetDisplay() PaymentLinkDisplayOptions {
	if o == nil {
		return PaymentLinkDisplayOptions{}
	}
	return o.Display
}

func (o *PaymentLink) GetCustomer() PaymentLinkCustomerOptions {
	if o == nil {
		return PaymentLinkCustomerOptions{}
	}
	return o.Customer
}

func (o *PaymentLink) GetPayment() *PaymentLinkPaymentDetails {
	if o == nil {
		return nil
	}
	return o.Payment
}

func (o *PaymentLink) GetPayout() *PaymentLinkPayoutDetails {
	if o == nil {
		return nil
	}
	return o.Payout
}

func (o *PaymentLink) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *PaymentLink) GetUpdatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedOn
}

func (o *PaymentLink) GetDisabledOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.DisabledOn
}
