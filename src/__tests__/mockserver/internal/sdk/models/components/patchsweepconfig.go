// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type Status string

const (
	StatusEnabled  Status = "enabled"
	StatusDisabled Status = "disabled"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type PushPaymentMethodID struct {
}

type PushPaymentMethodIDUnionType string

const (
	PushPaymentMethodIDUnionTypeStr                 PushPaymentMethodIDUnionType = "str"
	PushPaymentMethodIDUnionTypePushPaymentMethodID PushPaymentMethodIDUnionType = "pushPaymentMethodID"
)

type PushPaymentMethodIDUnion struct {
	Str                 *string              `queryParam:"inline"`
	PushPaymentMethodID *PushPaymentMethodID `queryParam:"inline"`

	Type PushPaymentMethodIDUnionType
}

func CreatePushPaymentMethodIDUnionStr(str string) PushPaymentMethodIDUnion {
	typ := PushPaymentMethodIDUnionTypeStr

	return PushPaymentMethodIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreatePushPaymentMethodIDUnionPushPaymentMethodID(pushPaymentMethodID PushPaymentMethodID) PushPaymentMethodIDUnion {
	typ := PushPaymentMethodIDUnionTypePushPaymentMethodID

	return PushPaymentMethodIDUnion{
		PushPaymentMethodID: &pushPaymentMethodID,
		Type:                typ,
	}
}

func (u *PushPaymentMethodIDUnion) UnmarshalJSON(data []byte) error {

	var pushPaymentMethodID PushPaymentMethodID = PushPaymentMethodID{}
	if err := utils.UnmarshalJSON(data, &pushPaymentMethodID, "", true, true); err == nil {
		u.PushPaymentMethodID = &pushPaymentMethodID
		u.Type = PushPaymentMethodIDUnionTypePushPaymentMethodID
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PushPaymentMethodIDUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PushPaymentMethodIDUnion", string(data))
}

func (u PushPaymentMethodIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.PushPaymentMethodID != nil {
		return utils.MarshalJSON(u.PushPaymentMethodID, "", true)
	}

	return nil, errors.New("could not marshal union type PushPaymentMethodIDUnion: all fields are null")
}

type PullPaymentMethodID struct {
}

type PullPaymentMethodIDUnionType string

const (
	PullPaymentMethodIDUnionTypeStr                 PullPaymentMethodIDUnionType = "str"
	PullPaymentMethodIDUnionTypePullPaymentMethodID PullPaymentMethodIDUnionType = "pullPaymentMethodID"
)

type PullPaymentMethodIDUnion struct {
	Str                 *string              `queryParam:"inline"`
	PullPaymentMethodID *PullPaymentMethodID `queryParam:"inline"`

	Type PullPaymentMethodIDUnionType
}

func CreatePullPaymentMethodIDUnionStr(str string) PullPaymentMethodIDUnion {
	typ := PullPaymentMethodIDUnionTypeStr

	return PullPaymentMethodIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreatePullPaymentMethodIDUnionPullPaymentMethodID(pullPaymentMethodID PullPaymentMethodID) PullPaymentMethodIDUnion {
	typ := PullPaymentMethodIDUnionTypePullPaymentMethodID

	return PullPaymentMethodIDUnion{
		PullPaymentMethodID: &pullPaymentMethodID,
		Type:                typ,
	}
}

func (u *PullPaymentMethodIDUnion) UnmarshalJSON(data []byte) error {

	var pullPaymentMethodID PullPaymentMethodID = PullPaymentMethodID{}
	if err := utils.UnmarshalJSON(data, &pullPaymentMethodID, "", true, true); err == nil {
		u.PullPaymentMethodID = &pullPaymentMethodID
		u.Type = PullPaymentMethodIDUnionTypePullPaymentMethodID
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PullPaymentMethodIDUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PullPaymentMethodIDUnion", string(data))
}

func (u PullPaymentMethodIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.PullPaymentMethodID != nil {
		return utils.MarshalJSON(u.PullPaymentMethodID, "", true)
	}

	return nil, errors.New("could not marshal union type PullPaymentMethodIDUnion: all fields are null")
}

type StatementDescriptor struct {
}

type StatementDescriptorUnionType string

const (
	StatementDescriptorUnionTypeStr                 StatementDescriptorUnionType = "str"
	StatementDescriptorUnionTypeStatementDescriptor StatementDescriptorUnionType = "statementDescriptor"
)

type StatementDescriptorUnion struct {
	Str                 *string              `queryParam:"inline"`
	StatementDescriptor *StatementDescriptor `queryParam:"inline"`

	Type StatementDescriptorUnionType
}

func CreateStatementDescriptorUnionStr(str string) StatementDescriptorUnion {
	typ := StatementDescriptorUnionTypeStr

	return StatementDescriptorUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateStatementDescriptorUnionStatementDescriptor(statementDescriptor StatementDescriptor) StatementDescriptorUnion {
	typ := StatementDescriptorUnionTypeStatementDescriptor

	return StatementDescriptorUnion{
		StatementDescriptor: &statementDescriptor,
		Type:                typ,
	}
}

func (u *StatementDescriptorUnion) UnmarshalJSON(data []byte) error {

	var statementDescriptor StatementDescriptor = StatementDescriptor{}
	if err := utils.UnmarshalJSON(data, &statementDescriptor, "", true, true); err == nil {
		u.StatementDescriptor = &statementDescriptor
		u.Type = StatementDescriptorUnionTypeStatementDescriptor
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StatementDescriptorUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StatementDescriptorUnion", string(data))
}

func (u StatementDescriptorUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.StatementDescriptor != nil {
		return utils.MarshalJSON(u.StatementDescriptor, "", true)
	}

	return nil, errors.New("could not marshal union type StatementDescriptorUnion: all fields are null")
}

type PatchSweepConfig struct {
	Status              *Status                   `json:"status,omitempty"`
	PushPaymentMethodID *PushPaymentMethodIDUnion `json:"pushPaymentMethodID,omitempty"`
	PullPaymentMethodID *PullPaymentMethodIDUnion `json:"pullPaymentMethodID,omitempty"`
	StatementDescriptor *StatementDescriptorUnion `json:"statementDescriptor,omitempty"`
	MinimumBalance      *string                   `json:"minimumBalance,omitempty"`
}

func (o *PatchSweepConfig) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PatchSweepConfig) GetPushPaymentMethodID() *PushPaymentMethodIDUnion {
	if o == nil {
		return nil
	}
	return o.PushPaymentMethodID
}

func (o *PatchSweepConfig) GetPullPaymentMethodID() *PullPaymentMethodIDUnion {
	if o == nil {
		return nil
	}
	return o.PullPaymentMethodID
}

func (o *PatchSweepConfig) GetStatementDescriptor() *StatementDescriptorUnion {
	if o == nil {
		return nil
	}
	return o.StatementDescriptor
}

func (o *PatchSweepConfig) GetMinimumBalance() *string {
	if o == nil {
		return nil
	}
	return o.MinimumBalance
}
