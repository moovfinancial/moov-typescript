// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type DisputeEvidenceResponse struct {
	EvidenceID   string       `json:"evidenceID"`
	DisputeID    string       `json:"disputeID"`
	EvidenceType EvidenceType `json:"evidenceType"`
	// For text evidence, the text submitted as evidence.
	Text *string `json:"text,omitempty"`
	// For file evidence, the MIME type of the file.
	MimeType *string `json:"mimeType,omitempty"`
	// For file evidence, the name of the file.
	Filename *string `json:"filename,omitempty"`
	// For file evidence, the size of the file.
	Size      *int64    `json:"size,omitempty"`
	CreatedOn time.Time `json:"createdOn"`
	UpdatedOn time.Time `json:"updatedOn"`
	// When the evidence was submitted for review.
	SubmittedOn *time.Time `json:"submittedOn,omitempty"`
}

func (d DisputeEvidenceResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DisputeEvidenceResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DisputeEvidenceResponse) GetEvidenceID() string {
	if o == nil {
		return ""
	}
	return o.EvidenceID
}

func (o *DisputeEvidenceResponse) GetDisputeID() string {
	if o == nil {
		return ""
	}
	return o.DisputeID
}

func (o *DisputeEvidenceResponse) GetEvidenceType() EvidenceType {
	if o == nil {
		return EvidenceType("")
	}
	return o.EvidenceType
}

func (o *DisputeEvidenceResponse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *DisputeEvidenceResponse) GetMimeType() *string {
	if o == nil {
		return nil
	}
	return o.MimeType
}

func (o *DisputeEvidenceResponse) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *DisputeEvidenceResponse) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *DisputeEvidenceResponse) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *DisputeEvidenceResponse) GetUpdatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedOn
}

func (o *DisputeEvidenceResponse) GetSubmittedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.SubmittedOn
}
