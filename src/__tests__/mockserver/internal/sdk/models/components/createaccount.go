// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type CreateAccountTermsOfServiceType string

const (
	CreateAccountTermsOfServiceTypeTermsOfServiceToken  CreateAccountTermsOfServiceType = "TermsOfServiceToken"
	CreateAccountTermsOfServiceTypeManualTermsOfService CreateAccountTermsOfServiceType = "ManualTermsOfService"
)

type CreateAccountTermsOfService struct {
	TermsOfServiceToken  *TermsOfServiceToken  `queryParam:"inline"`
	ManualTermsOfService *ManualTermsOfService `queryParam:"inline"`

	Type CreateAccountTermsOfServiceType
}

func CreateCreateAccountTermsOfServiceTermsOfServiceToken(termsOfServiceToken TermsOfServiceToken) CreateAccountTermsOfService {
	typ := CreateAccountTermsOfServiceTypeTermsOfServiceToken

	return CreateAccountTermsOfService{
		TermsOfServiceToken: &termsOfServiceToken,
		Type:                typ,
	}
}

func CreateCreateAccountTermsOfServiceManualTermsOfService(manualTermsOfService ManualTermsOfService) CreateAccountTermsOfService {
	typ := CreateAccountTermsOfServiceTypeManualTermsOfService

	return CreateAccountTermsOfService{
		ManualTermsOfService: &manualTermsOfService,
		Type:                 typ,
	}
}

func (u *CreateAccountTermsOfService) UnmarshalJSON(data []byte) error {

	var termsOfServiceToken TermsOfServiceToken = TermsOfServiceToken{}
	if err := utils.UnmarshalJSON(data, &termsOfServiceToken, "", true, true); err == nil {
		u.TermsOfServiceToken = &termsOfServiceToken
		u.Type = CreateAccountTermsOfServiceTypeTermsOfServiceToken
		return nil
	}

	var manualTermsOfService ManualTermsOfService = ManualTermsOfService{}
	if err := utils.UnmarshalJSON(data, &manualTermsOfService, "", true, true); err == nil {
		u.ManualTermsOfService = &manualTermsOfService
		u.Type = CreateAccountTermsOfServiceTypeManualTermsOfService
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateAccountTermsOfService", string(data))
}

func (u CreateAccountTermsOfService) MarshalJSON() ([]byte, error) {
	if u.TermsOfServiceToken != nil {
		return utils.MarshalJSON(u.TermsOfServiceToken, "", true)
	}

	if u.ManualTermsOfService != nil {
		return utils.MarshalJSON(u.ManualTermsOfService, "", true)
	}

	return nil, errors.New("could not marshal union type CreateAccountTermsOfService: all fields are null")
}

type CreateAccount struct {
	AccountType CreateAccountType `json:"accountType"`
	Profile     CreateProfile     `json:"profile"`
	// Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
	Metadata       map[string]string            `json:"metadata,omitempty"`
	TermsOfService *CreateAccountTermsOfService `json:"termsOfService,omitempty"`
	// Optional alias from a foreign/external system which can be used to reference this resource.
	ForeignID *string `json:"foreignID,omitempty"`
	// User-provided information that can be displayed on credit card transactions for customers to use when
	// contacting a customer support team. This data is only allowed on a business account.
	CustomerSupport *CustomerSupport `json:"customerSupport,omitempty"`
	// User provided settings to manage an account.
	Settings     *Settings      `json:"settings,omitempty"`
	Capabilities []CapabilityID `json:"capabilities,omitempty"`
	// The operating mode for an account.
	Mode *Mode `json:"mode,omitempty"`
}

func (o *CreateAccount) GetAccountType() CreateAccountType {
	if o == nil {
		return CreateAccountType("")
	}
	return o.AccountType
}

func (o *CreateAccount) GetProfile() CreateProfile {
	if o == nil {
		return CreateProfile{}
	}
	return o.Profile
}

func (o *CreateAccount) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateAccount) GetTermsOfService() *CreateAccountTermsOfService {
	if o == nil {
		return nil
	}
	return o.TermsOfService
}

func (o *CreateAccount) GetForeignID() *string {
	if o == nil {
		return nil
	}
	return o.ForeignID
}

func (o *CreateAccount) GetCustomerSupport() *CustomerSupport {
	if o == nil {
		return nil
	}
	return o.CustomerSupport
}

func (o *CreateAccount) GetSettings() *Settings {
	if o == nil {
		return nil
	}
	return o.Settings
}

func (o *CreateAccount) GetCapabilities() []CapabilityID {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *CreateAccount) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}
