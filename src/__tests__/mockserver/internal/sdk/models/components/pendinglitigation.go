// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PendingLitigation string

const (
	PendingLitigationBankruptcyOrInsolvency               PendingLitigation = "bankruptcy-or-insolvency"
	PendingLitigationConsumerProtectionOrClassAction      PendingLitigation = "consumer-protection-or-class-action"
	PendingLitigationDataBreachOrPrivacy                  PendingLitigation = "data-breach-or-privacy"
	PendingLitigationEmploymentOrWorkplaceDisputes        PendingLitigation = "employment-or-workplace-disputes"
	PendingLitigationFraudOrFinancialCrime                PendingLitigation = "fraud-or-financial-crime"
	PendingLitigationGovernmentEnforcementOrInvestigation PendingLitigation = "government-enforcement-or-investigation"
	PendingLitigationIntellectualProperty                 PendingLitigation = "intellectual-property"
	PendingLitigationNone                                 PendingLitigation = "none"
	PendingLitigationOther                                PendingLitigation = "other"
	PendingLitigationPersonalInjuryOrMedical              PendingLitigation = "personal-injury-or-medical"
)

func (e PendingLitigation) ToPointer() *PendingLitigation {
	return &e
}
func (e *PendingLitigation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bankruptcy-or-insolvency":
		fallthrough
	case "consumer-protection-or-class-action":
		fallthrough
	case "data-breach-or-privacy":
		fallthrough
	case "employment-or-workplace-disputes":
		fallthrough
	case "fraud-or-financial-crime":
		fallthrough
	case "government-enforcement-or-investigation":
		fallthrough
	case "intellectual-property":
		fallthrough
	case "none":
		fallthrough
	case "other":
		fallthrough
	case "personal-injury-or-medical":
		*e = PendingLitigation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingLitigation: %v", v)
	}
}
