// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// TokenTypeHint - The type of token being revoked.
type TokenTypeHint string

const (
	TokenTypeHintAccessToken  TokenTypeHint = "access_token"
	TokenTypeHintRefreshToken TokenTypeHint = "refresh_token"
)

func (e TokenTypeHint) ToPointer() *TokenTypeHint {
	return &e
}
func (e *TokenTypeHint) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		fallthrough
	case "refresh_token":
		*e = TokenTypeHint(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenTypeHint: %v", v)
	}
}

type RevokeTokenRequest struct {
	// The access or refresh token to revoke.
	Token string `json:"token" form:"name=token"`
	// The type of token being revoked.
	TokenTypeHint *TokenTypeHint `json:"token_type_hint,omitempty" form:"name=token_type_hint"`
	// Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
	ClientID *string `json:"client_id,omitempty" form:"name=client_id"`
	// Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
	ClientSecret *string `json:"client_secret,omitempty" form:"name=client_secret"`
}

func (o *RevokeTokenRequest) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *RevokeTokenRequest) GetTokenTypeHint() *TokenTypeHint {
	if o == nil {
		return nil
	}
	return o.TokenTypeHint
}

func (o *RevokeTokenRequest) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *RevokeTokenRequest) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}
