// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// WalletTransaction - A transaction that funds or deducts from the wallet.
type WalletTransaction struct {
	WalletID        string                      `json:"walletID"`
	TransactionID   string                      `json:"transactionID"`
	TransactionType WalletTransactionType       `json:"transactionType"`
	SourceType      WalletTransactionSourceType `json:"sourceType"`
	// The ID of the Moov object to which this transaction is related.
	SourceID string                  `json:"sourceID"`
	Status   WalletTransactionStatus `json:"status"`
	// Detailed description of the transaction.
	Memo        string     `json:"memo"`
	CreatedOn   time.Time  `json:"createdOn"`
	CompletedOn *time.Time `json:"completedOn,omitempty"`
	// A 3-letter ISO 4217 currency code.
	Currency string `json:"currency"`
	// The total transaction amount. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
	GrossAmount int64 `json:"grossAmount"`
	// The total transaction amount. Same as `grossAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
	GrossAmountDecimal string `json:"grossAmountDecimal"`
	// Total fees paid for the transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
	Fee int64 `json:"fee"`
	// The IDs of the fees paid for the transaction.
	FeeIDs []string `json:"feeIDs,omitempty"`
	// Total fees paid for the transaction. Same as `fee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
	FeeDecimal string `json:"feeDecimal"`
	// Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
	NetAmount int64 `json:"netAmount"`
	// Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. Same as `netAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
	NetAmountDecimal string `json:"netAmountDecimal"`
	// The wallet's total available balance after recording a completed transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
	AvailableBalance *int64 `json:"availableBalance,omitempty"`
	// The wallet's total available balance after recording a completed transaction. Same as `availableBalance`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
	AvailableBalanceDecimal *string `json:"availableBalanceDecimal,omitempty"`
	SweepID                 *string `json:"sweepID,omitempty"`
}

func (w WalletTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WalletTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WalletTransaction) GetWalletID() string {
	if o == nil {
		return ""
	}
	return o.WalletID
}

func (o *WalletTransaction) GetTransactionID() string {
	if o == nil {
		return ""
	}
	return o.TransactionID
}

func (o *WalletTransaction) GetTransactionType() WalletTransactionType {
	if o == nil {
		return WalletTransactionType("")
	}
	return o.TransactionType
}

func (o *WalletTransaction) GetSourceType() WalletTransactionSourceType {
	if o == nil {
		return WalletTransactionSourceType("")
	}
	return o.SourceType
}

func (o *WalletTransaction) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}

func (o *WalletTransaction) GetStatus() WalletTransactionStatus {
	if o == nil {
		return WalletTransactionStatus("")
	}
	return o.Status
}

func (o *WalletTransaction) GetMemo() string {
	if o == nil {
		return ""
	}
	return o.Memo
}

func (o *WalletTransaction) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *WalletTransaction) GetCompletedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedOn
}

func (o *WalletTransaction) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *WalletTransaction) GetGrossAmount() int64 {
	if o == nil {
		return 0
	}
	return o.GrossAmount
}

func (o *WalletTransaction) GetGrossAmountDecimal() string {
	if o == nil {
		return ""
	}
	return o.GrossAmountDecimal
}

func (o *WalletTransaction) GetFee() int64 {
	if o == nil {
		return 0
	}
	return o.Fee
}

func (o *WalletTransaction) GetFeeIDs() []string {
	if o == nil {
		return nil
	}
	return o.FeeIDs
}

func (o *WalletTransaction) GetFeeDecimal() string {
	if o == nil {
		return ""
	}
	return o.FeeDecimal
}

func (o *WalletTransaction) GetNetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.NetAmount
}

func (o *WalletTransaction) GetNetAmountDecimal() string {
	if o == nil {
		return ""
	}
	return o.NetAmountDecimal
}

func (o *WalletTransaction) GetAvailableBalance() *int64 {
	if o == nil {
		return nil
	}
	return o.AvailableBalance
}

func (o *WalletTransaction) GetAvailableBalanceDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AvailableBalanceDecimal
}

func (o *WalletTransaction) GetSweepID() *string {
	if o == nil {
		return nil
	}
	return o.SweepID
}
