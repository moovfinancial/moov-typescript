// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Card - Describes a card on a Moov account.
type Card struct {
	// ID of the card.
	CardID string `json:"cardID"`
	// Uniquely identifies a linked payment card or token.
	// For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
	// This field can be used to identify specific payment methods across multiple accounts on your platform.
	Fingerprint string `json:"fingerprint"`
	// The card brand.
	Brand CardBrand `json:"brand"`
	// The type of the card.
	CardType CardType `json:"cardType"`
	// The category or level of the card defined by the issuer.
	// Examples include, but not limited to, "REWARDS", "TRADITIONAL REWARDS", "CLASSIC", and "CORPORATE PURCHASING".
	CardCategory *string `json:"cardCategory,omitempty"`
	// Last four digits of the card number
	LastFourCardNumber string `json:"lastFourCardNumber"`
	// The first six to eight digits of the card number, which identifies the financial institution that issued the card.
	Bin string `json:"bin"`
	// The expiration date of the card or token.
	Expiration CardExpiration `json:"expiration"`
	// The name of the cardholder as it appears on the card.
	HolderName     *string     `json:"holderName,omitempty"`
	BillingAddress CardAddress `json:"billingAddress"`
	// The results of submitting cardholder data to a card network for verification.
	CardVerification CardVerification `json:"cardVerification"`
	// Financial institution that issued the card.
	Issuer *string `json:"issuer,omitempty"`
	// Country where the card was issued.
	IssuerCountry *string `json:"issuerCountry,omitempty"`
	// URL of the issuer.
	IssuerURL *string `json:"issuerURL,omitempty"`
	// Phone number of the issuer.
	IssuerPhone *string `json:"issuerPhone,omitempty"`
	// If true, the card is for commercial use, or associated with a business.
	// If false, the card is associated with a general consumer.
	Commercial *bool `json:"commercial,omitempty"`
	// If true, the card issuing bank is regulated, and the scheme fees for debit transactions will be limited based on the Durbin Amendment.
	// If false, the card issuing bank is not regulated, and the scheme fees will not be limited.
	Regulated *bool `json:"regulated,omitempty"`
	// Indicates cardholder has authorized card to be stored for future payments.
	CardOnFile        *bool   `json:"cardOnFile,omitempty"`
	MerchantAccountID *string `json:"merchantAccountID,omitempty"`
	// The results of the most recent card update request.
	CardAccountUpdater *CardAccountUpdater `json:"cardAccountUpdater,omitempty"`
	// Indicates which level of domestic push-to-card transfer is supported by the card, if any.
	DomesticPushToCard *DomesticPushToCard `json:"domesticPushToCard,omitempty"`
	// Indicates if the card supports domestic pull-from-card transfer.
	DomesticPullFromCard *DomesticPullFromCard `json:"domesticPullFromCard,omitempty"`
	//   Includes any payment methods created as a result of linking a card with the `x-wait-for` header set to `payment-method`.
	//
	//   Only returned by the link card endpoint; not included when getting or listing cards.
	PaymentMethods []BasicPaymentMethod `json:"paymentMethods,omitempty"`
}

func (o *Card) GetCardID() string {
	if o == nil {
		return ""
	}
	return o.CardID
}

func (o *Card) GetFingerprint() string {
	if o == nil {
		return ""
	}
	return o.Fingerprint
}

func (o *Card) GetBrand() CardBrand {
	if o == nil {
		return CardBrand("")
	}
	return o.Brand
}

func (o *Card) GetCardType() CardType {
	if o == nil {
		return CardType("")
	}
	return o.CardType
}

func (o *Card) GetCardCategory() *string {
	if o == nil {
		return nil
	}
	return o.CardCategory
}

func (o *Card) GetLastFourCardNumber() string {
	if o == nil {
		return ""
	}
	return o.LastFourCardNumber
}

func (o *Card) GetBin() string {
	if o == nil {
		return ""
	}
	return o.Bin
}

func (o *Card) GetExpiration() CardExpiration {
	if o == nil {
		return CardExpiration{}
	}
	return o.Expiration
}

func (o *Card) GetHolderName() *string {
	if o == nil {
		return nil
	}
	return o.HolderName
}

func (o *Card) GetBillingAddress() CardAddress {
	if o == nil {
		return CardAddress{}
	}
	return o.BillingAddress
}

func (o *Card) GetCardVerification() CardVerification {
	if o == nil {
		return CardVerification{}
	}
	return o.CardVerification
}

func (o *Card) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *Card) GetIssuerCountry() *string {
	if o == nil {
		return nil
	}
	return o.IssuerCountry
}

func (o *Card) GetIssuerURL() *string {
	if o == nil {
		return nil
	}
	return o.IssuerURL
}

func (o *Card) GetIssuerPhone() *string {
	if o == nil {
		return nil
	}
	return o.IssuerPhone
}

func (o *Card) GetCommercial() *bool {
	if o == nil {
		return nil
	}
	return o.Commercial
}

func (o *Card) GetRegulated() *bool {
	if o == nil {
		return nil
	}
	return o.Regulated
}

func (o *Card) GetCardOnFile() *bool {
	if o == nil {
		return nil
	}
	return o.CardOnFile
}

func (o *Card) GetMerchantAccountID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantAccountID
}

func (o *Card) GetCardAccountUpdater() *CardAccountUpdater {
	if o == nil {
		return nil
	}
	return o.CardAccountUpdater
}

func (o *Card) GetDomesticPushToCard() *DomesticPushToCard {
	if o == nil {
		return nil
	}
	return o.DomesticPushToCard
}

func (o *Card) GetDomesticPullFromCard() *DomesticPullFromCard {
	if o == nil {
		return nil
	}
	return o.DomesticPullFromCard
}

func (o *Card) GetPaymentMethods() []BasicPaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethods
}
