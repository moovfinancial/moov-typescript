// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type UpdateIssuedCard struct {
	// The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.
	//
	// - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
	// - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
	// - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
	// - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
	State *IssuedCardState `json:"state,omitempty"`
	Memo  *string          `json:"memo,omitempty"`
	// Fields for identifying an authorized individual.
	AuthorizedUser *CreateAuthorizedUserUpdate `json:"authorizedUser,omitempty"`
}

func (o *UpdateIssuedCard) GetState() *IssuedCardState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *UpdateIssuedCard) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *UpdateIssuedCard) GetAuthorizedUser() *CreateAuthorizedUserUpdate {
	if o == nil {
		return nil
	}
	return o.AuthorizedUser
}
