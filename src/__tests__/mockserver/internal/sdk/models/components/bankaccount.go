// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// BankAccount - Describes a bank account linked to a Moov account.
type BankAccount struct {
	BankAccountID string `json:"bankAccountID"`
	// Once the bank account is linked, we don't reveal the full bank account number.
	//
	// The fingerprint acts as a way to identify whether two linked bank accounts are the same.
	Fingerprint string            `json:"fingerprint"`
	Status      BankAccountStatus `json:"status"`
	HolderName  string            `json:"holderName"`
	// The type of holder on a funding source.
	HolderType BankAccountHolderType `json:"holderType"`
	BankName   string                `json:"bankName"`
	// The bank account type.
	BankAccountType       BankAccountType `json:"bankAccountType"`
	RoutingNumber         string          `json:"routingNumber"`
	LastFourAccountNumber string          `json:"lastFourAccountNumber"`
	UpdatedOn             time.Time       `json:"updatedOn"`
	// The reason the bank account status changed to the current value.
	StatusReason *BankAccountStatusReason `json:"statusReason,omitempty"`
	// Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
	ExceptionDetails *BankAccountException `json:"exceptionDetails,omitempty"`
	// Includes any payment methods generated for a newly created bank account, removing the need to
	// call the List Payment Methods endpoint following a successful Create BankAccount request.
	//
	// **NOTE: This field is only populated for Create BankAccount requests made with the `X-Wait-For` header.**
	PaymentMethods []BasicPaymentMethod `json:"paymentMethods,omitempty"`
}

func (b BankAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankAccount) GetBankAccountID() string {
	if o == nil {
		return ""
	}
	return o.BankAccountID
}

func (o *BankAccount) GetFingerprint() string {
	if o == nil {
		return ""
	}
	return o.Fingerprint
}

func (o *BankAccount) GetStatus() BankAccountStatus {
	if o == nil {
		return BankAccountStatus("")
	}
	return o.Status
}

func (o *BankAccount) GetHolderName() string {
	if o == nil {
		return ""
	}
	return o.HolderName
}

func (o *BankAccount) GetHolderType() BankAccountHolderType {
	if o == nil {
		return BankAccountHolderType("")
	}
	return o.HolderType
}

func (o *BankAccount) GetBankName() string {
	if o == nil {
		return ""
	}
	return o.BankName
}

func (o *BankAccount) GetBankAccountType() BankAccountType {
	if o == nil {
		return BankAccountType("")
	}
	return o.BankAccountType
}

func (o *BankAccount) GetRoutingNumber() string {
	if o == nil {
		return ""
	}
	return o.RoutingNumber
}

func (o *BankAccount) GetLastFourAccountNumber() string {
	if o == nil {
		return ""
	}
	return o.LastFourAccountNumber
}

func (o *BankAccount) GetUpdatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedOn
}

func (o *BankAccount) GetStatusReason() *BankAccountStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *BankAccount) GetExceptionDetails() *BankAccountException {
	if o == nil {
		return nil
	}
	return o.ExceptionDetails
}

func (o *BankAccount) GetPaymentMethods() []BasicPaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethods
}
