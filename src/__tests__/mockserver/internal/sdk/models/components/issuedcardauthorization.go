// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type IssuedCardAuthorization struct {
	AuthorizationID string `json:"authorizationID"`
	IssuedCardID    string `json:"issuedCardID"`
	FundingWalletID string `json:"fundingWalletID"`
	// The name of the network a card transaction is routed through.
	Network CardIssuingNetwork `json:"network"`
	// A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
	AuthorizedAmount string `json:"authorizedAmount"`
	// Status of a card issuing authorization.
	Status       IssuingAuthorizationStatus `json:"status"`
	MerchantData IssuingMerchantData        `json:"merchantData"`
	CreatedOn    time.Time                  `json:"createdOn"`
	// List of card transaction IDs associated with this authorization.
	CardTransactions []string `json:"cardTransactions,omitempty"`
}

func (i IssuedCardAuthorization) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssuedCardAuthorization) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssuedCardAuthorization) GetAuthorizationID() string {
	if o == nil {
		return ""
	}
	return o.AuthorizationID
}

func (o *IssuedCardAuthorization) GetIssuedCardID() string {
	if o == nil {
		return ""
	}
	return o.IssuedCardID
}

func (o *IssuedCardAuthorization) GetFundingWalletID() string {
	if o == nil {
		return ""
	}
	return o.FundingWalletID
}

func (o *IssuedCardAuthorization) GetNetwork() CardIssuingNetwork {
	if o == nil {
		return CardIssuingNetwork("")
	}
	return o.Network
}

func (o *IssuedCardAuthorization) GetAuthorizedAmount() string {
	if o == nil {
		return ""
	}
	return o.AuthorizedAmount
}

func (o *IssuedCardAuthorization) GetStatus() IssuingAuthorizationStatus {
	if o == nil {
		return IssuingAuthorizationStatus("")
	}
	return o.Status
}

func (o *IssuedCardAuthorization) GetMerchantData() IssuingMerchantData {
	if o == nil {
		return IssuingMerchantData{}
	}
	return o.MerchantData
}

func (o *IssuedCardAuthorization) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *IssuedCardAuthorization) GetCardTransactions() []string {
	if o == nil {
		return nil
	}
	return o.CardTransactions
}
