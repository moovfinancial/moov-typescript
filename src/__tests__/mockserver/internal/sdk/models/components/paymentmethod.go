// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PaymentMethodUnionType string

const (
	PaymentMethodUnionTypeMoovWallet         PaymentMethodUnionType = "moov-wallet"
	PaymentMethodUnionTypeAchDebitFund       PaymentMethodUnionType = "ach-debit-fund"
	PaymentMethodUnionTypeAchDebitCollect    PaymentMethodUnionType = "ach-debit-collect"
	PaymentMethodUnionTypeAchCreditStandard  PaymentMethodUnionType = "ach-credit-standard"
	PaymentMethodUnionTypeAchCreditSameDay   PaymentMethodUnionType = "ach-credit-same-day"
	PaymentMethodUnionTypeRtpCredit          PaymentMethodUnionType = "rtp-credit"
	PaymentMethodUnionTypeCardPayment        PaymentMethodUnionType = "card-payment"
	PaymentMethodUnionTypePushToCard         PaymentMethodUnionType = "push-to-card"
	PaymentMethodUnionTypePullFromCard       PaymentMethodUnionType = "pull-from-card"
	PaymentMethodUnionTypeApplePay           PaymentMethodUnionType = "apple-pay"
	PaymentMethodUnionTypeCardPresentPayment PaymentMethodUnionType = "card-present-payment"
)

// PaymentMethod - A method of moving money
type PaymentMethod struct {
	MoovWalletPaymentMethod         *MoovWalletPaymentMethod         `queryParam:"inline"`
	AchDebitFundPaymentMethod       *AchDebitFundPaymentMethod       `queryParam:"inline"`
	AchDebitCollectPaymentMethod    *AchDebitCollectPaymentMethod    `queryParam:"inline"`
	AchCreditStandardPaymentMethod  *AchCreditStandardPaymentMethod  `queryParam:"inline"`
	AchCreditSameDayPaymentMethod   *AchCreditSameDayPaymentMethod   `queryParam:"inline"`
	RtpCreditPaymentMethod          *RtpCreditPaymentMethod          `queryParam:"inline"`
	CardPaymentPaymentMethod        *CardPaymentPaymentMethod        `queryParam:"inline"`
	PushToCardPaymentMethod         *PushToCardPaymentMethod         `queryParam:"inline"`
	PullFromCardPaymentMethod       *PullFromCardPaymentMethod       `queryParam:"inline"`
	ApplePayPaymentMethod           *ApplePayPaymentMethod           `queryParam:"inline"`
	CardPresentPaymentPaymentMethod *CardPresentPaymentPaymentMethod `queryParam:"inline"`

	Type PaymentMethodUnionType
}

func CreatePaymentMethodMoovWallet(moovWallet MoovWalletPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeMoovWallet

	typStr := MoovWalletPaymentMethodPaymentMethodType(typ)
	moovWallet.PaymentMethodType = typStr

	return PaymentMethod{
		MoovWalletPaymentMethod: &moovWallet,
		Type:                    typ,
	}
}

func CreatePaymentMethodAchDebitFund(achDebitFund AchDebitFundPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeAchDebitFund

	typStr := AchDebitFundPaymentMethodPaymentMethodType(typ)
	achDebitFund.PaymentMethodType = typStr

	return PaymentMethod{
		AchDebitFundPaymentMethod: &achDebitFund,
		Type:                      typ,
	}
}

func CreatePaymentMethodAchDebitCollect(achDebitCollect AchDebitCollectPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeAchDebitCollect

	typStr := AchDebitCollectPaymentMethodPaymentMethodType(typ)
	achDebitCollect.PaymentMethodType = typStr

	return PaymentMethod{
		AchDebitCollectPaymentMethod: &achDebitCollect,
		Type:                         typ,
	}
}

func CreatePaymentMethodAchCreditStandard(achCreditStandard AchCreditStandardPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeAchCreditStandard

	typStr := AchCreditStandardPaymentMethodPaymentMethodType(typ)
	achCreditStandard.PaymentMethodType = typStr

	return PaymentMethod{
		AchCreditStandardPaymentMethod: &achCreditStandard,
		Type:                           typ,
	}
}

func CreatePaymentMethodAchCreditSameDay(achCreditSameDay AchCreditSameDayPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeAchCreditSameDay

	typStr := AchCreditSameDayPaymentMethodPaymentMethodType(typ)
	achCreditSameDay.PaymentMethodType = typStr

	return PaymentMethod{
		AchCreditSameDayPaymentMethod: &achCreditSameDay,
		Type:                          typ,
	}
}

func CreatePaymentMethodRtpCredit(rtpCredit RtpCreditPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeRtpCredit

	typStr := RtpCreditPaymentMethodPaymentMethodType(typ)
	rtpCredit.PaymentMethodType = typStr

	return PaymentMethod{
		RtpCreditPaymentMethod: &rtpCredit,
		Type:                   typ,
	}
}

func CreatePaymentMethodCardPayment(cardPayment CardPaymentPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeCardPayment

	typStr := CardPaymentPaymentMethodPaymentMethodType(typ)
	cardPayment.PaymentMethodType = typStr

	return PaymentMethod{
		CardPaymentPaymentMethod: &cardPayment,
		Type:                     typ,
	}
}

func CreatePaymentMethodPushToCard(pushToCard PushToCardPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypePushToCard

	typStr := PushToCardPaymentMethodPaymentMethodType(typ)
	pushToCard.PaymentMethodType = typStr

	return PaymentMethod{
		PushToCardPaymentMethod: &pushToCard,
		Type:                    typ,
	}
}

func CreatePaymentMethodPullFromCard(pullFromCard PullFromCardPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypePullFromCard

	typStr := PullFromCardPaymentMethodPaymentMethodType(typ)
	pullFromCard.PaymentMethodType = typStr

	return PaymentMethod{
		PullFromCardPaymentMethod: &pullFromCard,
		Type:                      typ,
	}
}

func CreatePaymentMethodApplePay(applePay ApplePayPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeApplePay

	typStr := ApplePayPaymentMethodPaymentMethodType(typ)
	applePay.PaymentMethodType = typStr

	return PaymentMethod{
		ApplePayPaymentMethod: &applePay,
		Type:                  typ,
	}
}

func CreatePaymentMethodCardPresentPayment(cardPresentPayment CardPresentPaymentPaymentMethod) PaymentMethod {
	typ := PaymentMethodUnionTypeCardPresentPayment

	typStr := CardPresentPaymentPaymentMethodPaymentMethodType(typ)
	cardPresentPayment.PaymentMethodType = typStr

	return PaymentMethod{
		CardPresentPaymentPaymentMethod: &cardPresentPayment,
		Type:                            typ,
	}
}

func (u *PaymentMethod) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		PaymentMethodType string `json:"paymentMethodType"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.PaymentMethodType {
	case "moov-wallet":
		moovWalletPaymentMethod := new(MoovWalletPaymentMethod)
		if err := utils.UnmarshalJSON(data, &moovWalletPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == moov-wallet) type MoovWalletPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.MoovWalletPaymentMethod = moovWalletPaymentMethod
		u.Type = PaymentMethodUnionTypeMoovWallet
		return nil
	case "ach-debit-fund":
		achDebitFundPaymentMethod := new(AchDebitFundPaymentMethod)
		if err := utils.UnmarshalJSON(data, &achDebitFundPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == ach-debit-fund) type AchDebitFundPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.AchDebitFundPaymentMethod = achDebitFundPaymentMethod
		u.Type = PaymentMethodUnionTypeAchDebitFund
		return nil
	case "ach-debit-collect":
		achDebitCollectPaymentMethod := new(AchDebitCollectPaymentMethod)
		if err := utils.UnmarshalJSON(data, &achDebitCollectPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == ach-debit-collect) type AchDebitCollectPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.AchDebitCollectPaymentMethod = achDebitCollectPaymentMethod
		u.Type = PaymentMethodUnionTypeAchDebitCollect
		return nil
	case "ach-credit-standard":
		achCreditStandardPaymentMethod := new(AchCreditStandardPaymentMethod)
		if err := utils.UnmarshalJSON(data, &achCreditStandardPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == ach-credit-standard) type AchCreditStandardPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.AchCreditStandardPaymentMethod = achCreditStandardPaymentMethod
		u.Type = PaymentMethodUnionTypeAchCreditStandard
		return nil
	case "ach-credit-same-day":
		achCreditSameDayPaymentMethod := new(AchCreditSameDayPaymentMethod)
		if err := utils.UnmarshalJSON(data, &achCreditSameDayPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == ach-credit-same-day) type AchCreditSameDayPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.AchCreditSameDayPaymentMethod = achCreditSameDayPaymentMethod
		u.Type = PaymentMethodUnionTypeAchCreditSameDay
		return nil
	case "rtp-credit":
		rtpCreditPaymentMethod := new(RtpCreditPaymentMethod)
		if err := utils.UnmarshalJSON(data, &rtpCreditPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == rtp-credit) type RtpCreditPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.RtpCreditPaymentMethod = rtpCreditPaymentMethod
		u.Type = PaymentMethodUnionTypeRtpCredit
		return nil
	case "card-payment":
		cardPaymentPaymentMethod := new(CardPaymentPaymentMethod)
		if err := utils.UnmarshalJSON(data, &cardPaymentPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == card-payment) type CardPaymentPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.CardPaymentPaymentMethod = cardPaymentPaymentMethod
		u.Type = PaymentMethodUnionTypeCardPayment
		return nil
	case "push-to-card":
		pushToCardPaymentMethod := new(PushToCardPaymentMethod)
		if err := utils.UnmarshalJSON(data, &pushToCardPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == push-to-card) type PushToCardPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.PushToCardPaymentMethod = pushToCardPaymentMethod
		u.Type = PaymentMethodUnionTypePushToCard
		return nil
	case "pull-from-card":
		pullFromCardPaymentMethod := new(PullFromCardPaymentMethod)
		if err := utils.UnmarshalJSON(data, &pullFromCardPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == pull-from-card) type PullFromCardPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.PullFromCardPaymentMethod = pullFromCardPaymentMethod
		u.Type = PaymentMethodUnionTypePullFromCard
		return nil
	case "apple-pay":
		applePayPaymentMethod := new(ApplePayPaymentMethod)
		if err := utils.UnmarshalJSON(data, &applePayPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == apple-pay) type ApplePayPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.ApplePayPaymentMethod = applePayPaymentMethod
		u.Type = PaymentMethodUnionTypeApplePay
		return nil
	case "card-present-payment":
		cardPresentPaymentPaymentMethod := new(CardPresentPaymentPaymentMethod)
		if err := utils.UnmarshalJSON(data, &cardPresentPaymentPaymentMethod, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (PaymentMethodType == card-present-payment) type CardPresentPaymentPaymentMethod within PaymentMethod: %w", string(data), err)
		}

		u.CardPresentPaymentPaymentMethod = cardPresentPaymentPaymentMethod
		u.Type = PaymentMethodUnionTypeCardPresentPayment
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PaymentMethod", string(data))
}

func (u PaymentMethod) MarshalJSON() ([]byte, error) {
	if u.MoovWalletPaymentMethod != nil {
		return utils.MarshalJSON(u.MoovWalletPaymentMethod, "", true)
	}

	if u.AchDebitFundPaymentMethod != nil {
		return utils.MarshalJSON(u.AchDebitFundPaymentMethod, "", true)
	}

	if u.AchDebitCollectPaymentMethod != nil {
		return utils.MarshalJSON(u.AchDebitCollectPaymentMethod, "", true)
	}

	if u.AchCreditStandardPaymentMethod != nil {
		return utils.MarshalJSON(u.AchCreditStandardPaymentMethod, "", true)
	}

	if u.AchCreditSameDayPaymentMethod != nil {
		return utils.MarshalJSON(u.AchCreditSameDayPaymentMethod, "", true)
	}

	if u.RtpCreditPaymentMethod != nil {
		return utils.MarshalJSON(u.RtpCreditPaymentMethod, "", true)
	}

	if u.CardPaymentPaymentMethod != nil {
		return utils.MarshalJSON(u.CardPaymentPaymentMethod, "", true)
	}

	if u.PushToCardPaymentMethod != nil {
		return utils.MarshalJSON(u.PushToCardPaymentMethod, "", true)
	}

	if u.PullFromCardPaymentMethod != nil {
		return utils.MarshalJSON(u.PullFromCardPaymentMethod, "", true)
	}

	if u.ApplePayPaymentMethod != nil {
		return utils.MarshalJSON(u.ApplePayPaymentMethod, "", true)
	}

	if u.CardPresentPaymentPaymentMethod != nil {
		return utils.MarshalJSON(u.CardPresentPaymentPaymentMethod, "", true)
	}

	return nil, errors.New("could not marshal union type PaymentMethod: all fields are null")
}
