// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// FullIssuedCard - The full details of an issued card, including PAN and CVV.
type FullIssuedCard struct {
	IssuedCardID string `json:"issuedCardID"`
	// The card brand.
	Brand              CardBrand `json:"brand"`
	LastFourCardNumber string    `json:"lastFourCardNumber"`
	// The expiration date of the card or token.
	Expiration CardExpiration `json:"expiration"`
	// Fields for identifying an authorized individual.
	AuthorizedUser AuthorizedUser `json:"authorizedUser"`
	// Optional descriptor for the card.
	Memo *string `json:"memo,omitempty"`
	// Unique identifier for the wallet funding the card.
	FundingWalletID string `json:"fundingWalletID"`
	// The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.
	//
	// - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
	// - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
	// - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
	// - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
	State IssuedCardState `json:"state"`
	// Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
	FormFactor IssuedCardFormFactor `json:"formFactor"`
	Controls   *IssuingControls     `json:"controls,omitempty"`
	CreatedOn  time.Time            `json:"createdOn"`
	// The issued card's Primary Account Number (PAN)
	Pan string `json:"pan"`
	// The issued card's 3- or 4-digit Card Verification Value (CVV).
	Cvv string `json:"cvv"`
}

func (f FullIssuedCard) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FullIssuedCard) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FullIssuedCard) GetIssuedCardID() string {
	if o == nil {
		return ""
	}
	return o.IssuedCardID
}

func (o *FullIssuedCard) GetBrand() CardBrand {
	if o == nil {
		return CardBrand("")
	}
	return o.Brand
}

func (o *FullIssuedCard) GetLastFourCardNumber() string {
	if o == nil {
		return ""
	}
	return o.LastFourCardNumber
}

func (o *FullIssuedCard) GetExpiration() CardExpiration {
	if o == nil {
		return CardExpiration{}
	}
	return o.Expiration
}

func (o *FullIssuedCard) GetAuthorizedUser() AuthorizedUser {
	if o == nil {
		return AuthorizedUser{}
	}
	return o.AuthorizedUser
}

func (o *FullIssuedCard) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *FullIssuedCard) GetFundingWalletID() string {
	if o == nil {
		return ""
	}
	return o.FundingWalletID
}

func (o *FullIssuedCard) GetState() IssuedCardState {
	if o == nil {
		return IssuedCardState("")
	}
	return o.State
}

func (o *FullIssuedCard) GetFormFactor() IssuedCardFormFactor {
	if o == nil {
		return IssuedCardFormFactor("")
	}
	return o.FormFactor
}

func (o *FullIssuedCard) GetControls() *IssuingControls {
	if o == nil {
		return nil
	}
	return o.Controls
}

func (o *FullIssuedCard) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *FullIssuedCard) GetPan() string {
	if o == nil {
		return ""
	}
	return o.Pan
}

func (o *FullIssuedCard) GetCvv() string {
	if o == nil {
		return ""
	}
	return o.Cvv
}
