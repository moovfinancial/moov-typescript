// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CardPaymentPaymentMethodPaymentMethodType string

const (
	CardPaymentPaymentMethodPaymentMethodTypeCardPayment CardPaymentPaymentMethodPaymentMethodType = "card-payment"
)

func (e CardPaymentPaymentMethodPaymentMethodType) ToPointer() *CardPaymentPaymentMethodPaymentMethodType {
	return &e
}
func (e *CardPaymentPaymentMethodPaymentMethodType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card-payment":
		*e = CardPaymentPaymentMethodPaymentMethodType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CardPaymentPaymentMethodPaymentMethodType: %v", v)
	}
}

type CardPaymentPaymentMethod struct {
	// ID of the payment method.
	PaymentMethodID   string                                    `json:"paymentMethodID"`
	PaymentMethodType CardPaymentPaymentMethodPaymentMethodType `json:"paymentMethodType"`
	// A card as contained within a payment method.
	Card PaymentMethodsCard `json:"card"`
}

func (o *CardPaymentPaymentMethod) GetPaymentMethodID() string {
	if o == nil {
		return ""
	}
	return o.PaymentMethodID
}

func (o *CardPaymentPaymentMethod) GetPaymentMethodType() CardPaymentPaymentMethodPaymentMethodType {
	if o == nil {
		return CardPaymentPaymentMethodPaymentMethodType("")
	}
	return o.PaymentMethodType
}

func (o *CardPaymentPaymentMethod) GetCard() PaymentMethodsCard {
	if o == nil {
		return PaymentMethodsCard{}
	}
	return o.Card
}
