// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// Transfer - Details of a Transfer.
type Transfer struct {
	TransferID  string              `json:"transferID"`
	CreatedOn   time.Time           `json:"createdOn"`
	Source      TransferSource      `json:"source"`
	Destination TransferDestination `json:"destination"`
	CompletedOn *time.Time          `json:"completedOn,omitempty"`
	// Status of a transfer.
	Status TransferStatus `json:"status"`
	// Reason for a transfer's failure.
	FailureReason *TransferFailureReason `json:"failureReason,omitempty"`
	Amount        Amount                 `json:"amount"`
	// An optional description of the transfer that is used on receipts and for your own internal use.
	Description *string `json:"description,omitempty"`
	// Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Total or markup fee.
	FacilitatorFee *FacilitatorFee `json:"facilitatorFee,omitempty"`
	// Fees charged to your platform account for transfers.
	MoovFee *int64 `json:"moovFee,omitempty"`
	// Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.
	MoovFeeDecimal *string `json:"moovFeeDecimal,omitempty"`
	// Processing and pass-through costs that add up to the moovFee.
	MoovFeeDetails *MoovFeeDetails `json:"moovFeeDetails,omitempty"`
	// Fees charged to accounts involved in the transfer.
	MoovFees        []MoovFee              `json:"moovFees,omitempty"`
	GroupID         *string                `json:"groupID,omitempty"`
	Cancellations   []Cancellation         `json:"cancellations,omitempty"`
	RefundedAmount  *Amount                `json:"refundedAmount,omitempty"`
	Refunds         []CardAcquiringRefund  `json:"refunds,omitempty"`
	DisputedAmount  *Amount                `json:"disputedAmount,omitempty"`
	Disputes        []CardAcquiringDispute `json:"disputes,omitempty"`
	SweepID         *string                `json:"sweepID,omitempty"`
	ScheduleID      *string                `json:"scheduleID,omitempty"`
	OccurrenceID    *string                `json:"occurrenceID,omitempty"`
	PaymentLinkCode *string                `json:"paymentLinkCode,omitempty"`
	// Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and represents the total amount charged.
	SalesTaxAmount *Amount `json:"salesTaxAmount,omitempty"`
	// Optional alias from a foreign/external system which can be used to reference this resource.
	ForeignID *string `json:"foreignID,omitempty"`
}

func (t Transfer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Transfer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Transfer) GetTransferID() string {
	if o == nil {
		return ""
	}
	return o.TransferID
}

func (o *Transfer) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *Transfer) GetSource() TransferSource {
	if o == nil {
		return TransferSource{}
	}
	return o.Source
}

func (o *Transfer) GetDestination() TransferDestination {
	if o == nil {
		return TransferDestination{}
	}
	return o.Destination
}

func (o *Transfer) GetCompletedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedOn
}

func (o *Transfer) GetStatus() TransferStatus {
	if o == nil {
		return TransferStatus("")
	}
	return o.Status
}

func (o *Transfer) GetFailureReason() *TransferFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *Transfer) GetAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.Amount
}

func (o *Transfer) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Transfer) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *Transfer) GetFacilitatorFee() *FacilitatorFee {
	if o == nil {
		return nil
	}
	return o.FacilitatorFee
}

func (o *Transfer) GetMoovFee() *int64 {
	if o == nil {
		return nil
	}
	return o.MoovFee
}

func (o *Transfer) GetMoovFeeDecimal() *string {
	if o == nil {
		return nil
	}
	return o.MoovFeeDecimal
}

func (o *Transfer) GetMoovFeeDetails() *MoovFeeDetails {
	if o == nil {
		return nil
	}
	return o.MoovFeeDetails
}

func (o *Transfer) GetMoovFees() []MoovFee {
	if o == nil {
		return nil
	}
	return o.MoovFees
}

func (o *Transfer) GetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *Transfer) GetCancellations() []Cancellation {
	if o == nil {
		return nil
	}
	return o.Cancellations
}

func (o *Transfer) GetRefundedAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.RefundedAmount
}

func (o *Transfer) GetRefunds() []CardAcquiringRefund {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *Transfer) GetDisputedAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.DisputedAmount
}

func (o *Transfer) GetDisputes() []CardAcquiringDispute {
	if o == nil {
		return nil
	}
	return o.Disputes
}

func (o *Transfer) GetSweepID() *string {
	if o == nil {
		return nil
	}
	return o.SweepID
}

func (o *Transfer) GetScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.ScheduleID
}

func (o *Transfer) GetOccurrenceID() *string {
	if o == nil {
		return nil
	}
	return o.OccurrenceID
}

func (o *Transfer) GetPaymentLinkCode() *string {
	if o == nil {
		return nil
	}
	return o.PaymentLinkCode
}

func (o *Transfer) GetSalesTaxAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.SalesTaxAmount
}

func (o *Transfer) GetForeignID() *string {
	if o == nil {
		return nil
	}
	return o.ForeignID
}
