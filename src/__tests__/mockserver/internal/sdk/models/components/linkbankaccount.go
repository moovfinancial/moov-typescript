// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type LinkBankAccountType string

const (
	LinkBankAccountTypeBankAccountPayload LinkBankAccountType = "BankAccountPayload"
	LinkBankAccountTypePlaidPayload       LinkBankAccountType = "PlaidPayload"
	LinkBankAccountTypePlaidLinkPayload   LinkBankAccountType = "PlaidLinkPayload"
	LinkBankAccountTypeMxPayload          LinkBankAccountType = "MxPayload"
)

type LinkBankAccount struct {
	BankAccountPayload *BankAccountPayload `queryParam:"inline"`
	PlaidPayload       *PlaidPayload       `queryParam:"inline"`
	PlaidLinkPayload   *PlaidLinkPayload   `queryParam:"inline"`
	MxPayload          *MxPayload          `queryParam:"inline"`

	Type LinkBankAccountType
}

func CreateLinkBankAccountBankAccountPayload(bankAccountPayload BankAccountPayload) LinkBankAccount {
	typ := LinkBankAccountTypeBankAccountPayload

	return LinkBankAccount{
		BankAccountPayload: &bankAccountPayload,
		Type:               typ,
	}
}

func CreateLinkBankAccountPlaidPayload(plaidPayload PlaidPayload) LinkBankAccount {
	typ := LinkBankAccountTypePlaidPayload

	return LinkBankAccount{
		PlaidPayload: &plaidPayload,
		Type:         typ,
	}
}

func CreateLinkBankAccountPlaidLinkPayload(plaidLinkPayload PlaidLinkPayload) LinkBankAccount {
	typ := LinkBankAccountTypePlaidLinkPayload

	return LinkBankAccount{
		PlaidLinkPayload: &plaidLinkPayload,
		Type:             typ,
	}
}

func CreateLinkBankAccountMxPayload(mxPayload MxPayload) LinkBankAccount {
	typ := LinkBankAccountTypeMxPayload

	return LinkBankAccount{
		MxPayload: &mxPayload,
		Type:      typ,
	}
}

func (u *LinkBankAccount) UnmarshalJSON(data []byte) error {

	var bankAccountPayload BankAccountPayload = BankAccountPayload{}
	if err := utils.UnmarshalJSON(data, &bankAccountPayload, "", true, true); err == nil {
		u.BankAccountPayload = &bankAccountPayload
		u.Type = LinkBankAccountTypeBankAccountPayload
		return nil
	}

	var plaidPayload PlaidPayload = PlaidPayload{}
	if err := utils.UnmarshalJSON(data, &plaidPayload, "", true, true); err == nil {
		u.PlaidPayload = &plaidPayload
		u.Type = LinkBankAccountTypePlaidPayload
		return nil
	}

	var plaidLinkPayload PlaidLinkPayload = PlaidLinkPayload{}
	if err := utils.UnmarshalJSON(data, &plaidLinkPayload, "", true, true); err == nil {
		u.PlaidLinkPayload = &plaidLinkPayload
		u.Type = LinkBankAccountTypePlaidLinkPayload
		return nil
	}

	var mxPayload MxPayload = MxPayload{}
	if err := utils.UnmarshalJSON(data, &mxPayload, "", true, true); err == nil {
		u.MxPayload = &mxPayload
		u.Type = LinkBankAccountTypeMxPayload
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for LinkBankAccount", string(data))
}

func (u LinkBankAccount) MarshalJSON() ([]byte, error) {
	if u.BankAccountPayload != nil {
		return utils.MarshalJSON(u.BankAccountPayload, "", true)
	}

	if u.PlaidPayload != nil {
		return utils.MarshalJSON(u.PlaidPayload, "", true)
	}

	if u.PlaidLinkPayload != nil {
		return utils.MarshalJSON(u.PlaidLinkPayload, "", true)
	}

	if u.MxPayload != nil {
		return utils.MarshalJSON(u.MxPayload, "", true)
	}

	return nil, errors.New("could not marshal union type LinkBankAccount: all fields are null")
}
