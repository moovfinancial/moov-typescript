// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PatchAccountTermsOfServiceType string

const (
	PatchAccountTermsOfServiceTypeTermsOfServiceTokenUpdate  PatchAccountTermsOfServiceType = "TermsOfServiceTokenUpdate"
	PatchAccountTermsOfServiceTypeManualTermsOfServiceUpdate PatchAccountTermsOfServiceType = "ManualTermsOfServiceUpdate"
)

type PatchAccountTermsOfService struct {
	TermsOfServiceTokenUpdate  *TermsOfServiceTokenUpdate  `queryParam:"inline"`
	ManualTermsOfServiceUpdate *ManualTermsOfServiceUpdate `queryParam:"inline"`

	Type PatchAccountTermsOfServiceType
}

func CreatePatchAccountTermsOfServiceTermsOfServiceTokenUpdate(termsOfServiceTokenUpdate TermsOfServiceTokenUpdate) PatchAccountTermsOfService {
	typ := PatchAccountTermsOfServiceTypeTermsOfServiceTokenUpdate

	return PatchAccountTermsOfService{
		TermsOfServiceTokenUpdate: &termsOfServiceTokenUpdate,
		Type:                      typ,
	}
}

func CreatePatchAccountTermsOfServiceManualTermsOfServiceUpdate(manualTermsOfServiceUpdate ManualTermsOfServiceUpdate) PatchAccountTermsOfService {
	typ := PatchAccountTermsOfServiceTypeManualTermsOfServiceUpdate

	return PatchAccountTermsOfService{
		ManualTermsOfServiceUpdate: &manualTermsOfServiceUpdate,
		Type:                       typ,
	}
}

func (u *PatchAccountTermsOfService) UnmarshalJSON(data []byte) error {

	var termsOfServiceTokenUpdate TermsOfServiceTokenUpdate = TermsOfServiceTokenUpdate{}
	if err := utils.UnmarshalJSON(data, &termsOfServiceTokenUpdate, "", true, true); err == nil {
		u.TermsOfServiceTokenUpdate = &termsOfServiceTokenUpdate
		u.Type = PatchAccountTermsOfServiceTypeTermsOfServiceTokenUpdate
		return nil
	}

	var manualTermsOfServiceUpdate ManualTermsOfServiceUpdate = ManualTermsOfServiceUpdate{}
	if err := utils.UnmarshalJSON(data, &manualTermsOfServiceUpdate, "", true, true); err == nil {
		u.ManualTermsOfServiceUpdate = &manualTermsOfServiceUpdate
		u.Type = PatchAccountTermsOfServiceTypeManualTermsOfServiceUpdate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PatchAccountTermsOfService", string(data))
}

func (u PatchAccountTermsOfService) MarshalJSON() ([]byte, error) {
	if u.TermsOfServiceTokenUpdate != nil {
		return utils.MarshalJSON(u.TermsOfServiceTokenUpdate, "", true)
	}

	if u.ManualTermsOfServiceUpdate != nil {
		return utils.MarshalJSON(u.ManualTermsOfServiceUpdate, "", true)
	}

	return nil, errors.New("could not marshal union type PatchAccountTermsOfService: all fields are null")
}

// PatchAccountCustomerSupport - User-provided information that can be displayed on credit card transactions for customers to use when
// contacting a customer support team. This data is only allowed on a business account.
type PatchAccountCustomerSupport struct {
	Phone   *PhoneNumber   `json:"phone,omitempty"`
	Email   *string        `json:"email,omitempty"`
	Address *AddressUpdate `json:"address,omitempty"`
	Website *string        `json:"website,omitempty"`
}

func (o *PatchAccountCustomerSupport) GetPhone() *PhoneNumber {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *PatchAccountCustomerSupport) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *PatchAccountCustomerSupport) GetAddress() *AddressUpdate {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *PatchAccountCustomerSupport) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

// PatchAccount - Describes the fields available when patching a Moov account.
type PatchAccount struct {
	// Describes the fields available when patching a profile.
	// Each object can be patched independent of patching the other fields.
	Profile         *PatchProfile                `json:"profile,omitempty"`
	Metadata        map[string]string            `json:"metadata,omitempty"`
	TermsOfService  *PatchAccountTermsOfService  `json:"termsOfService,omitempty"`
	ForeignID       *string                      `json:"foreignID,omitempty"`
	CustomerSupport *PatchAccountCustomerSupport `json:"customerSupport,omitempty"`
	Settings        *CreateAccountSettings       `json:"settings,omitempty"`
}

func (o *PatchAccount) GetProfile() *PatchProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *PatchAccount) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *PatchAccount) GetTermsOfService() *PatchAccountTermsOfService {
	if o == nil {
		return nil
	}
	return o.TermsOfService
}

func (o *PatchAccount) GetForeignID() *string {
	if o == nil {
		return nil
	}
	return o.ForeignID
}

func (o *PatchAccount) GetCustomerSupport() *PatchAccountCustomerSupport {
	if o == nil {
		return nil
	}
	return o.CustomerSupport
}

func (o *PatchAccount) GetSettings() *CreateAccountSettings {
	if o == nil {
		return nil
	}
	return o.Settings
}
