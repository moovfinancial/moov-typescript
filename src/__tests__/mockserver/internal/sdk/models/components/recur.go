// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// Recur - Defines configuration for recurring transfers.
type Recur struct {
	//   RRule as defined by RFC 5545 (https://www.rfc-editor.org/rfc/rfc5545#section-3.3.10).
	//   Generators available online at the following sites - https://freetools.textmagic.com/rrule-generator, https://jkbrzt.github.io/rrule/
	RecurrenceRule string `json:"recurrenceRule"`
	// Defines the attributes of a transfer.
	RunTransfer RunTransfer `json:"runTransfer"`
	// True if the RRule set runs indefinitely.
	Indefinite *bool      `json:"indefinite,omitempty"`
	Start      *time.Time `json:"start,omitempty"`
}

func (r Recur) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Recur) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Recur) GetRecurrenceRule() string {
	if o == nil {
		return ""
	}
	return o.RecurrenceRule
}

func (o *Recur) GetRunTransfer() RunTransfer {
	if o == nil {
		return RunTransfer{}
	}
	return o.RunTransfer
}

func (o *Recur) GetIndefinite() *bool {
	if o == nil {
		return nil
	}
	return o.Indefinite
}

func (o *Recur) GetStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.Start
}
