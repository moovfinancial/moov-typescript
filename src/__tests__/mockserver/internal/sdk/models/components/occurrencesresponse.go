// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// OccurrencesResponseError - Contains details on why the occurrence errored.
type OccurrencesResponseError struct {
	Message *string `json:"message,omitempty"`
}

func (o *OccurrencesResponseError) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type OccurrencesResponse struct {
	ScheduleID   *string `json:"scheduleID,omitempty"`
	OccurrenceID *string `json:"occurrenceID,omitempty"`
	// Sandbox or production account mode of this schedule.
	Mode *Mode `json:"mode,omitempty"`
	// True if this was generated by a RRule.
	Generated *bool `json:"generated,omitempty"`
	// True if the RRule set runs indefinitely.
	Indefinite *bool      `json:"indefinite,omitempty"`
	CanceledOn *time.Time `json:"canceledOn,omitempty"`
	RunOn      time.Time  `json:"runOn"`
	// Defines the attributes of a transfer.
	RunTransfer   RunTransfer `json:"runTransfer"`
	RanOn         *time.Time  `json:"ranOn,omitempty"`
	RanTransferID *string     `json:"ranTransferID,omitempty"`
	// Status of the completed occurrence.
	Status *OccurrenceStatus `json:"status,omitempty"`
	// Contains details on why the occurrence errored.
	Error *OccurrencesResponseError `json:"error,omitempty"`
}

func (o OccurrencesResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OccurrencesResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OccurrencesResponse) GetScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.ScheduleID
}

func (o *OccurrencesResponse) GetOccurrenceID() *string {
	if o == nil {
		return nil
	}
	return o.OccurrenceID
}

func (o *OccurrencesResponse) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *OccurrencesResponse) GetGenerated() *bool {
	if o == nil {
		return nil
	}
	return o.Generated
}

func (o *OccurrencesResponse) GetIndefinite() *bool {
	if o == nil {
		return nil
	}
	return o.Indefinite
}

func (o *OccurrencesResponse) GetCanceledOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CanceledOn
}

func (o *OccurrencesResponse) GetRunOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.RunOn
}

func (o *OccurrencesResponse) GetRunTransfer() RunTransfer {
	if o == nil {
		return RunTransfer{}
	}
	return o.RunTransfer
}

func (o *OccurrencesResponse) GetRanOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.RanOn
}

func (o *OccurrencesResponse) GetRanTransferID() *string {
	if o == nil {
		return nil
	}
	return o.RanTransferID
}

func (o *OccurrencesResponse) GetStatus() *OccurrenceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OccurrencesResponse) GetError() *OccurrencesResponseError {
	if o == nil {
		return nil
	}
	return o.Error
}
