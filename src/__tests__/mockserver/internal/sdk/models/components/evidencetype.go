// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type EvidenceType string

const (
	EvidenceTypeReceipt               EvidenceType = "receipt"
	EvidenceTypeProofOfDelivery       EvidenceType = "proof-of-delivery"
	EvidenceTypeCancelationPolicy     EvidenceType = "cancelation-policy"
	EvidenceTypeTermsOfService        EvidenceType = "terms-of-service"
	EvidenceTypeCustomerCommunication EvidenceType = "customer-communication"
	EvidenceTypeGenericEvidence       EvidenceType = "generic-evidence"
	EvidenceTypeCoverLetter           EvidenceType = "cover-letter"
	EvidenceTypeOther                 EvidenceType = "other"
)

func (e EvidenceType) ToPointer() *EvidenceType {
	return &e
}
func (e *EvidenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "receipt":
		fallthrough
	case "proof-of-delivery":
		fallthrough
	case "cancelation-policy":
		fallthrough
	case "terms-of-service":
		fallthrough
	case "customer-communication":
		fallthrough
	case "generic-evidence":
		fallthrough
	case "cover-letter":
		fallthrough
	case "other":
		*e = EvidenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EvidenceType: %v", v)
	}
}
