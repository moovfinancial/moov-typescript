// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type Capability struct {
	// Moov account capabilities.
	//
	// The `production-app`, `platform.production-app`, and / or `platform.wallet-transfers` capabilities might appear in your list. These are read-only capabilities that Moov requests and uses for account verification purposes. These capabilities remains active with your account and require no additional action.
	Capability CapabilityID `json:"capability"`
	AccountID  string       `json:"accountID"`
	// The status of the capability requested for an account.
	Status CapabilityStatus `json:"status"`
	// Represents individual and business data necessary to facilitate the enabling of a capability for an account.
	Requirements   *CapabilityRequirement `json:"requirements,omitempty"`
	DisabledReason *string                `json:"disabledReason,omitempty"`
	CreatedOn      time.Time              `json:"createdOn"`
	UpdatedOn      time.Time              `json:"updatedOn"`
	DisabledOn     *time.Time             `json:"disabledOn,omitempty"`
}

func (c Capability) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Capability) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Capability) GetCapability() CapabilityID {
	if o == nil {
		return CapabilityID("")
	}
	return o.Capability
}

func (o *Capability) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *Capability) GetStatus() CapabilityStatus {
	if o == nil {
		return CapabilityStatus("")
	}
	return o.Status
}

func (o *Capability) GetRequirements() *CapabilityRequirement {
	if o == nil {
		return nil
	}
	return o.Requirements
}

func (o *Capability) GetDisabledReason() *string {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *Capability) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *Capability) GetUpdatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedOn
}

func (o *Capability) GetDisabledOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.DisabledOn
}
