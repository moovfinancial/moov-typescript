// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// WebhookEventType - The type of event that occurred.
type WebhookEventType string

const (
	WebhookEventTypeWildcard                   WebhookEventType = "*"
	WebhookEventTypeAccountCreated             WebhookEventType = "account.created"
	WebhookEventTypeAccountUpdated             WebhookEventType = "account.updated"
	WebhookEventTypeAccountDeleted             WebhookEventType = "account.deleted"
	WebhookEventTypeBalanceUpdated             WebhookEventType = "balance.updated"
	WebhookEventTypeBankAccountCreated         WebhookEventType = "bankAccount.created"
	WebhookEventTypeBankAccountUpdated         WebhookEventType = "bankAccount.updated"
	WebhookEventTypeBankAccountDeleted         WebhookEventType = "bankAccount.deleted"
	WebhookEventTypeCancellationCreated        WebhookEventType = "cancellation.created"
	WebhookEventTypeCancellationUpdated        WebhookEventType = "cancellation.updated"
	WebhookEventTypeCardAutoUpdated            WebhookEventType = "card.autoUpdated"
	WebhookEventTypeCapabilityRequested        WebhookEventType = "capability.requested"
	WebhookEventTypeCapabilityUpdated          WebhookEventType = "capability.updated"
	WebhookEventTypeDisputeCreated             WebhookEventType = "dispute.created"
	WebhookEventTypeDisputeUpdated             WebhookEventType = "dispute.updated"
	WebhookEventTypeNetworkIDUpdated           WebhookEventType = "networkID.updated"
	WebhookEventTypePaymentMethodEnabled       WebhookEventType = "paymentMethod.enabled"
	WebhookEventTypePaymentMethodDisabled      WebhookEventType = "paymentMethod.disabled"
	WebhookEventTypeRefundCreated              WebhookEventType = "refund.created"
	WebhookEventTypeRefundUpdated              WebhookEventType = "refund.updated"
	WebhookEventTypeRepresentativeCreated      WebhookEventType = "representative.created"
	WebhookEventTypeRepresentativeUpdated      WebhookEventType = "representative.updated"
	WebhookEventTypeRepresentativeDeleted      WebhookEventType = "representative.deleted"
	WebhookEventTypeSweepCreated               WebhookEventType = "sweep.created"
	WebhookEventTypeSweepUpdated               WebhookEventType = "sweep.updated"
	WebhookEventTypeTerminalApplicationCreated WebhookEventType = "terminalApplication.created"
	WebhookEventTypeTerminalApplicationUpdated WebhookEventType = "terminalApplication.updated"
	WebhookEventTypeTransferCreated            WebhookEventType = "transfer.created"
	WebhookEventTypeTransferUpdated            WebhookEventType = "transfer.updated"
	WebhookEventTypeWalletTransactionUpdated   WebhookEventType = "walletTransaction.updated"
)

func (e WebhookEventType) ToPointer() *WebhookEventType {
	return &e
}
func (e *WebhookEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "*":
		fallthrough
	case "account.created":
		fallthrough
	case "account.updated":
		fallthrough
	case "account.deleted":
		fallthrough
	case "balance.updated":
		fallthrough
	case "bankAccount.created":
		fallthrough
	case "bankAccount.updated":
		fallthrough
	case "bankAccount.deleted":
		fallthrough
	case "cancellation.created":
		fallthrough
	case "cancellation.updated":
		fallthrough
	case "card.autoUpdated":
		fallthrough
	case "capability.requested":
		fallthrough
	case "capability.updated":
		fallthrough
	case "dispute.created":
		fallthrough
	case "dispute.updated":
		fallthrough
	case "networkID.updated":
		fallthrough
	case "paymentMethod.enabled":
		fallthrough
	case "paymentMethod.disabled":
		fallthrough
	case "refund.created":
		fallthrough
	case "refund.updated":
		fallthrough
	case "representative.created":
		fallthrough
	case "representative.updated":
		fallthrough
	case "representative.deleted":
		fallthrough
	case "sweep.created":
		fallthrough
	case "sweep.updated":
		fallthrough
	case "terminalApplication.created":
		fallthrough
	case "terminalApplication.updated":
		fallthrough
	case "transfer.created":
		fallthrough
	case "transfer.updated":
		fallthrough
	case "walletTransaction.updated":
		*e = WebhookEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookEventType: %v", v)
	}
}
