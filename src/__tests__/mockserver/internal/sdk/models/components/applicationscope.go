// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ApplicationScope - A permission that the application requests on another account.
type ApplicationScope string

const (
	ApplicationScopeAccountsRead          ApplicationScope = "accounts.read"
	ApplicationScopeAccountsWrite         ApplicationScope = "accounts.write"
	ApplicationScopeAnalyticsRead         ApplicationScope = "analytics.read"
	ApplicationScopeApplePayMerchantRead  ApplicationScope = "apple-pay-merchant.read"
	ApplicationScopeApplePayMerchantWrite ApplicationScope = "apple-pay-merchant.write"
	ApplicationScopeApplePayRead          ApplicationScope = "apple-pay.read"
	ApplicationScopeApplePayWrite         ApplicationScope = "apple-pay.write"
	ApplicationScopeBankAccountsRead      ApplicationScope = "bank-accounts.read"
	ApplicationScopeBankAccountsWrite     ApplicationScope = "bank-accounts.write"
	ApplicationScopeCapabilitiesRead      ApplicationScope = "capabilities.read"
	ApplicationScopeCapabilitiesWrite     ApplicationScope = "capabilities.write"
	ApplicationScopeCardsRead             ApplicationScope = "cards.read"
	ApplicationScopeCardsWrite            ApplicationScope = "cards.write"
	ApplicationScopeDocumentsRead         ApplicationScope = "documents.read"
	ApplicationScopeDocumentsWrite        ApplicationScope = "documents.write"
	ApplicationScopeFedRead               ApplicationScope = "fed.read"
	ApplicationScopeFilesRead             ApplicationScope = "files.read"
	ApplicationScopeFilesWrite            ApplicationScope = "files.write"
	ApplicationScopeIssuedCardsRead       ApplicationScope = "issued-cards.read"
	ApplicationScopeIssuedCardsWrite      ApplicationScope = "issued-cards.write"
	ApplicationScopeIssuedCardsReadSecure ApplicationScope = "issued-cards.read-secure"
	ApplicationScopePaymentMethodsRead    ApplicationScope = "payment-methods.read"
	ApplicationScopePingRead              ApplicationScope = "ping.read"
	ApplicationScopeProfileEnrichmentRead ApplicationScope = "profile-enrichment.read"
	ApplicationScopeProfileRead           ApplicationScope = "profile.read"
	ApplicationScopeProfileWrite          ApplicationScope = "profile.write"
	ApplicationScopeProfileDisconnect     ApplicationScope = "profile.disconnect"
	ApplicationScopeRepresentativesRead   ApplicationScope = "representatives.read"
	ApplicationScopeRepresentativesWrite  ApplicationScope = "representatives.write"
	ApplicationScopeTransfersRead         ApplicationScope = "transfers.read"
	ApplicationScopeTransfersWrite        ApplicationScope = "transfers.write"
	ApplicationScopeWalletsRead           ApplicationScope = "wallets.read"
)

func (e ApplicationScope) ToPointer() *ApplicationScope {
	return &e
}
func (e *ApplicationScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accounts.read":
		fallthrough
	case "accounts.write":
		fallthrough
	case "analytics.read":
		fallthrough
	case "apple-pay-merchant.read":
		fallthrough
	case "apple-pay-merchant.write":
		fallthrough
	case "apple-pay.read":
		fallthrough
	case "apple-pay.write":
		fallthrough
	case "bank-accounts.read":
		fallthrough
	case "bank-accounts.write":
		fallthrough
	case "capabilities.read":
		fallthrough
	case "capabilities.write":
		fallthrough
	case "cards.read":
		fallthrough
	case "cards.write":
		fallthrough
	case "documents.read":
		fallthrough
	case "documents.write":
		fallthrough
	case "fed.read":
		fallthrough
	case "files.read":
		fallthrough
	case "files.write":
		fallthrough
	case "issued-cards.read":
		fallthrough
	case "issued-cards.write":
		fallthrough
	case "issued-cards.read-secure":
		fallthrough
	case "payment-methods.read":
		fallthrough
	case "ping.read":
		fallthrough
	case "profile-enrichment.read":
		fallthrough
	case "profile.read":
		fallthrough
	case "profile.write":
		fallthrough
	case "profile.disconnect":
		fallthrough
	case "representatives.read":
		fallthrough
	case "representatives.write":
		fallthrough
	case "transfers.read":
		fallthrough
	case "transfers.write":
		fallthrough
	case "wallets.read":
		*e = ApplicationScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationScope: %v", v)
	}
}
