// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type IssuedCardAuthorizationEvent struct {
	// The identifier for this event. Use the `eventType` field to determine what resource is identified by this ID (`authorization`, `reversal`, etc.).
	EventID string `json:"eventID"`
	// The type of event that occurred on the card.
	EventType IssuedCardEventType `json:"eventType"`
	// A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
	Amount string `json:"amount"`
	// The result of an event.
	Result    IssuedCardAuthorizationEventResult `json:"result"`
	CreatedOn time.Time                          `json:"createdOn"`
}

func (i IssuedCardAuthorizationEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssuedCardAuthorizationEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssuedCardAuthorizationEvent) GetEventID() string {
	if o == nil {
		return ""
	}
	return o.EventID
}

func (o *IssuedCardAuthorizationEvent) GetEventType() IssuedCardEventType {
	if o == nil {
		return IssuedCardEventType("")
	}
	return o.EventType
}

func (o *IssuedCardAuthorizationEvent) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *IssuedCardAuthorizationEvent) GetResult() IssuedCardAuthorizationEventResult {
	if o == nil {
		return IssuedCardAuthorizationEventResult("")
	}
	return o.Result
}

func (o *IssuedCardAuthorizationEvent) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}
