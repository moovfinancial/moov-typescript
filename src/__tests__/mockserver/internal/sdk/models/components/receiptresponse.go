// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type ReceiptResponse struct {
	// Unique identifier for the receipt request.
	ReceiptID string `json:"receiptID"`
	// AccountID for which the receipt request was created.
	CreatedBy string `json:"createdBy"`
	// The date and time the receipt was disabled.
	DisabledOn *time.Time `json:"disabledOn,omitempty"`
	// The type of receipt.
	Kind ReceiptKind `json:"kind"`
	// The email address the receipt is sent to.
	// Either email or emailAccountID will be in the response, but not both.
	Email *string `json:"email,omitempty"`
	// The accountID the receipt is sent to.
	// Either email or emailAccountID will be in the response, but not both.
	EmailAccountID *string `json:"emailAccountID,omitempty"`
	// The ID of the transfer associated with this receipt.
	// Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
	ForTransferID *string `json:"forTransferID,omitempty"`
	// The ID of the schedule associated with this receipt.
	// Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
	ForScheduleID *string `json:"forScheduleID,omitempty"`
	// The ID of the schedule occurrence associated with this receipt.
	// Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
	ForOccurrenceID *string `json:"forOccurrenceID,omitempty"`
	// The list of receipts that have been sent.
	SentFor []SentReceipt `json:"sentFor,omitempty"`
}

func (r ReceiptResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReceiptResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ReceiptResponse) GetReceiptID() string {
	if o == nil {
		return ""
	}
	return o.ReceiptID
}

func (o *ReceiptResponse) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ReceiptResponse) GetDisabledOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.DisabledOn
}

func (o *ReceiptResponse) GetKind() ReceiptKind {
	if o == nil {
		return ReceiptKind("")
	}
	return o.Kind
}

func (o *ReceiptResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ReceiptResponse) GetEmailAccountID() *string {
	if o == nil {
		return nil
	}
	return o.EmailAccountID
}

func (o *ReceiptResponse) GetForTransferID() *string {
	if o == nil {
		return nil
	}
	return o.ForTransferID
}

func (o *ReceiptResponse) GetForScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.ForScheduleID
}

func (o *ReceiptResponse) GetForOccurrenceID() *string {
	if o == nil {
		return nil
	}
	return o.ForOccurrenceID
}

func (o *ReceiptResponse) GetSentFor() []SentReceipt {
	if o == nil {
		return nil
	}
	return o.SentFor
}
