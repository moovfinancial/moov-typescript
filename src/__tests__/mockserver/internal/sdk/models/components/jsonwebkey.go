// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Use - The intended use of the key. 'sig' for signature, 'enc' for encryption.
type Use string

const (
	UseSig Use = "sig"
	UseEnc Use = "enc"
)

func (e Use) ToPointer() *Use {
	return &e
}
func (e *Use) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sig":
		fallthrough
	case "enc":
		*e = Use(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Use: %v", v)
	}
}

// JSONWebKey - Describes an [RFC7517](https://datatracker.ietf.org/doc/html/rfc7517) web key.
type JSONWebKey struct {
	// The cryptographic algorithm family used with the key (e.g., 'RSA', 'EC', 'oct').
	Kty string `json:"kty"`
	// The intended use of the key. 'sig' for signature, 'enc' for encryption.
	Use *Use `json:"use,omitempty"`
	// The permitted operations for the key, e.g., 'sign', 'verify', 'encrypt', 'decrypt'.
	KeyOps []string `json:"key_ops,omitempty"`
	// The algorithm intended for use with the key, e.g., 'RS256' or 'ES256'.
	Alg *string `json:"alg,omitempty"`
	// A unique identifier for the key.
	Kid *string `json:"kid,omitempty"`
	// The curve for Elliptic Curve keys, e.g., 'P-256', 'P-384', or 'P-521'.
	//
	// This field is required when `kty` is 'EC'.
	Crv *string `json:"crv,omitempty"`
	// The x coordinate for Elliptic Curve keys.
	//
	// This field is required when `kty` is 'EC'.
	X *string `json:"x,omitempty"`
	// The y coordinate for Elliptic Curve keys.
	//
	// This field is required when `kty` is 'EC'.
	Y *string `json:"y,omitempty"`
	// The modulus value for RSA keys.
	//
	// This field is required when `kty` is 'RSA'.
	N *string `json:"n,omitempty"`
	// The exponent value for RSA keys.
	//
	// This field is required when `kty` is 'RSA'.
	E *string `json:"e,omitempty"`
}

func (o *JSONWebKey) GetKty() string {
	if o == nil {
		return ""
	}
	return o.Kty
}

func (o *JSONWebKey) GetUse() *Use {
	if o == nil {
		return nil
	}
	return o.Use
}

func (o *JSONWebKey) GetKeyOps() []string {
	if o == nil {
		return nil
	}
	return o.KeyOps
}

func (o *JSONWebKey) GetAlg() *string {
	if o == nil {
		return nil
	}
	return o.Alg
}

func (o *JSONWebKey) GetKid() *string {
	if o == nil {
		return nil
	}
	return o.Kid
}

func (o *JSONWebKey) GetCrv() *string {
	if o == nil {
		return nil
	}
	return o.Crv
}

func (o *JSONWebKey) GetX() *string {
	if o == nil {
		return nil
	}
	return o.X
}

func (o *JSONWebKey) GetY() *string {
	if o == nil {
		return nil
	}
	return o.Y
}

func (o *JSONWebKey) GetN() *string {
	if o == nil {
		return nil
	}
	return o.N
}

func (o *JSONWebKey) GetE() *string {
	if o == nil {
		return nil
	}
	return o.E
}
