// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// IssuingAuthorizationStatus - Status of a card issuing authorization.
type IssuingAuthorizationStatus string

const (
	IssuingAuthorizationStatusPending  IssuingAuthorizationStatus = "pending"
	IssuingAuthorizationStatusDeclined IssuingAuthorizationStatus = "declined"
	IssuingAuthorizationStatusCanceled IssuingAuthorizationStatus = "canceled"
	IssuingAuthorizationStatusCleared  IssuingAuthorizationStatus = "cleared"
	IssuingAuthorizationStatusExpired  IssuingAuthorizationStatus = "expired"
)

func (e IssuingAuthorizationStatus) ToPointer() *IssuingAuthorizationStatus {
	return &e
}
func (e *IssuingAuthorizationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "declined":
		fallthrough
	case "canceled":
		fallthrough
	case "cleared":
		fallthrough
	case "expired":
		*e = IssuingAuthorizationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuingAuthorizationStatus: %v", v)
	}
}
