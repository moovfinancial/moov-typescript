// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type RefundPolicy string

const (
	RefundPolicyConditionalRefund        RefundPolicy = "conditional-refund"
	RefundPolicyCustomPolicy             RefundPolicy = "custom-policy"
	RefundPolicyEventBasedPolicy         RefundPolicy = "event-based-policy"
	RefundPolicyFullRefundExtendedWindow RefundPolicy = "full-refund-extended-window"
	RefundPolicyFullRefundWithin30Days   RefundPolicy = "full-refund-within-30-days"
	RefundPolicyNoRefunds                RefundPolicy = "no-refunds"
	RefundPolicyPartialRefund            RefundPolicy = "partial-refund"
	RefundPolicyProratedRefund           RefundPolicy = "prorated-refund"
	RefundPolicyStoreCreditOnly          RefundPolicy = "store-credit-only"
)

func (e RefundPolicy) ToPointer() *RefundPolicy {
	return &e
}
func (e *RefundPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "conditional-refund":
		fallthrough
	case "custom-policy":
		fallthrough
	case "event-based-policy":
		fallthrough
	case "full-refund-extended-window":
		fallthrough
	case "full-refund-within-30-days":
		fallthrough
	case "no-refunds":
		fallthrough
	case "partial-refund":
		fallthrough
	case "prorated-refund":
		fallthrough
	case "store-credit-only":
		*e = RefundPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundPolicy: %v", v)
	}
}
