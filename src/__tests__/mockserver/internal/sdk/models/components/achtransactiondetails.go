// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// ACHTransactionDetails - ACH specific details about the transaction.
type ACHTransactionDetails struct {
	// Status of a transaction within the ACH lifecycle.
	Status      ACHTransactionStatus `json:"status"`
	TraceNumber string               `json:"traceNumber"`
	Return      *ACHException        `json:"return,omitempty"`
	Correction  *ACHException        `json:"correction,omitempty"`
	// An optional override of the default NACHA company entry description for a transfer.
	CompanyEntryDescription *string `json:"companyEntryDescription,omitempty"`
	// An optional override of the default NACHA company name for a transfer.
	OriginatingCompanyName *string `json:"originatingCompanyName,omitempty"`
	// Code used to identify the ACH authorization method.
	SecCode      *SECCode   `json:"secCode,omitempty"`
	CanceledOn   *time.Time `json:"canceledOn,omitempty"`
	InitiatedOn  *time.Time `json:"initiatedOn,omitempty"`
	OriginatedOn *time.Time `json:"originatedOn,omitempty"`
	CorrectedOn  *time.Time `json:"correctedOn,omitempty"`
	ReturnedOn   *time.Time `json:"returnedOn,omitempty"`
	FailedOn     *time.Time `json:"failedOn,omitempty"`
	CompletedOn  *time.Time `json:"completedOn,omitempty"`
	// An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.
	DebitHoldPeriod *DebitHoldPeriod `json:"debitHoldPeriod,omitempty"`
}

func (a ACHTransactionDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ACHTransactionDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ACHTransactionDetails) GetStatus() ACHTransactionStatus {
	if o == nil {
		return ACHTransactionStatus("")
	}
	return o.Status
}

func (o *ACHTransactionDetails) GetTraceNumber() string {
	if o == nil {
		return ""
	}
	return o.TraceNumber
}

func (o *ACHTransactionDetails) GetReturn() *ACHException {
	if o == nil {
		return nil
	}
	return o.Return
}

func (o *ACHTransactionDetails) GetCorrection() *ACHException {
	if o == nil {
		return nil
	}
	return o.Correction
}

func (o *ACHTransactionDetails) GetCompanyEntryDescription() *string {
	if o == nil {
		return nil
	}
	return o.CompanyEntryDescription
}

func (o *ACHTransactionDetails) GetOriginatingCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.OriginatingCompanyName
}

func (o *ACHTransactionDetails) GetSecCode() *SECCode {
	if o == nil {
		return nil
	}
	return o.SecCode
}

func (o *ACHTransactionDetails) GetCanceledOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CanceledOn
}

func (o *ACHTransactionDetails) GetInitiatedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.InitiatedOn
}

func (o *ACHTransactionDetails) GetOriginatedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.OriginatedOn
}

func (o *ACHTransactionDetails) GetCorrectedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CorrectedOn
}

func (o *ACHTransactionDetails) GetReturnedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReturnedOn
}

func (o *ACHTransactionDetails) GetFailedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.FailedOn
}

func (o *ACHTransactionDetails) GetCompletedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedOn
}

func (o *ACHTransactionDetails) GetDebitHoldPeriod() *DebitHoldPeriod {
	if o == nil {
		return nil
	}
	return o.DebitHoldPeriod
}
