/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWalletTransactionGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetWalletTransactionRequest = {
  accountID: string;
  walletID: string;
  transactionID: string;
};

export type GetWalletTransactionResponse = {
  headers: { [k: string]: Array<string> };
  result: components.WalletTransaction;
};

/** @internal */
export const GetWalletTransactionGlobals$inboundSchema: z.ZodType<
  GetWalletTransactionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetWalletTransactionGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetWalletTransactionGlobals$outboundSchema: z.ZodType<
  GetWalletTransactionGlobals$Outbound,
  z.ZodTypeDef,
  GetWalletTransactionGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletTransactionGlobals$ {
  /** @deprecated use `GetWalletTransactionGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWalletTransactionGlobals$inboundSchema;
  /** @deprecated use `GetWalletTransactionGlobals$outboundSchema` instead. */
  export const outboundSchema = GetWalletTransactionGlobals$outboundSchema;
  /** @deprecated use `GetWalletTransactionGlobals$Outbound` instead. */
  export type Outbound = GetWalletTransactionGlobals$Outbound;
}

export function getWalletTransactionGlobalsToJSON(
  getWalletTransactionGlobals: GetWalletTransactionGlobals,
): string {
  return JSON.stringify(
    GetWalletTransactionGlobals$outboundSchema.parse(
      getWalletTransactionGlobals,
    ),
  );
}

export function getWalletTransactionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletTransactionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletTransactionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletTransactionGlobals' from JSON`,
  );
}

/** @internal */
export const GetWalletTransactionRequest$inboundSchema: z.ZodType<
  GetWalletTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
  transactionID: z.string(),
});

/** @internal */
export type GetWalletTransactionRequest$Outbound = {
  accountID: string;
  walletID: string;
  transactionID: string;
};

/** @internal */
export const GetWalletTransactionRequest$outboundSchema: z.ZodType<
  GetWalletTransactionRequest$Outbound,
  z.ZodTypeDef,
  GetWalletTransactionRequest
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
  transactionID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletTransactionRequest$ {
  /** @deprecated use `GetWalletTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = GetWalletTransactionRequest$inboundSchema;
  /** @deprecated use `GetWalletTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = GetWalletTransactionRequest$outboundSchema;
  /** @deprecated use `GetWalletTransactionRequest$Outbound` instead. */
  export type Outbound = GetWalletTransactionRequest$Outbound;
}

export function getWalletTransactionRequestToJSON(
  getWalletTransactionRequest: GetWalletTransactionRequest,
): string {
  return JSON.stringify(
    GetWalletTransactionRequest$outboundSchema.parse(
      getWalletTransactionRequest,
    ),
  );
}

export function getWalletTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletTransactionRequest' from JSON`,
  );
}

/** @internal */
export const GetWalletTransactionResponse$inboundSchema: z.ZodType<
  GetWalletTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.WalletTransaction$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetWalletTransactionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.WalletTransaction$Outbound;
};

/** @internal */
export const GetWalletTransactionResponse$outboundSchema: z.ZodType<
  GetWalletTransactionResponse$Outbound,
  z.ZodTypeDef,
  GetWalletTransactionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.WalletTransaction$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletTransactionResponse$ {
  /** @deprecated use `GetWalletTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = GetWalletTransactionResponse$inboundSchema;
  /** @deprecated use `GetWalletTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = GetWalletTransactionResponse$outboundSchema;
  /** @deprecated use `GetWalletTransactionResponse$Outbound` instead. */
  export type Outbound = GetWalletTransactionResponse$Outbound;
}

export function getWalletTransactionResponseToJSON(
  getWalletTransactionResponse: GetWalletTransactionResponse,
): string {
  return JSON.stringify(
    GetWalletTransactionResponse$outboundSchema.parse(
      getWalletTransactionResponse,
    ),
  );
}

export function getWalletTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletTransactionResponse' from JSON`,
  );
}
