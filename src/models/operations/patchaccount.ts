/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchAccountSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type PatchAccountRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  createAccountUpdate: components.CreateAccountUpdate;
};

/** @internal */
export const PatchAccountSecurity$inboundSchema: z.ZodType<
  PatchAccountSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type PatchAccountSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const PatchAccountSecurity$outboundSchema: z.ZodType<
  PatchAccountSecurity$Outbound,
  z.ZodTypeDef,
  PatchAccountSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAccountSecurity$ {
  /** @deprecated use `PatchAccountSecurity$inboundSchema` instead. */
  export const inboundSchema = PatchAccountSecurity$inboundSchema;
  /** @deprecated use `PatchAccountSecurity$outboundSchema` instead. */
  export const outboundSchema = PatchAccountSecurity$outboundSchema;
  /** @deprecated use `PatchAccountSecurity$Outbound` instead. */
  export type Outbound = PatchAccountSecurity$Outbound;
}

export function patchAccountSecurityToJSON(
  patchAccountSecurity: PatchAccountSecurity,
): string {
  return JSON.stringify(
    PatchAccountSecurity$outboundSchema.parse(patchAccountSecurity),
  );
}

export function patchAccountSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PatchAccountSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAccountSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAccountSecurity' from JSON`,
  );
}

/** @internal */
export const PatchAccountRequest$inboundSchema: z.ZodType<
  PatchAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  CreateAccountUpdate: components.CreateAccountUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CreateAccountUpdate": "createAccountUpdate",
  });
});

/** @internal */
export type PatchAccountRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  CreateAccountUpdate: components.CreateAccountUpdate$Outbound;
};

/** @internal */
export const PatchAccountRequest$outboundSchema: z.ZodType<
  PatchAccountRequest$Outbound,
  z.ZodTypeDef,
  PatchAccountRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  createAccountUpdate: components.CreateAccountUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    createAccountUpdate: "CreateAccountUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAccountRequest$ {
  /** @deprecated use `PatchAccountRequest$inboundSchema` instead. */
  export const inboundSchema = PatchAccountRequest$inboundSchema;
  /** @deprecated use `PatchAccountRequest$outboundSchema` instead. */
  export const outboundSchema = PatchAccountRequest$outboundSchema;
  /** @deprecated use `PatchAccountRequest$Outbound` instead. */
  export type Outbound = PatchAccountRequest$Outbound;
}

export function patchAccountRequestToJSON(
  patchAccountRequest: PatchAccountRequest,
): string {
  return JSON.stringify(
    PatchAccountRequest$outboundSchema.parse(patchAccountRequest),
  );
}

export function patchAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAccountRequest' from JSON`,
  );
}
