/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAccountGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateAccountRequest = {
  accountID: string;
  patchAccount: components.PatchAccount;
};

export type UpdateAccountResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Account;
};

/** @internal */
export const UpdateAccountGlobals$inboundSchema: z.ZodType<
  UpdateAccountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateAccountGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateAccountGlobals$outboundSchema: z.ZodType<
  UpdateAccountGlobals$Outbound,
  z.ZodTypeDef,
  UpdateAccountGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAccountGlobals$ {
  /** @deprecated use `UpdateAccountGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateAccountGlobals$inboundSchema;
  /** @deprecated use `UpdateAccountGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateAccountGlobals$outboundSchema;
  /** @deprecated use `UpdateAccountGlobals$Outbound` instead. */
  export type Outbound = UpdateAccountGlobals$Outbound;
}

export function updateAccountGlobalsToJSON(
  updateAccountGlobals: UpdateAccountGlobals,
): string {
  return JSON.stringify(
    UpdateAccountGlobals$outboundSchema.parse(updateAccountGlobals),
  );
}

export function updateAccountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAccountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAccountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAccountGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateAccountRequest$inboundSchema: z.ZodType<
  UpdateAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  PatchAccount: components.PatchAccount$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PatchAccount": "patchAccount",
  });
});

/** @internal */
export type UpdateAccountRequest$Outbound = {
  accountID: string;
  PatchAccount: components.PatchAccount$Outbound;
};

/** @internal */
export const UpdateAccountRequest$outboundSchema: z.ZodType<
  UpdateAccountRequest$Outbound,
  z.ZodTypeDef,
  UpdateAccountRequest
> = z.object({
  accountID: z.string(),
  patchAccount: components.PatchAccount$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    patchAccount: "PatchAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAccountRequest$ {
  /** @deprecated use `UpdateAccountRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAccountRequest$inboundSchema;
  /** @deprecated use `UpdateAccountRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAccountRequest$outboundSchema;
  /** @deprecated use `UpdateAccountRequest$Outbound` instead. */
  export type Outbound = UpdateAccountRequest$Outbound;
}

export function updateAccountRequestToJSON(
  updateAccountRequest: UpdateAccountRequest,
): string {
  return JSON.stringify(
    UpdateAccountRequest$outboundSchema.parse(updateAccountRequest),
  );
}

export function updateAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAccountRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAccountResponse$inboundSchema: z.ZodType<
  UpdateAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Account$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateAccountResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Account$Outbound;
};

/** @internal */
export const UpdateAccountResponse$outboundSchema: z.ZodType<
  UpdateAccountResponse$Outbound,
  z.ZodTypeDef,
  UpdateAccountResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Account$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAccountResponse$ {
  /** @deprecated use `UpdateAccountResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAccountResponse$inboundSchema;
  /** @deprecated use `UpdateAccountResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAccountResponse$outboundSchema;
  /** @deprecated use `UpdateAccountResponse$Outbound` instead. */
  export type Outbound = UpdateAccountResponse$Outbound;
}

export function updateAccountResponseToJSON(
  updateAccountResponse: UpdateAccountResponse,
): string {
  return JSON.stringify(
    UpdateAccountResponse$outboundSchema.parse(updateAccountResponse),
  );
}

export function updateAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAccountResponse' from JSON`,
  );
}
