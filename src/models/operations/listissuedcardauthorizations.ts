/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIssuedCardAuthorizationsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListIssuedCardAuthorizationsRequest = {
  /**
   * The Moov business account for which cards have been issued.
   */
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
  /**
   * Optional ID of the issued card to filter results.
   */
  issuedCardID?: string | undefined;
  /**
   * Optional date-time which inclusively filters all authorizations created after this date-time.
   */
  startDateTime?: Date | undefined;
  /**
   * Optional date-time which exclusively filters all authorizations created before this date-time.
   */
  endDateTime?: Date | undefined;
  /**
   * Optional, comma-separated statuses of the authorization to filter results.
   */
  statuses?: Array<components.IssuingAuthorizationStatus> | undefined;
};

export type ListIssuedCardAuthorizationsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.IssuedCardAuthorization>;
};

/** @internal */
export const ListIssuedCardAuthorizationsGlobals$inboundSchema: z.ZodType<
  ListIssuedCardAuthorizationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListIssuedCardAuthorizationsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListIssuedCardAuthorizationsGlobals$outboundSchema: z.ZodType<
  ListIssuedCardAuthorizationsGlobals$Outbound,
  z.ZodTypeDef,
  ListIssuedCardAuthorizationsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardAuthorizationsGlobals$ {
  /** @deprecated use `ListIssuedCardAuthorizationsGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ListIssuedCardAuthorizationsGlobals$inboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardAuthorizationsGlobals$outboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationsGlobals$Outbound` instead. */
  export type Outbound = ListIssuedCardAuthorizationsGlobals$Outbound;
}

export function listIssuedCardAuthorizationsGlobalsToJSON(
  listIssuedCardAuthorizationsGlobals: ListIssuedCardAuthorizationsGlobals,
): string {
  return JSON.stringify(
    ListIssuedCardAuthorizationsGlobals$outboundSchema.parse(
      listIssuedCardAuthorizationsGlobals,
    ),
  );
}

export function listIssuedCardAuthorizationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListIssuedCardAuthorizationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListIssuedCardAuthorizationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIssuedCardAuthorizationsGlobals' from JSON`,
  );
}

/** @internal */
export const ListIssuedCardAuthorizationsRequest$inboundSchema: z.ZodType<
  ListIssuedCardAuthorizationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  issuedCardID: z.string().optional(),
  startDateTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  endDateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  statuses: z.array(components.IssuingAuthorizationStatus$inboundSchema)
    .optional(),
});

/** @internal */
export type ListIssuedCardAuthorizationsRequest$Outbound = {
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
  issuedCardID?: string | undefined;
  startDateTime?: string | undefined;
  endDateTime?: string | undefined;
  statuses?: Array<string> | undefined;
};

/** @internal */
export const ListIssuedCardAuthorizationsRequest$outboundSchema: z.ZodType<
  ListIssuedCardAuthorizationsRequest$Outbound,
  z.ZodTypeDef,
  ListIssuedCardAuthorizationsRequest
> = z.object({
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  issuedCardID: z.string().optional(),
  startDateTime: z.date().transform(v => v.toISOString()).optional(),
  endDateTime: z.date().transform(v => v.toISOString()).optional(),
  statuses: z.array(components.IssuingAuthorizationStatus$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardAuthorizationsRequest$ {
  /** @deprecated use `ListIssuedCardAuthorizationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListIssuedCardAuthorizationsRequest$inboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardAuthorizationsRequest$outboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationsRequest$Outbound` instead. */
  export type Outbound = ListIssuedCardAuthorizationsRequest$Outbound;
}

export function listIssuedCardAuthorizationsRequestToJSON(
  listIssuedCardAuthorizationsRequest: ListIssuedCardAuthorizationsRequest,
): string {
  return JSON.stringify(
    ListIssuedCardAuthorizationsRequest$outboundSchema.parse(
      listIssuedCardAuthorizationsRequest,
    ),
  );
}

export function listIssuedCardAuthorizationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIssuedCardAuthorizationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListIssuedCardAuthorizationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIssuedCardAuthorizationsRequest' from JSON`,
  );
}

/** @internal */
export const ListIssuedCardAuthorizationsResponse$inboundSchema: z.ZodType<
  ListIssuedCardAuthorizationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.array(components.IssuedCardAuthorization$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListIssuedCardAuthorizationsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.IssuedCardAuthorization$Outbound>;
};

/** @internal */
export const ListIssuedCardAuthorizationsResponse$outboundSchema: z.ZodType<
  ListIssuedCardAuthorizationsResponse$Outbound,
  z.ZodTypeDef,
  ListIssuedCardAuthorizationsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.IssuedCardAuthorization$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardAuthorizationsResponse$ {
  /** @deprecated use `ListIssuedCardAuthorizationsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListIssuedCardAuthorizationsResponse$inboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardAuthorizationsResponse$outboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationsResponse$Outbound` instead. */
  export type Outbound = ListIssuedCardAuthorizationsResponse$Outbound;
}

export function listIssuedCardAuthorizationsResponseToJSON(
  listIssuedCardAuthorizationsResponse: ListIssuedCardAuthorizationsResponse,
): string {
  return JSON.stringify(
    ListIssuedCardAuthorizationsResponse$outboundSchema.parse(
      listIssuedCardAuthorizationsResponse,
    ),
  );
}

export function listIssuedCardAuthorizationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIssuedCardAuthorizationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListIssuedCardAuthorizationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIssuedCardAuthorizationsResponse' from JSON`,
  );
}
