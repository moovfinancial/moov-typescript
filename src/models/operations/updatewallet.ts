/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateWalletGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateWalletRequest = {
  /**
   * Identifier for the wallet.
   */
  walletID: string;
  /**
   * The Moov account ID the wallet belongs to.
   */
  accountID: string;
  patchWallet: components.PatchWallet;
};

export type UpdateWalletResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Wallet;
};

/** @internal */
export const UpdateWalletGlobals$inboundSchema: z.ZodType<
  UpdateWalletGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateWalletGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UpdateWalletGlobals$outboundSchema: z.ZodType<
  UpdateWalletGlobals$Outbound,
  z.ZodTypeDef,
  UpdateWalletGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWalletGlobals$ {
  /** @deprecated use `UpdateWalletGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateWalletGlobals$inboundSchema;
  /** @deprecated use `UpdateWalletGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateWalletGlobals$outboundSchema;
  /** @deprecated use `UpdateWalletGlobals$Outbound` instead. */
  export type Outbound = UpdateWalletGlobals$Outbound;
}

export function updateWalletGlobalsToJSON(
  updateWalletGlobals: UpdateWalletGlobals,
): string {
  return JSON.stringify(
    UpdateWalletGlobals$outboundSchema.parse(updateWalletGlobals),
  );
}

export function updateWalletGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWalletGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWalletGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWalletGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateWalletRequest$inboundSchema: z.ZodType<
  UpdateWalletRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  walletID: z.string(),
  accountID: z.string(),
  PatchWallet: components.PatchWallet$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PatchWallet": "patchWallet",
  });
});

/** @internal */
export type UpdateWalletRequest$Outbound = {
  walletID: string;
  accountID: string;
  PatchWallet: components.PatchWallet$Outbound;
};

/** @internal */
export const UpdateWalletRequest$outboundSchema: z.ZodType<
  UpdateWalletRequest$Outbound,
  z.ZodTypeDef,
  UpdateWalletRequest
> = z.object({
  walletID: z.string(),
  accountID: z.string(),
  patchWallet: components.PatchWallet$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    patchWallet: "PatchWallet",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWalletRequest$ {
  /** @deprecated use `UpdateWalletRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateWalletRequest$inboundSchema;
  /** @deprecated use `UpdateWalletRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateWalletRequest$outboundSchema;
  /** @deprecated use `UpdateWalletRequest$Outbound` instead. */
  export type Outbound = UpdateWalletRequest$Outbound;
}

export function updateWalletRequestToJSON(
  updateWalletRequest: UpdateWalletRequest,
): string {
  return JSON.stringify(
    UpdateWalletRequest$outboundSchema.parse(updateWalletRequest),
  );
}

export function updateWalletRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWalletRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWalletRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWalletRequest' from JSON`,
  );
}

/** @internal */
export const UpdateWalletResponse$inboundSchema: z.ZodType<
  UpdateWalletResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Wallet$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateWalletResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Wallet$Outbound;
};

/** @internal */
export const UpdateWalletResponse$outboundSchema: z.ZodType<
  UpdateWalletResponse$Outbound,
  z.ZodTypeDef,
  UpdateWalletResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Wallet$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWalletResponse$ {
  /** @deprecated use `UpdateWalletResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateWalletResponse$inboundSchema;
  /** @deprecated use `UpdateWalletResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateWalletResponse$outboundSchema;
  /** @deprecated use `UpdateWalletResponse$Outbound` instead. */
  export type Outbound = UpdateWalletResponse$Outbound;
}

export function updateWalletResponseToJSON(
  updateWalletResponse: UpdateWalletResponse,
): string {
  return JSON.stringify(
    UpdateWalletResponse$outboundSchema.parse(updateWalletResponse),
  );
}

export function updateWalletResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWalletResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWalletResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWalletResponse' from JSON`,
  );
}
