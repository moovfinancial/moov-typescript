/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResidualFeesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListResidualFeesRequest = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  residualID: string;
  /**
   * Optional date-time to inclusively filter all fees created after this date-time.
   */
  startDateTime?: string | undefined;
  /**
   * Optional date-time to exclusively filter all fees created before this date-time.
   */
  endDateTime?: string | undefined;
};

export type ListResidualFeesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.IncurredFee>;
};

/** @internal */
export const ListResidualFeesGlobals$inboundSchema: z.ZodType<
  ListResidualFeesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListResidualFeesGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListResidualFeesGlobals$outboundSchema: z.ZodType<
  ListResidualFeesGlobals$Outbound,
  z.ZodTypeDef,
  ListResidualFeesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResidualFeesGlobals$ {
  /** @deprecated use `ListResidualFeesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResidualFeesGlobals$inboundSchema;
  /** @deprecated use `ListResidualFeesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListResidualFeesGlobals$outboundSchema;
  /** @deprecated use `ListResidualFeesGlobals$Outbound` instead. */
  export type Outbound = ListResidualFeesGlobals$Outbound;
}

export function listResidualFeesGlobalsToJSON(
  listResidualFeesGlobals: ListResidualFeesGlobals,
): string {
  return JSON.stringify(
    ListResidualFeesGlobals$outboundSchema.parse(listResidualFeesGlobals),
  );
}

export function listResidualFeesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResidualFeesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResidualFeesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResidualFeesGlobals' from JSON`,
  );
}

/** @internal */
export const ListResidualFeesRequest$inboundSchema: z.ZodType<
  ListResidualFeesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  residualID: z.string(),
  startDateTime: z.string().optional(),
  endDateTime: z.string().optional(),
});

/** @internal */
export type ListResidualFeesRequest$Outbound = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  residualID: string;
  startDateTime?: string | undefined;
  endDateTime?: string | undefined;
};

/** @internal */
export const ListResidualFeesRequest$outboundSchema: z.ZodType<
  ListResidualFeesRequest$Outbound,
  z.ZodTypeDef,
  ListResidualFeesRequest
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  residualID: z.string(),
  startDateTime: z.string().optional(),
  endDateTime: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResidualFeesRequest$ {
  /** @deprecated use `ListResidualFeesRequest$inboundSchema` instead. */
  export const inboundSchema = ListResidualFeesRequest$inboundSchema;
  /** @deprecated use `ListResidualFeesRequest$outboundSchema` instead. */
  export const outboundSchema = ListResidualFeesRequest$outboundSchema;
  /** @deprecated use `ListResidualFeesRequest$Outbound` instead. */
  export type Outbound = ListResidualFeesRequest$Outbound;
}

export function listResidualFeesRequestToJSON(
  listResidualFeesRequest: ListResidualFeesRequest,
): string {
  return JSON.stringify(
    ListResidualFeesRequest$outboundSchema.parse(listResidualFeesRequest),
  );
}

export function listResidualFeesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResidualFeesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResidualFeesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResidualFeesRequest' from JSON`,
  );
}

/** @internal */
export const ListResidualFeesResponse$inboundSchema: z.ZodType<
  ListResidualFeesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.array(components.IncurredFee$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListResidualFeesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.IncurredFee$Outbound>;
};

/** @internal */
export const ListResidualFeesResponse$outboundSchema: z.ZodType<
  ListResidualFeesResponse$Outbound,
  z.ZodTypeDef,
  ListResidualFeesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.IncurredFee$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResidualFeesResponse$ {
  /** @deprecated use `ListResidualFeesResponse$inboundSchema` instead. */
  export const inboundSchema = ListResidualFeesResponse$inboundSchema;
  /** @deprecated use `ListResidualFeesResponse$outboundSchema` instead. */
  export const outboundSchema = ListResidualFeesResponse$outboundSchema;
  /** @deprecated use `ListResidualFeesResponse$Outbound` instead. */
  export type Outbound = ListResidualFeesResponse$Outbound;
}

export function listResidualFeesResponseToJSON(
  listResidualFeesResponse: ListResidualFeesResponse,
): string {
  return JSON.stringify(
    ListResidualFeesResponse$outboundSchema.parse(listResidualFeesResponse),
  );
}

export function listResidualFeesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListResidualFeesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResidualFeesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResidualFeesResponse' from JSON`,
  );
}
