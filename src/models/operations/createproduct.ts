/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateProductGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateProductRequest = {
  accountID: string;
  productRequest: components.ProductRequest;
};

export type CreateProductResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Product;
};

/** @internal */
export const CreateProductGlobals$inboundSchema: z.ZodType<
  CreateProductGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type CreateProductGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const CreateProductGlobals$outboundSchema: z.ZodType<
  CreateProductGlobals$Outbound,
  z.ZodTypeDef,
  CreateProductGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductGlobals$ {
  /** @deprecated use `CreateProductGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateProductGlobals$inboundSchema;
  /** @deprecated use `CreateProductGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateProductGlobals$outboundSchema;
  /** @deprecated use `CreateProductGlobals$Outbound` instead. */
  export type Outbound = CreateProductGlobals$Outbound;
}

export function createProductGlobalsToJSON(
  createProductGlobals: CreateProductGlobals,
): string {
  return JSON.stringify(
    CreateProductGlobals$outboundSchema.parse(createProductGlobals),
  );
}

export function createProductGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProductGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductGlobals' from JSON`,
  );
}

/** @internal */
export const CreateProductRequest$inboundSchema: z.ZodType<
  CreateProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  ProductRequest: components.ProductRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ProductRequest": "productRequest",
  });
});

/** @internal */
export type CreateProductRequest$Outbound = {
  accountID: string;
  ProductRequest: components.ProductRequest$Outbound;
};

/** @internal */
export const CreateProductRequest$outboundSchema: z.ZodType<
  CreateProductRequest$Outbound,
  z.ZodTypeDef,
  CreateProductRequest
> = z.object({
  accountID: z.string(),
  productRequest: components.ProductRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    productRequest: "ProductRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductRequest$ {
  /** @deprecated use `CreateProductRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProductRequest$inboundSchema;
  /** @deprecated use `CreateProductRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProductRequest$outboundSchema;
  /** @deprecated use `CreateProductRequest$Outbound` instead. */
  export type Outbound = CreateProductRequest$Outbound;
}

export function createProductRequestToJSON(
  createProductRequest: CreateProductRequest,
): string {
  return JSON.stringify(
    CreateProductRequest$outboundSchema.parse(createProductRequest),
  );
}

export function createProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductRequest' from JSON`,
  );
}

/** @internal */
export const CreateProductResponse$inboundSchema: z.ZodType<
  CreateProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.Product$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateProductResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Product$Outbound;
};

/** @internal */
export const CreateProductResponse$outboundSchema: z.ZodType<
  CreateProductResponse$Outbound,
  z.ZodTypeDef,
  CreateProductResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Product$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductResponse$ {
  /** @deprecated use `CreateProductResponse$inboundSchema` instead. */
  export const inboundSchema = CreateProductResponse$inboundSchema;
  /** @deprecated use `CreateProductResponse$outboundSchema` instead. */
  export const outboundSchema = CreateProductResponse$outboundSchema;
  /** @deprecated use `CreateProductResponse$Outbound` instead. */
  export type Outbound = CreateProductResponse$Outbound;
}

export function createProductResponseToJSON(
  createProductResponse: CreateProductResponse,
): string {
  return JSON.stringify(
    CreateProductResponse$outboundSchema.parse(createProductResponse),
  );
}

export function createProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductResponse' from JSON`,
  );
}
