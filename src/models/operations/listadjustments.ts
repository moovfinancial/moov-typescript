/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAdjustmentsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListAdjustmentsRequest = {
  accountID: string;
  /**
   * A wallet ID to filter adjustments by.
   */
  walletID?: string | undefined;
};

export type ListAdjustmentsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Adjustment>;
};

/** @internal */
export const ListAdjustmentsGlobals$inboundSchema: z.ZodType<
  ListAdjustmentsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListAdjustmentsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListAdjustmentsGlobals$outboundSchema: z.ZodType<
  ListAdjustmentsGlobals$Outbound,
  z.ZodTypeDef,
  ListAdjustmentsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAdjustmentsGlobals$ {
  /** @deprecated use `ListAdjustmentsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListAdjustmentsGlobals$inboundSchema;
  /** @deprecated use `ListAdjustmentsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListAdjustmentsGlobals$outboundSchema;
  /** @deprecated use `ListAdjustmentsGlobals$Outbound` instead. */
  export type Outbound = ListAdjustmentsGlobals$Outbound;
}

export function listAdjustmentsGlobalsToJSON(
  listAdjustmentsGlobals: ListAdjustmentsGlobals,
): string {
  return JSON.stringify(
    ListAdjustmentsGlobals$outboundSchema.parse(listAdjustmentsGlobals),
  );
}

export function listAdjustmentsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListAdjustmentsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAdjustmentsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAdjustmentsGlobals' from JSON`,
  );
}

/** @internal */
export const ListAdjustmentsRequest$inboundSchema: z.ZodType<
  ListAdjustmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  walletID: z.string().optional(),
});

/** @internal */
export type ListAdjustmentsRequest$Outbound = {
  accountID: string;
  walletID?: string | undefined;
};

/** @internal */
export const ListAdjustmentsRequest$outboundSchema: z.ZodType<
  ListAdjustmentsRequest$Outbound,
  z.ZodTypeDef,
  ListAdjustmentsRequest
> = z.object({
  accountID: z.string(),
  walletID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAdjustmentsRequest$ {
  /** @deprecated use `ListAdjustmentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAdjustmentsRequest$inboundSchema;
  /** @deprecated use `ListAdjustmentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAdjustmentsRequest$outboundSchema;
  /** @deprecated use `ListAdjustmentsRequest$Outbound` instead. */
  export type Outbound = ListAdjustmentsRequest$Outbound;
}

export function listAdjustmentsRequestToJSON(
  listAdjustmentsRequest: ListAdjustmentsRequest,
): string {
  return JSON.stringify(
    ListAdjustmentsRequest$outboundSchema.parse(listAdjustmentsRequest),
  );
}

export function listAdjustmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAdjustmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAdjustmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAdjustmentsRequest' from JSON`,
  );
}

/** @internal */
export const ListAdjustmentsResponse$inboundSchema: z.ZodType<
  ListAdjustmentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Adjustment$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListAdjustmentsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Adjustment$Outbound>;
};

/** @internal */
export const ListAdjustmentsResponse$outboundSchema: z.ZodType<
  ListAdjustmentsResponse$Outbound,
  z.ZodTypeDef,
  ListAdjustmentsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Adjustment$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAdjustmentsResponse$ {
  /** @deprecated use `ListAdjustmentsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAdjustmentsResponse$inboundSchema;
  /** @deprecated use `ListAdjustmentsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAdjustmentsResponse$outboundSchema;
  /** @deprecated use `ListAdjustmentsResponse$Outbound` instead. */
  export type Outbound = ListAdjustmentsResponse$Outbound;
}

export function listAdjustmentsResponseToJSON(
  listAdjustmentsResponse: ListAdjustmentsResponse,
): string {
  return JSON.stringify(
    ListAdjustmentsResponse$outboundSchema.parse(listAdjustmentsResponse),
  );
}

export function listAdjustmentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAdjustmentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAdjustmentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAdjustmentsResponse' from JSON`,
  );
}
