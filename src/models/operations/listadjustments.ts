/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAdjustmentsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListAdjustmentsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  /**
   * A wallet ID to filter adjustments by.
   */
  walletID?: string | undefined;
};

/** @internal */
export const ListAdjustmentsSecurity$inboundSchema: z.ZodType<
  ListAdjustmentsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListAdjustmentsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListAdjustmentsSecurity$outboundSchema: z.ZodType<
  ListAdjustmentsSecurity$Outbound,
  z.ZodTypeDef,
  ListAdjustmentsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAdjustmentsSecurity$ {
  /** @deprecated use `ListAdjustmentsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListAdjustmentsSecurity$inboundSchema;
  /** @deprecated use `ListAdjustmentsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListAdjustmentsSecurity$outboundSchema;
  /** @deprecated use `ListAdjustmentsSecurity$Outbound` instead. */
  export type Outbound = ListAdjustmentsSecurity$Outbound;
}

export function listAdjustmentsSecurityToJSON(
  listAdjustmentsSecurity: ListAdjustmentsSecurity,
): string {
  return JSON.stringify(
    ListAdjustmentsSecurity$outboundSchema.parse(listAdjustmentsSecurity),
  );
}

export function listAdjustmentsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListAdjustmentsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAdjustmentsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAdjustmentsSecurity' from JSON`,
  );
}

/** @internal */
export const ListAdjustmentsRequest$inboundSchema: z.ZodType<
  ListAdjustmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListAdjustmentsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  walletID?: string | undefined;
};

/** @internal */
export const ListAdjustmentsRequest$outboundSchema: z.ZodType<
  ListAdjustmentsRequest$Outbound,
  z.ZodTypeDef,
  ListAdjustmentsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAdjustmentsRequest$ {
  /** @deprecated use `ListAdjustmentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAdjustmentsRequest$inboundSchema;
  /** @deprecated use `ListAdjustmentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAdjustmentsRequest$outboundSchema;
  /** @deprecated use `ListAdjustmentsRequest$Outbound` instead. */
  export type Outbound = ListAdjustmentsRequest$Outbound;
}

export function listAdjustmentsRequestToJSON(
  listAdjustmentsRequest: ListAdjustmentsRequest,
): string {
  return JSON.stringify(
    ListAdjustmentsRequest$outboundSchema.parse(listAdjustmentsRequest),
  );
}

export function listAdjustmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAdjustmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAdjustmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAdjustmentsRequest' from JSON`,
  );
}
