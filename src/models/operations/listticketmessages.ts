/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketMessagesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListTicketMessagesRequest = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  ticketID: string;
};

export type ListTicketMessagesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.TicketMessage>;
};

/** @internal */
export const ListTicketMessagesGlobals$inboundSchema: z.ZodType<
  ListTicketMessagesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListTicketMessagesGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListTicketMessagesGlobals$outboundSchema: z.ZodType<
  ListTicketMessagesGlobals$Outbound,
  z.ZodTypeDef,
  ListTicketMessagesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketMessagesGlobals$ {
  /** @deprecated use `ListTicketMessagesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTicketMessagesGlobals$inboundSchema;
  /** @deprecated use `ListTicketMessagesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTicketMessagesGlobals$outboundSchema;
  /** @deprecated use `ListTicketMessagesGlobals$Outbound` instead. */
  export type Outbound = ListTicketMessagesGlobals$Outbound;
}

export function listTicketMessagesGlobalsToJSON(
  listTicketMessagesGlobals: ListTicketMessagesGlobals,
): string {
  return JSON.stringify(
    ListTicketMessagesGlobals$outboundSchema.parse(listTicketMessagesGlobals),
  );
}

export function listTicketMessagesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketMessagesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketMessagesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketMessagesGlobals' from JSON`,
  );
}

/** @internal */
export const ListTicketMessagesRequest$inboundSchema: z.ZodType<
  ListTicketMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  ticketID: z.string(),
});

/** @internal */
export type ListTicketMessagesRequest$Outbound = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  ticketID: string;
};

/** @internal */
export const ListTicketMessagesRequest$outboundSchema: z.ZodType<
  ListTicketMessagesRequest$Outbound,
  z.ZodTypeDef,
  ListTicketMessagesRequest
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  ticketID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketMessagesRequest$ {
  /** @deprecated use `ListTicketMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketMessagesRequest$inboundSchema;
  /** @deprecated use `ListTicketMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketMessagesRequest$outboundSchema;
  /** @deprecated use `ListTicketMessagesRequest$Outbound` instead. */
  export type Outbound = ListTicketMessagesRequest$Outbound;
}

export function listTicketMessagesRequestToJSON(
  listTicketMessagesRequest: ListTicketMessagesRequest,
): string {
  return JSON.stringify(
    ListTicketMessagesRequest$outboundSchema.parse(listTicketMessagesRequest),
  );
}

export function listTicketMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketMessagesRequest' from JSON`,
  );
}

/** @internal */
export const ListTicketMessagesResponse$inboundSchema: z.ZodType<
  ListTicketMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.TicketMessage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListTicketMessagesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.TicketMessage$Outbound>;
};

/** @internal */
export const ListTicketMessagesResponse$outboundSchema: z.ZodType<
  ListTicketMessagesResponse$Outbound,
  z.ZodTypeDef,
  ListTicketMessagesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.TicketMessage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketMessagesResponse$ {
  /** @deprecated use `ListTicketMessagesResponse$inboundSchema` instead. */
  export const inboundSchema = ListTicketMessagesResponse$inboundSchema;
  /** @deprecated use `ListTicketMessagesResponse$outboundSchema` instead. */
  export const outboundSchema = ListTicketMessagesResponse$outboundSchema;
  /** @deprecated use `ListTicketMessagesResponse$Outbound` instead. */
  export type Outbound = ListTicketMessagesResponse$Outbound;
}

export function listTicketMessagesResponseToJSON(
  listTicketMessagesResponse: ListTicketMessagesResponse,
): string {
  return JSON.stringify(
    ListTicketMessagesResponse$outboundSchema.parse(listTicketMessagesResponse),
  );
}

export function listTicketMessagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketMessagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketMessagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketMessagesResponse' from JSON`,
  );
}
