/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransferSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CreateTransferRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Prevents duplicate transfers from being created.
   */
  xIdempotencyKey: string;
  /**
   * Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
   *
   * @remarks
   * asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
   */
  xWaitFor?: components.TransferWaitFor | undefined;
  /**
   * The merchant's Moov account ID.
   */
  accountID: string;
  createTransfer: components.CreateTransfer;
};

/**
 * The request completed successfully.
 */
export type CreateTransferResponseBody =
  | components.AsyncTransfer
  | components.Transfer;

export type CreateTransferResponse =
  | components.AsyncTransfer
  | components.Transfer
  | components.AsyncTransfer
  | components.Transfer;

/** @internal */
export const CreateTransferSecurity$inboundSchema: z.ZodType<
  CreateTransferSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CreateTransferSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CreateTransferSecurity$outboundSchema: z.ZodType<
  CreateTransferSecurity$Outbound,
  z.ZodTypeDef,
  CreateTransferSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferSecurity$ {
  /** @deprecated use `CreateTransferSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateTransferSecurity$inboundSchema;
  /** @deprecated use `CreateTransferSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateTransferSecurity$outboundSchema;
  /** @deprecated use `CreateTransferSecurity$Outbound` instead. */
  export type Outbound = CreateTransferSecurity$Outbound;
}

export function createTransferSecurityToJSON(
  createTransferSecurity: CreateTransferSecurity,
): string {
  return JSON.stringify(
    CreateTransferSecurity$outboundSchema.parse(createTransferSecurity),
  );
}

export function createTransferSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferSecurity' from JSON`,
  );
}

/** @internal */
export const CreateTransferRequest$inboundSchema: z.ZodType<
  CreateTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  "x-idempotency-key": z.string(),
  "x-wait-for": components.TransferWaitFor$inboundSchema.optional(),
  accountID: z.string(),
  CreateTransfer: components.CreateTransfer$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "x-idempotency-key": "xIdempotencyKey",
    "x-wait-for": "xWaitFor",
    "CreateTransfer": "createTransfer",
  });
});

/** @internal */
export type CreateTransferRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  "x-idempotency-key": string;
  "x-wait-for"?: string | undefined;
  accountID: string;
  CreateTransfer: components.CreateTransfer$Outbound;
};

/** @internal */
export const CreateTransferRequest$outboundSchema: z.ZodType<
  CreateTransferRequest$Outbound,
  z.ZodTypeDef,
  CreateTransferRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  xIdempotencyKey: z.string(),
  xWaitFor: components.TransferWaitFor$outboundSchema.optional(),
  accountID: z.string(),
  createTransfer: components.CreateTransfer$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    xIdempotencyKey: "x-idempotency-key",
    xWaitFor: "x-wait-for",
    createTransfer: "CreateTransfer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferRequest$ {
  /** @deprecated use `CreateTransferRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransferRequest$inboundSchema;
  /** @deprecated use `CreateTransferRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransferRequest$outboundSchema;
  /** @deprecated use `CreateTransferRequest$Outbound` instead. */
  export type Outbound = CreateTransferRequest$Outbound;
}

export function createTransferRequestToJSON(
  createTransferRequest: CreateTransferRequest,
): string {
  return JSON.stringify(
    CreateTransferRequest$outboundSchema.parse(createTransferRequest),
  );
}

export function createTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferRequest' from JSON`,
  );
}

/** @internal */
export const CreateTransferResponseBody$inboundSchema: z.ZodType<
  CreateTransferResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncTransfer$inboundSchema,
  components.Transfer$inboundSchema,
]);

/** @internal */
export type CreateTransferResponseBody$Outbound =
  | components.AsyncTransfer$Outbound
  | components.Transfer$Outbound;

/** @internal */
export const CreateTransferResponseBody$outboundSchema: z.ZodType<
  CreateTransferResponseBody$Outbound,
  z.ZodTypeDef,
  CreateTransferResponseBody
> = z.union([
  components.AsyncTransfer$outboundSchema,
  components.Transfer$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferResponseBody$ {
  /** @deprecated use `CreateTransferResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateTransferResponseBody$inboundSchema;
  /** @deprecated use `CreateTransferResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateTransferResponseBody$outboundSchema;
  /** @deprecated use `CreateTransferResponseBody$Outbound` instead. */
  export type Outbound = CreateTransferResponseBody$Outbound;
}

export function createTransferResponseBodyToJSON(
  createTransferResponseBody: CreateTransferResponseBody,
): string {
  return JSON.stringify(
    CreateTransferResponseBody$outboundSchema.parse(createTransferResponseBody),
  );
}

export function createTransferResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateTransferResponse$inboundSchema: z.ZodType<
  CreateTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncTransfer$inboundSchema,
  components.Transfer$inboundSchema,
  z.union([
    components.AsyncTransfer$inboundSchema,
    components.Transfer$inboundSchema,
  ]),
]);

/** @internal */
export type CreateTransferResponse$Outbound =
  | components.AsyncTransfer$Outbound
  | components.Transfer$Outbound
  | components.AsyncTransfer$Outbound
  | components.Transfer$Outbound;

/** @internal */
export const CreateTransferResponse$outboundSchema: z.ZodType<
  CreateTransferResponse$Outbound,
  z.ZodTypeDef,
  CreateTransferResponse
> = z.union([
  components.AsyncTransfer$outboundSchema,
  components.Transfer$outboundSchema,
  z.union([
    components.AsyncTransfer$outboundSchema,
    components.Transfer$outboundSchema,
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferResponse$ {
  /** @deprecated use `CreateTransferResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTransferResponse$inboundSchema;
  /** @deprecated use `CreateTransferResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTransferResponse$outboundSchema;
  /** @deprecated use `CreateTransferResponse$Outbound` instead. */
  export type Outbound = CreateTransferResponse$Outbound;
}

export function createTransferResponseToJSON(
  createTransferResponse: CreateTransferResponse,
): string {
  return JSON.stringify(
    CreateTransferResponse$outboundSchema.parse(createTransferResponse),
  );
}

export function createTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferResponse' from JSON`,
  );
}
