/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTerminalApplicationsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListTerminalApplicationsRequest = {};

export type ListTerminalApplicationsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.TerminalApplication>;
};

/** @internal */
export const ListTerminalApplicationsGlobals$inboundSchema: z.ZodType<
  ListTerminalApplicationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListTerminalApplicationsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListTerminalApplicationsGlobals$outboundSchema: z.ZodType<
  ListTerminalApplicationsGlobals$Outbound,
  z.ZodTypeDef,
  ListTerminalApplicationsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalApplicationsGlobals$ {
  /** @deprecated use `ListTerminalApplicationsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTerminalApplicationsGlobals$inboundSchema;
  /** @deprecated use `ListTerminalApplicationsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTerminalApplicationsGlobals$outboundSchema;
  /** @deprecated use `ListTerminalApplicationsGlobals$Outbound` instead. */
  export type Outbound = ListTerminalApplicationsGlobals$Outbound;
}

export function listTerminalApplicationsGlobalsToJSON(
  listTerminalApplicationsGlobals: ListTerminalApplicationsGlobals,
): string {
  return JSON.stringify(
    ListTerminalApplicationsGlobals$outboundSchema.parse(
      listTerminalApplicationsGlobals,
    ),
  );
}

export function listTerminalApplicationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalApplicationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalApplicationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalApplicationsGlobals' from JSON`,
  );
}

/** @internal */
export const ListTerminalApplicationsRequest$inboundSchema: z.ZodType<
  ListTerminalApplicationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListTerminalApplicationsRequest$Outbound = {};

/** @internal */
export const ListTerminalApplicationsRequest$outboundSchema: z.ZodType<
  ListTerminalApplicationsRequest$Outbound,
  z.ZodTypeDef,
  ListTerminalApplicationsRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalApplicationsRequest$ {
  /** @deprecated use `ListTerminalApplicationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTerminalApplicationsRequest$inboundSchema;
  /** @deprecated use `ListTerminalApplicationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTerminalApplicationsRequest$outboundSchema;
  /** @deprecated use `ListTerminalApplicationsRequest$Outbound` instead. */
  export type Outbound = ListTerminalApplicationsRequest$Outbound;
}

export function listTerminalApplicationsRequestToJSON(
  listTerminalApplicationsRequest: ListTerminalApplicationsRequest,
): string {
  return JSON.stringify(
    ListTerminalApplicationsRequest$outboundSchema.parse(
      listTerminalApplicationsRequest,
    ),
  );
}

export function listTerminalApplicationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalApplicationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalApplicationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalApplicationsRequest' from JSON`,
  );
}

/** @internal */
export const ListTerminalApplicationsResponse$inboundSchema: z.ZodType<
  ListTerminalApplicationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.TerminalApplication$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListTerminalApplicationsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.TerminalApplication$Outbound>;
};

/** @internal */
export const ListTerminalApplicationsResponse$outboundSchema: z.ZodType<
  ListTerminalApplicationsResponse$Outbound,
  z.ZodTypeDef,
  ListTerminalApplicationsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.TerminalApplication$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalApplicationsResponse$ {
  /** @deprecated use `ListTerminalApplicationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTerminalApplicationsResponse$inboundSchema;
  /** @deprecated use `ListTerminalApplicationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTerminalApplicationsResponse$outboundSchema;
  /** @deprecated use `ListTerminalApplicationsResponse$Outbound` instead. */
  export type Outbound = ListTerminalApplicationsResponse$Outbound;
}

export function listTerminalApplicationsResponseToJSON(
  listTerminalApplicationsResponse: ListTerminalApplicationsResponse,
): string {
  return JSON.stringify(
    ListTerminalApplicationsResponse$outboundSchema.parse(
      listTerminalApplicationsResponse,
    ),
  );
}

export function listTerminalApplicationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalApplicationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalApplicationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalApplicationsResponse' from JSON`,
  );
}
