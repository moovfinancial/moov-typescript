/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountTerminalApplicationsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListAccountTerminalApplicationsRequest = {
  accountID: string;
};

export type ListAccountTerminalApplicationsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.AccountTerminalApplication>;
};

/** @internal */
export const ListAccountTerminalApplicationsGlobals$inboundSchema: z.ZodType<
  ListAccountTerminalApplicationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListAccountTerminalApplicationsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListAccountTerminalApplicationsGlobals$outboundSchema: z.ZodType<
  ListAccountTerminalApplicationsGlobals$Outbound,
  z.ZodTypeDef,
  ListAccountTerminalApplicationsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountTerminalApplicationsGlobals$ {
  /** @deprecated use `ListAccountTerminalApplicationsGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountTerminalApplicationsGlobals$inboundSchema;
  /** @deprecated use `ListAccountTerminalApplicationsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountTerminalApplicationsGlobals$outboundSchema;
  /** @deprecated use `ListAccountTerminalApplicationsGlobals$Outbound` instead. */
  export type Outbound = ListAccountTerminalApplicationsGlobals$Outbound;
}

export function listAccountTerminalApplicationsGlobalsToJSON(
  listAccountTerminalApplicationsGlobals:
    ListAccountTerminalApplicationsGlobals,
): string {
  return JSON.stringify(
    ListAccountTerminalApplicationsGlobals$outboundSchema.parse(
      listAccountTerminalApplicationsGlobals,
    ),
  );
}

export function listAccountTerminalApplicationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountTerminalApplicationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountTerminalApplicationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountTerminalApplicationsGlobals' from JSON`,
  );
}

/** @internal */
export const ListAccountTerminalApplicationsRequest$inboundSchema: z.ZodType<
  ListAccountTerminalApplicationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type ListAccountTerminalApplicationsRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const ListAccountTerminalApplicationsRequest$outboundSchema: z.ZodType<
  ListAccountTerminalApplicationsRequest$Outbound,
  z.ZodTypeDef,
  ListAccountTerminalApplicationsRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountTerminalApplicationsRequest$ {
  /** @deprecated use `ListAccountTerminalApplicationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountTerminalApplicationsRequest$inboundSchema;
  /** @deprecated use `ListAccountTerminalApplicationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountTerminalApplicationsRequest$outboundSchema;
  /** @deprecated use `ListAccountTerminalApplicationsRequest$Outbound` instead. */
  export type Outbound = ListAccountTerminalApplicationsRequest$Outbound;
}

export function listAccountTerminalApplicationsRequestToJSON(
  listAccountTerminalApplicationsRequest:
    ListAccountTerminalApplicationsRequest,
): string {
  return JSON.stringify(
    ListAccountTerminalApplicationsRequest$outboundSchema.parse(
      listAccountTerminalApplicationsRequest,
    ),
  );
}

export function listAccountTerminalApplicationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountTerminalApplicationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountTerminalApplicationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountTerminalApplicationsRequest' from JSON`,
  );
}

/** @internal */
export const ListAccountTerminalApplicationsResponse$inboundSchema: z.ZodType<
  ListAccountTerminalApplicationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.array(components.AccountTerminalApplication$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListAccountTerminalApplicationsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.AccountTerminalApplication$Outbound>;
};

/** @internal */
export const ListAccountTerminalApplicationsResponse$outboundSchema: z.ZodType<
  ListAccountTerminalApplicationsResponse$Outbound,
  z.ZodTypeDef,
  ListAccountTerminalApplicationsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.AccountTerminalApplication$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountTerminalApplicationsResponse$ {
  /** @deprecated use `ListAccountTerminalApplicationsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountTerminalApplicationsResponse$inboundSchema;
  /** @deprecated use `ListAccountTerminalApplicationsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountTerminalApplicationsResponse$outboundSchema;
  /** @deprecated use `ListAccountTerminalApplicationsResponse$Outbound` instead. */
  export type Outbound = ListAccountTerminalApplicationsResponse$Outbound;
}

export function listAccountTerminalApplicationsResponseToJSON(
  listAccountTerminalApplicationsResponse:
    ListAccountTerminalApplicationsResponse,
): string {
  return JSON.stringify(
    ListAccountTerminalApplicationsResponse$outboundSchema.parse(
      listAccountTerminalApplicationsResponse,
    ),
  );
}

export function listAccountTerminalApplicationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAccountTerminalApplicationsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountTerminalApplicationsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAccountTerminalApplicationsResponse' from JSON`,
  );
}
