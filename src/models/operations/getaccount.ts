/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAccountGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetAccountRequest = {
  accountID: string;
};

export type GetAccountResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Account;
};

/** @internal */
export const GetAccountGlobals$inboundSchema: z.ZodType<
  GetAccountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetAccountGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetAccountGlobals$outboundSchema: z.ZodType<
  GetAccountGlobals$Outbound,
  z.ZodTypeDef,
  GetAccountGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountGlobals$ {
  /** @deprecated use `GetAccountGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAccountGlobals$inboundSchema;
  /** @deprecated use `GetAccountGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAccountGlobals$outboundSchema;
  /** @deprecated use `GetAccountGlobals$Outbound` instead. */
  export type Outbound = GetAccountGlobals$Outbound;
}

export function getAccountGlobalsToJSON(
  getAccountGlobals: GetAccountGlobals,
): string {
  return JSON.stringify(
    GetAccountGlobals$outboundSchema.parse(getAccountGlobals),
  );
}

export function getAccountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountGlobals' from JSON`,
  );
}

/** @internal */
export const GetAccountRequest$inboundSchema: z.ZodType<
  GetAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type GetAccountRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const GetAccountRequest$outboundSchema: z.ZodType<
  GetAccountRequest$Outbound,
  z.ZodTypeDef,
  GetAccountRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountRequest$ {
  /** @deprecated use `GetAccountRequest$inboundSchema` instead. */
  export const inboundSchema = GetAccountRequest$inboundSchema;
  /** @deprecated use `GetAccountRequest$outboundSchema` instead. */
  export const outboundSchema = GetAccountRequest$outboundSchema;
  /** @deprecated use `GetAccountRequest$Outbound` instead. */
  export type Outbound = GetAccountRequest$Outbound;
}

export function getAccountRequestToJSON(
  getAccountRequest: GetAccountRequest,
): string {
  return JSON.stringify(
    GetAccountRequest$outboundSchema.parse(getAccountRequest),
  );
}

export function getAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountRequest' from JSON`,
  );
}

/** @internal */
export const GetAccountResponse$inboundSchema: z.ZodType<
  GetAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Account$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetAccountResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Account$Outbound;
};

/** @internal */
export const GetAccountResponse$outboundSchema: z.ZodType<
  GetAccountResponse$Outbound,
  z.ZodTypeDef,
  GetAccountResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Account$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountResponse$ {
  /** @deprecated use `GetAccountResponse$inboundSchema` instead. */
  export const inboundSchema = GetAccountResponse$inboundSchema;
  /** @deprecated use `GetAccountResponse$outboundSchema` instead. */
  export const outboundSchema = GetAccountResponse$outboundSchema;
  /** @deprecated use `GetAccountResponse$Outbound` instead. */
  export type Outbound = GetAccountResponse$Outbound;
}

export function getAccountResponseToJSON(
  getAccountResponse: GetAccountResponse,
): string {
  return JSON.stringify(
    GetAccountResponse$outboundSchema.parse(getAccountResponse),
  );
}

export function getAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountResponse' from JSON`,
  );
}
