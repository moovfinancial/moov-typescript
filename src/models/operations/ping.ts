/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PingGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type PingRequest = {};

export type PingResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const PingGlobals$inboundSchema: z.ZodType<
  PingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type PingGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const PingGlobals$outboundSchema: z.ZodType<
  PingGlobals$Outbound,
  z.ZodTypeDef,
  PingGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PingGlobals$ {
  /** @deprecated use `PingGlobals$inboundSchema` instead. */
  export const inboundSchema = PingGlobals$inboundSchema;
  /** @deprecated use `PingGlobals$outboundSchema` instead. */
  export const outboundSchema = PingGlobals$outboundSchema;
  /** @deprecated use `PingGlobals$Outbound` instead. */
  export type Outbound = PingGlobals$Outbound;
}

export function pingGlobalsToJSON(pingGlobals: PingGlobals): string {
  return JSON.stringify(PingGlobals$outboundSchema.parse(pingGlobals));
}

export function pingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<PingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PingGlobals' from JSON`,
  );
}

/** @internal */
export const PingRequest$inboundSchema: z.ZodType<
  PingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PingRequest$Outbound = {};

/** @internal */
export const PingRequest$outboundSchema: z.ZodType<
  PingRequest$Outbound,
  z.ZodTypeDef,
  PingRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PingRequest$ {
  /** @deprecated use `PingRequest$inboundSchema` instead. */
  export const inboundSchema = PingRequest$inboundSchema;
  /** @deprecated use `PingRequest$outboundSchema` instead. */
  export const outboundSchema = PingRequest$outboundSchema;
  /** @deprecated use `PingRequest$Outbound` instead. */
  export type Outbound = PingRequest$Outbound;
}

export function pingRequestToJSON(pingRequest: PingRequest): string {
  return JSON.stringify(PingRequest$outboundSchema.parse(pingRequest));
}

export function pingRequestFromJSON(
  jsonString: string,
): SafeParseResult<PingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PingRequest' from JSON`,
  );
}

/** @internal */
export const PingResponse$inboundSchema: z.ZodType<
  PingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type PingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const PingResponse$outboundSchema: z.ZodType<
  PingResponse$Outbound,
  z.ZodTypeDef,
  PingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PingResponse$ {
  /** @deprecated use `PingResponse$inboundSchema` instead. */
  export const inboundSchema = PingResponse$inboundSchema;
  /** @deprecated use `PingResponse$outboundSchema` instead. */
  export const outboundSchema = PingResponse$outboundSchema;
  /** @deprecated use `PingResponse$Outbound` instead. */
  export type Outbound = PingResponse$Outbound;
}

export function pingResponseToJSON(pingResponse: PingResponse): string {
  return JSON.stringify(PingResponse$outboundSchema.parse(pingResponse));
}

export function pingResponseFromJSON(
  jsonString: string,
): SafeParseResult<PingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PingResponse' from JSON`,
  );
}
