/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateFeePlanAgreementsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CreateFeePlanAgreementsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  createFeePlanAgreement: components.CreateFeePlanAgreement;
};

/** @internal */
export const CreateFeePlanAgreementsSecurity$inboundSchema: z.ZodType<
  CreateFeePlanAgreementsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CreateFeePlanAgreementsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CreateFeePlanAgreementsSecurity$outboundSchema: z.ZodType<
  CreateFeePlanAgreementsSecurity$Outbound,
  z.ZodTypeDef,
  CreateFeePlanAgreementsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFeePlanAgreementsSecurity$ {
  /** @deprecated use `CreateFeePlanAgreementsSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateFeePlanAgreementsSecurity$inboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateFeePlanAgreementsSecurity$outboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsSecurity$Outbound` instead. */
  export type Outbound = CreateFeePlanAgreementsSecurity$Outbound;
}

export function createFeePlanAgreementsSecurityToJSON(
  createFeePlanAgreementsSecurity: CreateFeePlanAgreementsSecurity,
): string {
  return JSON.stringify(
    CreateFeePlanAgreementsSecurity$outboundSchema.parse(
      createFeePlanAgreementsSecurity,
    ),
  );
}

export function createFeePlanAgreementsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateFeePlanAgreementsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFeePlanAgreementsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFeePlanAgreementsSecurity' from JSON`,
  );
}

/** @internal */
export const CreateFeePlanAgreementsRequest$inboundSchema: z.ZodType<
  CreateFeePlanAgreementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  CreateFeePlanAgreement: components.CreateFeePlanAgreement$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CreateFeePlanAgreement": "createFeePlanAgreement",
  });
});

/** @internal */
export type CreateFeePlanAgreementsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  CreateFeePlanAgreement: components.CreateFeePlanAgreement$Outbound;
};

/** @internal */
export const CreateFeePlanAgreementsRequest$outboundSchema: z.ZodType<
  CreateFeePlanAgreementsRequest$Outbound,
  z.ZodTypeDef,
  CreateFeePlanAgreementsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  createFeePlanAgreement: components.CreateFeePlanAgreement$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    createFeePlanAgreement: "CreateFeePlanAgreement",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFeePlanAgreementsRequest$ {
  /** @deprecated use `CreateFeePlanAgreementsRequest$inboundSchema` instead. */
  export const inboundSchema = CreateFeePlanAgreementsRequest$inboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsRequest$outboundSchema` instead. */
  export const outboundSchema = CreateFeePlanAgreementsRequest$outboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsRequest$Outbound` instead. */
  export type Outbound = CreateFeePlanAgreementsRequest$Outbound;
}

export function createFeePlanAgreementsRequestToJSON(
  createFeePlanAgreementsRequest: CreateFeePlanAgreementsRequest,
): string {
  return JSON.stringify(
    CreateFeePlanAgreementsRequest$outboundSchema.parse(
      createFeePlanAgreementsRequest,
    ),
  );
}

export function createFeePlanAgreementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateFeePlanAgreementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFeePlanAgreementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFeePlanAgreementsRequest' from JSON`,
  );
}
