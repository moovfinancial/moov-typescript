/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateFeePlanAgreementsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateFeePlanAgreementsRequest = {
  accountID: string;
  createFeePlanAgreement: components.CreateFeePlanAgreement;
};

export type CreateFeePlanAgreementsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.FeePlanAgreement;
};

/** @internal */
export const CreateFeePlanAgreementsGlobals$inboundSchema: z.ZodType<
  CreateFeePlanAgreementsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type CreateFeePlanAgreementsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const CreateFeePlanAgreementsGlobals$outboundSchema: z.ZodType<
  CreateFeePlanAgreementsGlobals$Outbound,
  z.ZodTypeDef,
  CreateFeePlanAgreementsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFeePlanAgreementsGlobals$ {
  /** @deprecated use `CreateFeePlanAgreementsGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateFeePlanAgreementsGlobals$inboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateFeePlanAgreementsGlobals$outboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsGlobals$Outbound` instead. */
  export type Outbound = CreateFeePlanAgreementsGlobals$Outbound;
}

export function createFeePlanAgreementsGlobalsToJSON(
  createFeePlanAgreementsGlobals: CreateFeePlanAgreementsGlobals,
): string {
  return JSON.stringify(
    CreateFeePlanAgreementsGlobals$outboundSchema.parse(
      createFeePlanAgreementsGlobals,
    ),
  );
}

export function createFeePlanAgreementsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateFeePlanAgreementsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFeePlanAgreementsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFeePlanAgreementsGlobals' from JSON`,
  );
}

/** @internal */
export const CreateFeePlanAgreementsRequest$inboundSchema: z.ZodType<
  CreateFeePlanAgreementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  CreateFeePlanAgreement: components.CreateFeePlanAgreement$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateFeePlanAgreement": "createFeePlanAgreement",
  });
});

/** @internal */
export type CreateFeePlanAgreementsRequest$Outbound = {
  accountID: string;
  CreateFeePlanAgreement: components.CreateFeePlanAgreement$Outbound;
};

/** @internal */
export const CreateFeePlanAgreementsRequest$outboundSchema: z.ZodType<
  CreateFeePlanAgreementsRequest$Outbound,
  z.ZodTypeDef,
  CreateFeePlanAgreementsRequest
> = z.object({
  accountID: z.string(),
  createFeePlanAgreement: components.CreateFeePlanAgreement$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createFeePlanAgreement: "CreateFeePlanAgreement",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFeePlanAgreementsRequest$ {
  /** @deprecated use `CreateFeePlanAgreementsRequest$inboundSchema` instead. */
  export const inboundSchema = CreateFeePlanAgreementsRequest$inboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsRequest$outboundSchema` instead. */
  export const outboundSchema = CreateFeePlanAgreementsRequest$outboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsRequest$Outbound` instead. */
  export type Outbound = CreateFeePlanAgreementsRequest$Outbound;
}

export function createFeePlanAgreementsRequestToJSON(
  createFeePlanAgreementsRequest: CreateFeePlanAgreementsRequest,
): string {
  return JSON.stringify(
    CreateFeePlanAgreementsRequest$outboundSchema.parse(
      createFeePlanAgreementsRequest,
    ),
  );
}

export function createFeePlanAgreementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateFeePlanAgreementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFeePlanAgreementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFeePlanAgreementsRequest' from JSON`,
  );
}

/** @internal */
export const CreateFeePlanAgreementsResponse$inboundSchema: z.ZodType<
  CreateFeePlanAgreementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.FeePlanAgreement$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateFeePlanAgreementsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.FeePlanAgreement$Outbound;
};

/** @internal */
export const CreateFeePlanAgreementsResponse$outboundSchema: z.ZodType<
  CreateFeePlanAgreementsResponse$Outbound,
  z.ZodTypeDef,
  CreateFeePlanAgreementsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.FeePlanAgreement$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFeePlanAgreementsResponse$ {
  /** @deprecated use `CreateFeePlanAgreementsResponse$inboundSchema` instead. */
  export const inboundSchema = CreateFeePlanAgreementsResponse$inboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsResponse$outboundSchema` instead. */
  export const outboundSchema = CreateFeePlanAgreementsResponse$outboundSchema;
  /** @deprecated use `CreateFeePlanAgreementsResponse$Outbound` instead. */
  export type Outbound = CreateFeePlanAgreementsResponse$Outbound;
}

export function createFeePlanAgreementsResponseToJSON(
  createFeePlanAgreementsResponse: CreateFeePlanAgreementsResponse,
): string {
  return JSON.stringify(
    CreateFeePlanAgreementsResponse$outboundSchema.parse(
      createFeePlanAgreementsResponse,
    ),
  );
}

export function createFeePlanAgreementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateFeePlanAgreementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFeePlanAgreementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFeePlanAgreementsResponse' from JSON`,
  );
}
