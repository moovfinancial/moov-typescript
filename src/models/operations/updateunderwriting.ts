/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateUnderwritingSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateUnderwritingRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  updateUnderwriting: components.UpdateUnderwriting;
};

/** @internal */
export const UpdateUnderwritingSecurity$inboundSchema: z.ZodType<
  UpdateUnderwritingSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateUnderwritingSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateUnderwritingSecurity$outboundSchema: z.ZodType<
  UpdateUnderwritingSecurity$Outbound,
  z.ZodTypeDef,
  UpdateUnderwritingSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUnderwritingSecurity$ {
  /** @deprecated use `UpdateUnderwritingSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateUnderwritingSecurity$inboundSchema;
  /** @deprecated use `UpdateUnderwritingSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateUnderwritingSecurity$outboundSchema;
  /** @deprecated use `UpdateUnderwritingSecurity$Outbound` instead. */
  export type Outbound = UpdateUnderwritingSecurity$Outbound;
}

export function updateUnderwritingSecurityToJSON(
  updateUnderwritingSecurity: UpdateUnderwritingSecurity,
): string {
  return JSON.stringify(
    UpdateUnderwritingSecurity$outboundSchema.parse(updateUnderwritingSecurity),
  );
}

export function updateUnderwritingSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUnderwritingSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUnderwritingSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUnderwritingSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateUnderwritingRequest$inboundSchema: z.ZodType<
  UpdateUnderwritingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  UpdateUnderwriting: components.UpdateUnderwriting$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpdateUnderwriting": "updateUnderwriting",
  });
});

/** @internal */
export type UpdateUnderwritingRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  UpdateUnderwriting: components.UpdateUnderwriting$Outbound;
};

/** @internal */
export const UpdateUnderwritingRequest$outboundSchema: z.ZodType<
  UpdateUnderwritingRequest$Outbound,
  z.ZodTypeDef,
  UpdateUnderwritingRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  updateUnderwriting: components.UpdateUnderwriting$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    updateUnderwriting: "UpdateUnderwriting",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUnderwritingRequest$ {
  /** @deprecated use `UpdateUnderwritingRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUnderwritingRequest$inboundSchema;
  /** @deprecated use `UpdateUnderwritingRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUnderwritingRequest$outboundSchema;
  /** @deprecated use `UpdateUnderwritingRequest$Outbound` instead. */
  export type Outbound = UpdateUnderwritingRequest$Outbound;
}

export function updateUnderwritingRequestToJSON(
  updateUnderwritingRequest: UpdateUnderwritingRequest,
): string {
  return JSON.stringify(
    UpdateUnderwritingRequest$outboundSchema.parse(updateUnderwritingRequest),
  );
}

export function updateUnderwritingRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUnderwritingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUnderwritingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUnderwritingRequest' from JSON`,
  );
}
