/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRefundsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListRefundsRequest = {
  accountID: string;
  /**
   * Identifier for the transfer.
   */
  transferID: string;
};

export type ListRefundsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.CardAcquiringRefund>;
};

/** @internal */
export const ListRefundsGlobals$inboundSchema: z.ZodType<
  ListRefundsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListRefundsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListRefundsGlobals$outboundSchema: z.ZodType<
  ListRefundsGlobals$Outbound,
  z.ZodTypeDef,
  ListRefundsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsGlobals$ {
  /** @deprecated use `ListRefundsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListRefundsGlobals$inboundSchema;
  /** @deprecated use `ListRefundsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListRefundsGlobals$outboundSchema;
  /** @deprecated use `ListRefundsGlobals$Outbound` instead. */
  export type Outbound = ListRefundsGlobals$Outbound;
}

export function listRefundsGlobalsToJSON(
  listRefundsGlobals: ListRefundsGlobals,
): string {
  return JSON.stringify(
    ListRefundsGlobals$outboundSchema.parse(listRefundsGlobals),
  );
}

export function listRefundsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsGlobals' from JSON`,
  );
}

/** @internal */
export const ListRefundsRequest$inboundSchema: z.ZodType<
  ListRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
});

/** @internal */
export type ListRefundsRequest$Outbound = {
  accountID: string;
  transferID: string;
};

/** @internal */
export const ListRefundsRequest$outboundSchema: z.ZodType<
  ListRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListRefundsRequest
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRequest$ {
  /** @deprecated use `ListRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRequest$inboundSchema;
  /** @deprecated use `ListRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRequest$outboundSchema;
  /** @deprecated use `ListRefundsRequest$Outbound` instead. */
  export type Outbound = ListRefundsRequest$Outbound;
}

export function listRefundsRequestToJSON(
  listRefundsRequest: ListRefundsRequest,
): string {
  return JSON.stringify(
    ListRefundsRequest$outboundSchema.parse(listRefundsRequest),
  );
}

export function listRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListRefundsResponse$inboundSchema: z.ZodType<
  ListRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.CardAcquiringRefund$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListRefundsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.CardAcquiringRefund$Outbound>;
};

/** @internal */
export const ListRefundsResponse$outboundSchema: z.ZodType<
  ListRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListRefundsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.CardAcquiringRefund$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsResponse$ {
  /** @deprecated use `ListRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListRefundsResponse$inboundSchema;
  /** @deprecated use `ListRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListRefundsResponse$outboundSchema;
  /** @deprecated use `ListRefundsResponse$Outbound` instead. */
  export type Outbound = ListRefundsResponse$Outbound;
}

export function listRefundsResponseToJSON(
  listRefundsResponse: ListRefundsResponse,
): string {
  return JSON.stringify(
    ListRefundsResponse$outboundSchema.parse(listRefundsResponse),
  );
}

export function listRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsResponse' from JSON`,
  );
}
