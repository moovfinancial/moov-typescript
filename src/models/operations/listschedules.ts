/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSchedulesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListSchedulesRequest = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
};

export type ListSchedulesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.ScheduleResponse>;
};

/** @internal */
export const ListSchedulesGlobals$inboundSchema: z.ZodType<
  ListSchedulesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListSchedulesGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListSchedulesGlobals$outboundSchema: z.ZodType<
  ListSchedulesGlobals$Outbound,
  z.ZodTypeDef,
  ListSchedulesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesGlobals$ {
  /** @deprecated use `ListSchedulesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListSchedulesGlobals$inboundSchema;
  /** @deprecated use `ListSchedulesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListSchedulesGlobals$outboundSchema;
  /** @deprecated use `ListSchedulesGlobals$Outbound` instead. */
  export type Outbound = ListSchedulesGlobals$Outbound;
}

export function listSchedulesGlobalsToJSON(
  listSchedulesGlobals: ListSchedulesGlobals,
): string {
  return JSON.stringify(
    ListSchedulesGlobals$outboundSchema.parse(listSchedulesGlobals),
  );
}

export function listSchedulesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListSchedulesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSchedulesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSchedulesGlobals' from JSON`,
  );
}

/** @internal */
export const ListSchedulesRequest$inboundSchema: z.ZodType<
  ListSchedulesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
});

/** @internal */
export type ListSchedulesRequest$Outbound = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
};

/** @internal */
export const ListSchedulesRequest$outboundSchema: z.ZodType<
  ListSchedulesRequest$Outbound,
  z.ZodTypeDef,
  ListSchedulesRequest
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesRequest$ {
  /** @deprecated use `ListSchedulesRequest$inboundSchema` instead. */
  export const inboundSchema = ListSchedulesRequest$inboundSchema;
  /** @deprecated use `ListSchedulesRequest$outboundSchema` instead. */
  export const outboundSchema = ListSchedulesRequest$outboundSchema;
  /** @deprecated use `ListSchedulesRequest$Outbound` instead. */
  export type Outbound = ListSchedulesRequest$Outbound;
}

export function listSchedulesRequestToJSON(
  listSchedulesRequest: ListSchedulesRequest,
): string {
  return JSON.stringify(
    ListSchedulesRequest$outboundSchema.parse(listSchedulesRequest),
  );
}

export function listSchedulesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSchedulesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSchedulesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSchedulesRequest' from JSON`,
  );
}

/** @internal */
export const ListSchedulesResponse$inboundSchema: z.ZodType<
  ListSchedulesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.ScheduleResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListSchedulesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.ScheduleResponse$Outbound>;
};

/** @internal */
export const ListSchedulesResponse$outboundSchema: z.ZodType<
  ListSchedulesResponse$Outbound,
  z.ZodTypeDef,
  ListSchedulesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.ScheduleResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesResponse$ {
  /** @deprecated use `ListSchedulesResponse$inboundSchema` instead. */
  export const inboundSchema = ListSchedulesResponse$inboundSchema;
  /** @deprecated use `ListSchedulesResponse$outboundSchema` instead. */
  export const outboundSchema = ListSchedulesResponse$outboundSchema;
  /** @deprecated use `ListSchedulesResponse$Outbound` instead. */
  export type Outbound = ListSchedulesResponse$Outbound;
}

export function listSchedulesResponseToJSON(
  listSchedulesResponse: ListSchedulesResponse,
): string {
  return JSON.stringify(
    ListSchedulesResponse$outboundSchema.parse(listSchedulesResponse),
  );
}

export function listSchedulesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSchedulesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSchedulesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSchedulesResponse' from JSON`,
  );
}
