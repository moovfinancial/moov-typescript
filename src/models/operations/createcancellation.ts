/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCancellationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateCancellationRequest = {
  /**
   * The partner's Moov account ID.
   */
  accountID: string;
  /**
   * The transfer ID to cancel.
   */
  transferID: string;
};

export type CreateCancellationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Cancellation;
};

/** @internal */
export const CreateCancellationGlobals$inboundSchema: z.ZodType<
  CreateCancellationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateCancellationGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateCancellationGlobals$outboundSchema: z.ZodType<
  CreateCancellationGlobals$Outbound,
  z.ZodTypeDef,
  CreateCancellationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCancellationGlobals$ {
  /** @deprecated use `CreateCancellationGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateCancellationGlobals$inboundSchema;
  /** @deprecated use `CreateCancellationGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateCancellationGlobals$outboundSchema;
  /** @deprecated use `CreateCancellationGlobals$Outbound` instead. */
  export type Outbound = CreateCancellationGlobals$Outbound;
}

export function createCancellationGlobalsToJSON(
  createCancellationGlobals: CreateCancellationGlobals,
): string {
  return JSON.stringify(
    CreateCancellationGlobals$outboundSchema.parse(createCancellationGlobals),
  );
}

export function createCancellationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateCancellationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCancellationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCancellationGlobals' from JSON`,
  );
}

/** @internal */
export const CreateCancellationRequest$inboundSchema: z.ZodType<
  CreateCancellationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
});

/** @internal */
export type CreateCancellationRequest$Outbound = {
  accountID: string;
  transferID: string;
};

/** @internal */
export const CreateCancellationRequest$outboundSchema: z.ZodType<
  CreateCancellationRequest$Outbound,
  z.ZodTypeDef,
  CreateCancellationRequest
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCancellationRequest$ {
  /** @deprecated use `CreateCancellationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCancellationRequest$inboundSchema;
  /** @deprecated use `CreateCancellationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCancellationRequest$outboundSchema;
  /** @deprecated use `CreateCancellationRequest$Outbound` instead. */
  export type Outbound = CreateCancellationRequest$Outbound;
}

export function createCancellationRequestToJSON(
  createCancellationRequest: CreateCancellationRequest,
): string {
  return JSON.stringify(
    CreateCancellationRequest$outboundSchema.parse(createCancellationRequest),
  );
}

export function createCancellationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCancellationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCancellationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCancellationRequest' from JSON`,
  );
}

/** @internal */
export const CreateCancellationResponse$inboundSchema: z.ZodType<
  CreateCancellationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Cancellation$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateCancellationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Cancellation$Outbound;
};

/** @internal */
export const CreateCancellationResponse$outboundSchema: z.ZodType<
  CreateCancellationResponse$Outbound,
  z.ZodTypeDef,
  CreateCancellationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Cancellation$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCancellationResponse$ {
  /** @deprecated use `CreateCancellationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCancellationResponse$inboundSchema;
  /** @deprecated use `CreateCancellationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCancellationResponse$outboundSchema;
  /** @deprecated use `CreateCancellationResponse$Outbound` instead. */
  export type Outbound = CreateCancellationResponse$Outbound;
}

export function createCancellationResponseToJSON(
  createCancellationResponse: CreateCancellationResponse,
): string {
  return JSON.stringify(
    CreateCancellationResponse$outboundSchema.parse(createCancellationResponse),
  );
}

export function createCancellationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCancellationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCancellationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCancellationResponse' from JSON`,
  );
}
