/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPublicImageRequest = {
  ifNoneMatch?: string | undefined;
  publicID: string;
  /**
   * Optional parameter to request a resized version of the image (WxH).
   *
   * @remarks
   *
   * If either dimension is 0, the image will be scaled proportionally based on
   * the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
   * of 400x400 will be used if this parameter is omitted.
   */
  size?: string | undefined;
};

export type GetPublicImageResponseResult =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

export type GetPublicImageResponse = {
  headers: { [k: string]: Array<string> };
  result:
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetPublicImageRequest$inboundSchema: z.ZodType<
  GetPublicImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "if-none-match": z.string().optional(),
  publicID: z.string(),
  size: z.string().default("400x400"),
}).transform((v) => {
  return remap$(v, {
    "if-none-match": "ifNoneMatch",
  });
});

/** @internal */
export type GetPublicImageRequest$Outbound = {
  "if-none-match"?: string | undefined;
  publicID: string;
  size: string;
};

/** @internal */
export const GetPublicImageRequest$outboundSchema: z.ZodType<
  GetPublicImageRequest$Outbound,
  z.ZodTypeDef,
  GetPublicImageRequest
> = z.object({
  ifNoneMatch: z.string().optional(),
  publicID: z.string(),
  size: z.string().default("400x400"),
}).transform((v) => {
  return remap$(v, {
    ifNoneMatch: "if-none-match",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublicImageRequest$ {
  /** @deprecated use `GetPublicImageRequest$inboundSchema` instead. */
  export const inboundSchema = GetPublicImageRequest$inboundSchema;
  /** @deprecated use `GetPublicImageRequest$outboundSchema` instead. */
  export const outboundSchema = GetPublicImageRequest$outboundSchema;
  /** @deprecated use `GetPublicImageRequest$Outbound` instead. */
  export type Outbound = GetPublicImageRequest$Outbound;
}

export function getPublicImageRequestToJSON(
  getPublicImageRequest: GetPublicImageRequest,
): string {
  return JSON.stringify(
    GetPublicImageRequest$outboundSchema.parse(getPublicImageRequest),
  );
}

export function getPublicImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPublicImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPublicImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublicImageRequest' from JSON`,
  );
}

/** @internal */
export const GetPublicImageResponseResult$inboundSchema: z.ZodType<
  GetPublicImageResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetPublicImageResponseResult$Outbound =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetPublicImageResponseResult$outboundSchema: z.ZodType<
  GetPublicImageResponseResult$Outbound,
  z.ZodTypeDef,
  GetPublicImageResponseResult
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublicImageResponseResult$ {
  /** @deprecated use `GetPublicImageResponseResult$inboundSchema` instead. */
  export const inboundSchema = GetPublicImageResponseResult$inboundSchema;
  /** @deprecated use `GetPublicImageResponseResult$outboundSchema` instead. */
  export const outboundSchema = GetPublicImageResponseResult$outboundSchema;
  /** @deprecated use `GetPublicImageResponseResult$Outbound` instead. */
  export type Outbound = GetPublicImageResponseResult$Outbound;
}

export function getPublicImageResponseResultToJSON(
  getPublicImageResponseResult: GetPublicImageResponseResult,
): string {
  return JSON.stringify(
    GetPublicImageResponseResult$outboundSchema.parse(
      getPublicImageResponseResult,
    ),
  );
}

export function getPublicImageResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<GetPublicImageResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPublicImageResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublicImageResponseResult' from JSON`,
  );
}

/** @internal */
export const GetPublicImageResponse$inboundSchema: z.ZodType<
  GetPublicImageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetPublicImageResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetPublicImageResponse$outboundSchema: z.ZodType<
  GetPublicImageResponse$Outbound,
  z.ZodTypeDef,
  GetPublicImageResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublicImageResponse$ {
  /** @deprecated use `GetPublicImageResponse$inboundSchema` instead. */
  export const inboundSchema = GetPublicImageResponse$inboundSchema;
  /** @deprecated use `GetPublicImageResponse$outboundSchema` instead. */
  export const outboundSchema = GetPublicImageResponse$outboundSchema;
  /** @deprecated use `GetPublicImageResponse$Outbound` instead. */
  export type Outbound = GetPublicImageResponse$Outbound;
}

export function getPublicImageResponseToJSON(
  getPublicImageResponse: GetPublicImageResponse,
): string {
  return JSON.stringify(
    GetPublicImageResponse$outboundSchema.parse(getPublicImageResponse),
  );
}

export function getPublicImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPublicImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPublicImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublicImageResponse' from JSON`,
  );
}
