/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadDisputeEvidenceTextGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UploadDisputeEvidenceTextRequest = {
  accountID: string;
  disputeID: string;
  createEvidenceText: components.CreateEvidenceText;
};

export type UploadDisputeEvidenceTextResponse = {
  headers: { [k: string]: Array<string> };
  result: components.EvidenceTextResponse;
};

/** @internal */
export const UploadDisputeEvidenceTextGlobals$inboundSchema: z.ZodType<
  UploadDisputeEvidenceTextGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UploadDisputeEvidenceTextGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UploadDisputeEvidenceTextGlobals$outboundSchema: z.ZodType<
  UploadDisputeEvidenceTextGlobals$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceTextGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceTextGlobals$ {
  /** @deprecated use `UploadDisputeEvidenceTextGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceTextGlobals$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadDisputeEvidenceTextGlobals$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextGlobals$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceTextGlobals$Outbound;
}

export function uploadDisputeEvidenceTextGlobalsToJSON(
  uploadDisputeEvidenceTextGlobals: UploadDisputeEvidenceTextGlobals,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceTextGlobals$outboundSchema.parse(
      uploadDisputeEvidenceTextGlobals,
    ),
  );
}

export function uploadDisputeEvidenceTextGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceTextGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceTextGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceTextGlobals' from JSON`,
  );
}

/** @internal */
export const UploadDisputeEvidenceTextRequest$inboundSchema: z.ZodType<
  UploadDisputeEvidenceTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  CreateEvidenceText: components.CreateEvidenceText$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateEvidenceText": "createEvidenceText",
  });
});

/** @internal */
export type UploadDisputeEvidenceTextRequest$Outbound = {
  accountID: string;
  disputeID: string;
  CreateEvidenceText: components.CreateEvidenceText$Outbound;
};

/** @internal */
export const UploadDisputeEvidenceTextRequest$outboundSchema: z.ZodType<
  UploadDisputeEvidenceTextRequest$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceTextRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  createEvidenceText: components.CreateEvidenceText$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createEvidenceText: "CreateEvidenceText",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceTextRequest$ {
  /** @deprecated use `UploadDisputeEvidenceTextRequest$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceTextRequest$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextRequest$outboundSchema` instead. */
  export const outboundSchema = UploadDisputeEvidenceTextRequest$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextRequest$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceTextRequest$Outbound;
}

export function uploadDisputeEvidenceTextRequestToJSON(
  uploadDisputeEvidenceTextRequest: UploadDisputeEvidenceTextRequest,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceTextRequest$outboundSchema.parse(
      uploadDisputeEvidenceTextRequest,
    ),
  );
}

export function uploadDisputeEvidenceTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceTextRequest' from JSON`,
  );
}

/** @internal */
export const UploadDisputeEvidenceTextResponse$inboundSchema: z.ZodType<
  UploadDisputeEvidenceTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.EvidenceTextResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UploadDisputeEvidenceTextResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.EvidenceTextResponse$Outbound;
};

/** @internal */
export const UploadDisputeEvidenceTextResponse$outboundSchema: z.ZodType<
  UploadDisputeEvidenceTextResponse$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceTextResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.EvidenceTextResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceTextResponse$ {
  /** @deprecated use `UploadDisputeEvidenceTextResponse$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceTextResponse$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    UploadDisputeEvidenceTextResponse$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextResponse$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceTextResponse$Outbound;
}

export function uploadDisputeEvidenceTextResponseToJSON(
  uploadDisputeEvidenceTextResponse: UploadDisputeEvidenceTextResponse,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceTextResponse$outboundSchema.parse(
      uploadDisputeEvidenceTextResponse,
    ),
  );
}

export function uploadDisputeEvidenceTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceTextResponse' from JSON`,
  );
}
