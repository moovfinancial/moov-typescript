/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadDisputeEvidenceTextSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UploadDisputeEvidenceTextRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  disputeID: string;
  createEvidenceText: components.CreateEvidenceText;
};

/** @internal */
export const UploadDisputeEvidenceTextSecurity$inboundSchema: z.ZodType<
  UploadDisputeEvidenceTextSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UploadDisputeEvidenceTextSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UploadDisputeEvidenceTextSecurity$outboundSchema: z.ZodType<
  UploadDisputeEvidenceTextSecurity$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceTextSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceTextSecurity$ {
  /** @deprecated use `UploadDisputeEvidenceTextSecurity$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceTextSecurity$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextSecurity$outboundSchema` instead. */
  export const outboundSchema =
    UploadDisputeEvidenceTextSecurity$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextSecurity$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceTextSecurity$Outbound;
}

export function uploadDisputeEvidenceTextSecurityToJSON(
  uploadDisputeEvidenceTextSecurity: UploadDisputeEvidenceTextSecurity,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceTextSecurity$outboundSchema.parse(
      uploadDisputeEvidenceTextSecurity,
    ),
  );
}

export function uploadDisputeEvidenceTextSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceTextSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceTextSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceTextSecurity' from JSON`,
  );
}

/** @internal */
export const UploadDisputeEvidenceTextRequest$inboundSchema: z.ZodType<
  UploadDisputeEvidenceTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
  CreateEvidenceText: components.CreateEvidenceText$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CreateEvidenceText": "createEvidenceText",
  });
});

/** @internal */
export type UploadDisputeEvidenceTextRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  disputeID: string;
  CreateEvidenceText: components.CreateEvidenceText$Outbound;
};

/** @internal */
export const UploadDisputeEvidenceTextRequest$outboundSchema: z.ZodType<
  UploadDisputeEvidenceTextRequest$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceTextRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
  createEvidenceText: components.CreateEvidenceText$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    createEvidenceText: "CreateEvidenceText",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceTextRequest$ {
  /** @deprecated use `UploadDisputeEvidenceTextRequest$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceTextRequest$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextRequest$outboundSchema` instead. */
  export const outboundSchema = UploadDisputeEvidenceTextRequest$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceTextRequest$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceTextRequest$Outbound;
}

export function uploadDisputeEvidenceTextRequestToJSON(
  uploadDisputeEvidenceTextRequest: UploadDisputeEvidenceTextRequest,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceTextRequest$outboundSchema.parse(
      uploadDisputeEvidenceTextRequest,
    ),
  );
}

export function uploadDisputeEvidenceTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceTextRequest' from JSON`,
  );
}
