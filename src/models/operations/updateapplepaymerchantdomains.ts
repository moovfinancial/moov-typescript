/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateApplePayMerchantDomainsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateApplePayMerchantDomainsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * ID of the Moov account representing the merchant.
   */
  accountID: string;
  updateApplePayMerchantDomains: components.UpdateApplePayMerchantDomains;
};

/** @internal */
export const UpdateApplePayMerchantDomainsSecurity$inboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateApplePayMerchantDomainsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateApplePayMerchantDomainsSecurity$outboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsSecurity$Outbound,
  z.ZodTypeDef,
  UpdateApplePayMerchantDomainsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplePayMerchantDomainsSecurity$ {
  /** @deprecated use `UpdateApplePayMerchantDomainsSecurity$inboundSchema` instead. */
  export const inboundSchema =
    UpdateApplePayMerchantDomainsSecurity$inboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsSecurity$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApplePayMerchantDomainsSecurity$outboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsSecurity$Outbound` instead. */
  export type Outbound = UpdateApplePayMerchantDomainsSecurity$Outbound;
}

export function updateApplePayMerchantDomainsSecurityToJSON(
  updateApplePayMerchantDomainsSecurity: UpdateApplePayMerchantDomainsSecurity,
): string {
  return JSON.stringify(
    UpdateApplePayMerchantDomainsSecurity$outboundSchema.parse(
      updateApplePayMerchantDomainsSecurity,
    ),
  );
}

export function updateApplePayMerchantDomainsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplePayMerchantDomainsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateApplePayMerchantDomainsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplePayMerchantDomainsSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateApplePayMerchantDomainsRequest$inboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  UpdateApplePayMerchantDomains:
    components.UpdateApplePayMerchantDomains$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpdateApplePayMerchantDomains": "updateApplePayMerchantDomains",
  });
});

/** @internal */
export type UpdateApplePayMerchantDomainsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  UpdateApplePayMerchantDomains:
    components.UpdateApplePayMerchantDomains$Outbound;
};

/** @internal */
export const UpdateApplePayMerchantDomainsRequest$outboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsRequest$Outbound,
  z.ZodTypeDef,
  UpdateApplePayMerchantDomainsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  updateApplePayMerchantDomains:
    components.UpdateApplePayMerchantDomains$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    updateApplePayMerchantDomains: "UpdateApplePayMerchantDomains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplePayMerchantDomainsRequest$ {
  /** @deprecated use `UpdateApplePayMerchantDomainsRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateApplePayMerchantDomainsRequest$inboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApplePayMerchantDomainsRequest$outboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsRequest$Outbound` instead. */
  export type Outbound = UpdateApplePayMerchantDomainsRequest$Outbound;
}

export function updateApplePayMerchantDomainsRequestToJSON(
  updateApplePayMerchantDomainsRequest: UpdateApplePayMerchantDomainsRequest,
): string {
  return JSON.stringify(
    UpdateApplePayMerchantDomainsRequest$outboundSchema.parse(
      updateApplePayMerchantDomainsRequest,
    ),
  );
}

export function updateApplePayMerchantDomainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplePayMerchantDomainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateApplePayMerchantDomainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplePayMerchantDomainsRequest' from JSON`,
  );
}
