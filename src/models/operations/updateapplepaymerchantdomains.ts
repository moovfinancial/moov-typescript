/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateApplePayMerchantDomainsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateApplePayMerchantDomainsRequest = {
  /**
   * ID of the Moov account representing the merchant.
   */
  accountID: string;
  updateApplePayMerchantDomains: components.UpdateApplePayMerchantDomains;
};

export type UpdateApplePayMerchantDomainsResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const UpdateApplePayMerchantDomainsGlobals$inboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateApplePayMerchantDomainsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UpdateApplePayMerchantDomainsGlobals$outboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsGlobals$Outbound,
  z.ZodTypeDef,
  UpdateApplePayMerchantDomainsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplePayMerchantDomainsGlobals$ {
  /** @deprecated use `UpdateApplePayMerchantDomainsGlobals$inboundSchema` instead. */
  export const inboundSchema =
    UpdateApplePayMerchantDomainsGlobals$inboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApplePayMerchantDomainsGlobals$outboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsGlobals$Outbound` instead. */
  export type Outbound = UpdateApplePayMerchantDomainsGlobals$Outbound;
}

export function updateApplePayMerchantDomainsGlobalsToJSON(
  updateApplePayMerchantDomainsGlobals: UpdateApplePayMerchantDomainsGlobals,
): string {
  return JSON.stringify(
    UpdateApplePayMerchantDomainsGlobals$outboundSchema.parse(
      updateApplePayMerchantDomainsGlobals,
    ),
  );
}

export function updateApplePayMerchantDomainsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplePayMerchantDomainsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateApplePayMerchantDomainsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplePayMerchantDomainsGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateApplePayMerchantDomainsRequest$inboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  UpdateApplePayMerchantDomains:
    components.UpdateApplePayMerchantDomains$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateApplePayMerchantDomains": "updateApplePayMerchantDomains",
  });
});

/** @internal */
export type UpdateApplePayMerchantDomainsRequest$Outbound = {
  accountID: string;
  UpdateApplePayMerchantDomains:
    components.UpdateApplePayMerchantDomains$Outbound;
};

/** @internal */
export const UpdateApplePayMerchantDomainsRequest$outboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsRequest$Outbound,
  z.ZodTypeDef,
  UpdateApplePayMerchantDomainsRequest
> = z.object({
  accountID: z.string(),
  updateApplePayMerchantDomains:
    components.UpdateApplePayMerchantDomains$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateApplePayMerchantDomains: "UpdateApplePayMerchantDomains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplePayMerchantDomainsRequest$ {
  /** @deprecated use `UpdateApplePayMerchantDomainsRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateApplePayMerchantDomainsRequest$inboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApplePayMerchantDomainsRequest$outboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsRequest$Outbound` instead. */
  export type Outbound = UpdateApplePayMerchantDomainsRequest$Outbound;
}

export function updateApplePayMerchantDomainsRequestToJSON(
  updateApplePayMerchantDomainsRequest: UpdateApplePayMerchantDomainsRequest,
): string {
  return JSON.stringify(
    UpdateApplePayMerchantDomainsRequest$outboundSchema.parse(
      updateApplePayMerchantDomainsRequest,
    ),
  );
}

export function updateApplePayMerchantDomainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplePayMerchantDomainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateApplePayMerchantDomainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplePayMerchantDomainsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateApplePayMerchantDomainsResponse$inboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type UpdateApplePayMerchantDomainsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const UpdateApplePayMerchantDomainsResponse$outboundSchema: z.ZodType<
  UpdateApplePayMerchantDomainsResponse$Outbound,
  z.ZodTypeDef,
  UpdateApplePayMerchantDomainsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplePayMerchantDomainsResponse$ {
  /** @deprecated use `UpdateApplePayMerchantDomainsResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateApplePayMerchantDomainsResponse$inboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApplePayMerchantDomainsResponse$outboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomainsResponse$Outbound` instead. */
  export type Outbound = UpdateApplePayMerchantDomainsResponse$Outbound;
}

export function updateApplePayMerchantDomainsResponseToJSON(
  updateApplePayMerchantDomainsResponse: UpdateApplePayMerchantDomainsResponse,
): string {
  return JSON.stringify(
    UpdateApplePayMerchantDomainsResponse$outboundSchema.parse(
      updateApplePayMerchantDomainsResponse,
    ),
  );
}

export function updateApplePayMerchantDomainsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplePayMerchantDomainsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateApplePayMerchantDomainsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplePayMerchantDomainsResponse' from JSON`,
  );
}
