/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateImageGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateImageRequest = {
  accountID: string;
  imageID: string;
  imageUpdateRequestMultiPart: components.ImageUpdateRequestMultiPart;
};

export type UpdateImageResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ImageMetadata;
};

/** @internal */
export const UpdateImageGlobals$inboundSchema: z.ZodType<
  UpdateImageGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateImageGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateImageGlobals$outboundSchema: z.ZodType<
  UpdateImageGlobals$Outbound,
  z.ZodTypeDef,
  UpdateImageGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateImageGlobals$ {
  /** @deprecated use `UpdateImageGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateImageGlobals$inboundSchema;
  /** @deprecated use `UpdateImageGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateImageGlobals$outboundSchema;
  /** @deprecated use `UpdateImageGlobals$Outbound` instead. */
  export type Outbound = UpdateImageGlobals$Outbound;
}

export function updateImageGlobalsToJSON(
  updateImageGlobals: UpdateImageGlobals,
): string {
  return JSON.stringify(
    UpdateImageGlobals$outboundSchema.parse(updateImageGlobals),
  );
}

export function updateImageGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateImageGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateImageGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateImageGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateImageRequest$inboundSchema: z.ZodType<
  UpdateImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
  ImageUpdateRequestMultiPart:
    components.ImageUpdateRequestMultiPart$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ImageUpdateRequestMultiPart": "imageUpdateRequestMultiPart",
  });
});

/** @internal */
export type UpdateImageRequest$Outbound = {
  accountID: string;
  imageID: string;
  ImageUpdateRequestMultiPart: components.ImageUpdateRequestMultiPart$Outbound;
};

/** @internal */
export const UpdateImageRequest$outboundSchema: z.ZodType<
  UpdateImageRequest$Outbound,
  z.ZodTypeDef,
  UpdateImageRequest
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
  imageUpdateRequestMultiPart:
    components.ImageUpdateRequestMultiPart$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    imageUpdateRequestMultiPart: "ImageUpdateRequestMultiPart",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateImageRequest$ {
  /** @deprecated use `UpdateImageRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateImageRequest$inboundSchema;
  /** @deprecated use `UpdateImageRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateImageRequest$outboundSchema;
  /** @deprecated use `UpdateImageRequest$Outbound` instead. */
  export type Outbound = UpdateImageRequest$Outbound;
}

export function updateImageRequestToJSON(
  updateImageRequest: UpdateImageRequest,
): string {
  return JSON.stringify(
    UpdateImageRequest$outboundSchema.parse(updateImageRequest),
  );
}

export function updateImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateImageRequest' from JSON`,
  );
}

/** @internal */
export const UpdateImageResponse$inboundSchema: z.ZodType<
  UpdateImageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ImageMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateImageResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ImageMetadata$Outbound;
};

/** @internal */
export const UpdateImageResponse$outboundSchema: z.ZodType<
  UpdateImageResponse$Outbound,
  z.ZodTypeDef,
  UpdateImageResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ImageMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateImageResponse$ {
  /** @deprecated use `UpdateImageResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateImageResponse$inboundSchema;
  /** @deprecated use `UpdateImageResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateImageResponse$outboundSchema;
  /** @deprecated use `UpdateImageResponse$Outbound` instead. */
  export type Outbound = UpdateImageResponse$Outbound;
}

export function updateImageResponseToJSON(
  updateImageResponse: UpdateImageResponse,
): string {
  return JSON.stringify(
    UpdateImageResponse$outboundSchema.parse(updateImageResponse),
  );
}

export function updateImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateImageResponse' from JSON`,
  );
}
