/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddCapabilitiesSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type AddCapabilitiesRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  addCapabilities: components.AddCapabilities;
};

/** @internal */
export const AddCapabilitiesSecurity$inboundSchema: z.ZodType<
  AddCapabilitiesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type AddCapabilitiesSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const AddCapabilitiesSecurity$outboundSchema: z.ZodType<
  AddCapabilitiesSecurity$Outbound,
  z.ZodTypeDef,
  AddCapabilitiesSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCapabilitiesSecurity$ {
  /** @deprecated use `AddCapabilitiesSecurity$inboundSchema` instead. */
  export const inboundSchema = AddCapabilitiesSecurity$inboundSchema;
  /** @deprecated use `AddCapabilitiesSecurity$outboundSchema` instead. */
  export const outboundSchema = AddCapabilitiesSecurity$outboundSchema;
  /** @deprecated use `AddCapabilitiesSecurity$Outbound` instead. */
  export type Outbound = AddCapabilitiesSecurity$Outbound;
}

export function addCapabilitiesSecurityToJSON(
  addCapabilitiesSecurity: AddCapabilitiesSecurity,
): string {
  return JSON.stringify(
    AddCapabilitiesSecurity$outboundSchema.parse(addCapabilitiesSecurity),
  );
}

export function addCapabilitiesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AddCapabilitiesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCapabilitiesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCapabilitiesSecurity' from JSON`,
  );
}

/** @internal */
export const AddCapabilitiesRequest$inboundSchema: z.ZodType<
  AddCapabilitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  AddCapabilities: components.AddCapabilities$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "AddCapabilities": "addCapabilities",
  });
});

/** @internal */
export type AddCapabilitiesRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  AddCapabilities: components.AddCapabilities$Outbound;
};

/** @internal */
export const AddCapabilitiesRequest$outboundSchema: z.ZodType<
  AddCapabilitiesRequest$Outbound,
  z.ZodTypeDef,
  AddCapabilitiesRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  addCapabilities: components.AddCapabilities$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    addCapabilities: "AddCapabilities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCapabilitiesRequest$ {
  /** @deprecated use `AddCapabilitiesRequest$inboundSchema` instead. */
  export const inboundSchema = AddCapabilitiesRequest$inboundSchema;
  /** @deprecated use `AddCapabilitiesRequest$outboundSchema` instead. */
  export const outboundSchema = AddCapabilitiesRequest$outboundSchema;
  /** @deprecated use `AddCapabilitiesRequest$Outbound` instead. */
  export type Outbound = AddCapabilitiesRequest$Outbound;
}

export function addCapabilitiesRequestToJSON(
  addCapabilitiesRequest: AddCapabilitiesRequest,
): string {
  return JSON.stringify(
    AddCapabilitiesRequest$outboundSchema.parse(addCapabilitiesRequest),
  );
}

export function addCapabilitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddCapabilitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCapabilitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCapabilitiesRequest' from JSON`,
  );
}
