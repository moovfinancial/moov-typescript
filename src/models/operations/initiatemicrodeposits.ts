/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InitiateMicroDepositsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type InitiateMicroDepositsRequest = {
  accountID: string;
  bankAccountID: string;
};

export type InitiateMicroDepositsResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateMicroDepositsGlobals$inboundSchema: z.ZodType<
  InitiateMicroDepositsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type InitiateMicroDepositsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const InitiateMicroDepositsGlobals$outboundSchema: z.ZodType<
  InitiateMicroDepositsGlobals$Outbound,
  z.ZodTypeDef,
  InitiateMicroDepositsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateMicroDepositsGlobals$ {
  /** @deprecated use `InitiateMicroDepositsGlobals$inboundSchema` instead. */
  export const inboundSchema = InitiateMicroDepositsGlobals$inboundSchema;
  /** @deprecated use `InitiateMicroDepositsGlobals$outboundSchema` instead. */
  export const outboundSchema = InitiateMicroDepositsGlobals$outboundSchema;
  /** @deprecated use `InitiateMicroDepositsGlobals$Outbound` instead. */
  export type Outbound = InitiateMicroDepositsGlobals$Outbound;
}

export function initiateMicroDepositsGlobalsToJSON(
  initiateMicroDepositsGlobals: InitiateMicroDepositsGlobals,
): string {
  return JSON.stringify(
    InitiateMicroDepositsGlobals$outboundSchema.parse(
      initiateMicroDepositsGlobals,
    ),
  );
}

export function initiateMicroDepositsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<InitiateMicroDepositsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateMicroDepositsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateMicroDepositsGlobals' from JSON`,
  );
}

/** @internal */
export const InitiateMicroDepositsRequest$inboundSchema: z.ZodType<
  InitiateMicroDepositsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
});

/** @internal */
export type InitiateMicroDepositsRequest$Outbound = {
  accountID: string;
  bankAccountID: string;
};

/** @internal */
export const InitiateMicroDepositsRequest$outboundSchema: z.ZodType<
  InitiateMicroDepositsRequest$Outbound,
  z.ZodTypeDef,
  InitiateMicroDepositsRequest
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateMicroDepositsRequest$ {
  /** @deprecated use `InitiateMicroDepositsRequest$inboundSchema` instead. */
  export const inboundSchema = InitiateMicroDepositsRequest$inboundSchema;
  /** @deprecated use `InitiateMicroDepositsRequest$outboundSchema` instead. */
  export const outboundSchema = InitiateMicroDepositsRequest$outboundSchema;
  /** @deprecated use `InitiateMicroDepositsRequest$Outbound` instead. */
  export type Outbound = InitiateMicroDepositsRequest$Outbound;
}

export function initiateMicroDepositsRequestToJSON(
  initiateMicroDepositsRequest: InitiateMicroDepositsRequest,
): string {
  return JSON.stringify(
    InitiateMicroDepositsRequest$outboundSchema.parse(
      initiateMicroDepositsRequest,
    ),
  );
}

export function initiateMicroDepositsRequestFromJSON(
  jsonString: string,
): SafeParseResult<InitiateMicroDepositsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateMicroDepositsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateMicroDepositsRequest' from JSON`,
  );
}

/** @internal */
export const InitiateMicroDepositsResponse$inboundSchema: z.ZodType<
  InitiateMicroDepositsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type InitiateMicroDepositsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateMicroDepositsResponse$outboundSchema: z.ZodType<
  InitiateMicroDepositsResponse$Outbound,
  z.ZodTypeDef,
  InitiateMicroDepositsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateMicroDepositsResponse$ {
  /** @deprecated use `InitiateMicroDepositsResponse$inboundSchema` instead. */
  export const inboundSchema = InitiateMicroDepositsResponse$inboundSchema;
  /** @deprecated use `InitiateMicroDepositsResponse$outboundSchema` instead. */
  export const outboundSchema = InitiateMicroDepositsResponse$outboundSchema;
  /** @deprecated use `InitiateMicroDepositsResponse$Outbound` instead. */
  export type Outbound = InitiateMicroDepositsResponse$Outbound;
}

export function initiateMicroDepositsResponseToJSON(
  initiateMicroDepositsResponse: InitiateMicroDepositsResponse,
): string {
  return JSON.stringify(
    InitiateMicroDepositsResponse$outboundSchema.parse(
      initiateMicroDepositsResponse,
    ),
  );
}

export function initiateMicroDepositsResponseFromJSON(
  jsonString: string,
): SafeParseResult<InitiateMicroDepositsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateMicroDepositsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateMicroDepositsResponse' from JSON`,
  );
}
