/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRepresentativeGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetRepresentativeRequest = {
  /**
   * ID of the account.
   */
  accountID: string;
  /**
   * ID of the representative.
   */
  representativeID: string;
};

export type GetRepresentativeResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Representative;
};

/** @internal */
export const GetRepresentativeGlobals$inboundSchema: z.ZodType<
  GetRepresentativeGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetRepresentativeGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetRepresentativeGlobals$outboundSchema: z.ZodType<
  GetRepresentativeGlobals$Outbound,
  z.ZodTypeDef,
  GetRepresentativeGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRepresentativeGlobals$ {
  /** @deprecated use `GetRepresentativeGlobals$inboundSchema` instead. */
  export const inboundSchema = GetRepresentativeGlobals$inboundSchema;
  /** @deprecated use `GetRepresentativeGlobals$outboundSchema` instead. */
  export const outboundSchema = GetRepresentativeGlobals$outboundSchema;
  /** @deprecated use `GetRepresentativeGlobals$Outbound` instead. */
  export type Outbound = GetRepresentativeGlobals$Outbound;
}

export function getRepresentativeGlobalsToJSON(
  getRepresentativeGlobals: GetRepresentativeGlobals,
): string {
  return JSON.stringify(
    GetRepresentativeGlobals$outboundSchema.parse(getRepresentativeGlobals),
  );
}

export function getRepresentativeGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetRepresentativeGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRepresentativeGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRepresentativeGlobals' from JSON`,
  );
}

/** @internal */
export const GetRepresentativeRequest$inboundSchema: z.ZodType<
  GetRepresentativeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  representativeID: z.string(),
});

/** @internal */
export type GetRepresentativeRequest$Outbound = {
  accountID: string;
  representativeID: string;
};

/** @internal */
export const GetRepresentativeRequest$outboundSchema: z.ZodType<
  GetRepresentativeRequest$Outbound,
  z.ZodTypeDef,
  GetRepresentativeRequest
> = z.object({
  accountID: z.string(),
  representativeID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRepresentativeRequest$ {
  /** @deprecated use `GetRepresentativeRequest$inboundSchema` instead. */
  export const inboundSchema = GetRepresentativeRequest$inboundSchema;
  /** @deprecated use `GetRepresentativeRequest$outboundSchema` instead. */
  export const outboundSchema = GetRepresentativeRequest$outboundSchema;
  /** @deprecated use `GetRepresentativeRequest$Outbound` instead. */
  export type Outbound = GetRepresentativeRequest$Outbound;
}

export function getRepresentativeRequestToJSON(
  getRepresentativeRequest: GetRepresentativeRequest,
): string {
  return JSON.stringify(
    GetRepresentativeRequest$outboundSchema.parse(getRepresentativeRequest),
  );
}

export function getRepresentativeRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRepresentativeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRepresentativeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRepresentativeRequest' from JSON`,
  );
}

/** @internal */
export const GetRepresentativeResponse$inboundSchema: z.ZodType<
  GetRepresentativeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Representative$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetRepresentativeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Representative$Outbound;
};

/** @internal */
export const GetRepresentativeResponse$outboundSchema: z.ZodType<
  GetRepresentativeResponse$Outbound,
  z.ZodTypeDef,
  GetRepresentativeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Representative$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRepresentativeResponse$ {
  /** @deprecated use `GetRepresentativeResponse$inboundSchema` instead. */
  export const inboundSchema = GetRepresentativeResponse$inboundSchema;
  /** @deprecated use `GetRepresentativeResponse$outboundSchema` instead. */
  export const outboundSchema = GetRepresentativeResponse$outboundSchema;
  /** @deprecated use `GetRepresentativeResponse$Outbound` instead. */
  export type Outbound = GetRepresentativeResponse$Outbound;
}

export function getRepresentativeResponseToJSON(
  getRepresentativeResponse: GetRepresentativeResponse,
): string {
  return JSON.stringify(
    GetRepresentativeResponse$outboundSchema.parse(getRepresentativeResponse),
  );
}

export function getRepresentativeResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetRepresentativeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRepresentativeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRepresentativeResponse' from JSON`,
  );
}
