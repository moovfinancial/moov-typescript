/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateRepresentativeSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateRepresentativeRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * ID of the account.
   */
  accountID: string;
  /**
   * ID of the representative.
   */
  representativeID: string;
  updateRepresentative: components.UpdateRepresentative;
};

/** @internal */
export const UpdateRepresentativeSecurity$inboundSchema: z.ZodType<
  UpdateRepresentativeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateRepresentativeSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateRepresentativeSecurity$outboundSchema: z.ZodType<
  UpdateRepresentativeSecurity$Outbound,
  z.ZodTypeDef,
  UpdateRepresentativeSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRepresentativeSecurity$ {
  /** @deprecated use `UpdateRepresentativeSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateRepresentativeSecurity$inboundSchema;
  /** @deprecated use `UpdateRepresentativeSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateRepresentativeSecurity$outboundSchema;
  /** @deprecated use `UpdateRepresentativeSecurity$Outbound` instead. */
  export type Outbound = UpdateRepresentativeSecurity$Outbound;
}

export function updateRepresentativeSecurityToJSON(
  updateRepresentativeSecurity: UpdateRepresentativeSecurity,
): string {
  return JSON.stringify(
    UpdateRepresentativeSecurity$outboundSchema.parse(
      updateRepresentativeSecurity,
    ),
  );
}

export function updateRepresentativeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRepresentativeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRepresentativeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRepresentativeSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateRepresentativeRequest$inboundSchema: z.ZodType<
  UpdateRepresentativeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  representativeID: z.string(),
  UpdateRepresentative: components.UpdateRepresentative$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpdateRepresentative": "updateRepresentative",
  });
});

/** @internal */
export type UpdateRepresentativeRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  representativeID: string;
  UpdateRepresentative: components.UpdateRepresentative$Outbound;
};

/** @internal */
export const UpdateRepresentativeRequest$outboundSchema: z.ZodType<
  UpdateRepresentativeRequest$Outbound,
  z.ZodTypeDef,
  UpdateRepresentativeRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  representativeID: z.string(),
  updateRepresentative: components.UpdateRepresentative$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    updateRepresentative: "UpdateRepresentative",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRepresentativeRequest$ {
  /** @deprecated use `UpdateRepresentativeRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRepresentativeRequest$inboundSchema;
  /** @deprecated use `UpdateRepresentativeRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRepresentativeRequest$outboundSchema;
  /** @deprecated use `UpdateRepresentativeRequest$Outbound` instead. */
  export type Outbound = UpdateRepresentativeRequest$Outbound;
}

export function updateRepresentativeRequestToJSON(
  updateRepresentativeRequest: UpdateRepresentativeRequest,
): string {
  return JSON.stringify(
    UpdateRepresentativeRequest$outboundSchema.parse(
      updateRepresentativeRequest,
    ),
  );
}

export function updateRepresentativeRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRepresentativeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRepresentativeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRepresentativeRequest' from JSON`,
  );
}
