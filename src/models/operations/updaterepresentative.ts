/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateRepresentativeGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateRepresentativeRequest = {
  /**
   * ID of the account.
   */
  accountID: string;
  /**
   * ID of the representative.
   */
  representativeID: string;
  updateRepresentative: components.UpdateRepresentative;
};

export type UpdateRepresentativeResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Representative;
};

/** @internal */
export const UpdateRepresentativeGlobals$inboundSchema: z.ZodType<
  UpdateRepresentativeGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateRepresentativeGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateRepresentativeGlobals$outboundSchema: z.ZodType<
  UpdateRepresentativeGlobals$Outbound,
  z.ZodTypeDef,
  UpdateRepresentativeGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRepresentativeGlobals$ {
  /** @deprecated use `UpdateRepresentativeGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateRepresentativeGlobals$inboundSchema;
  /** @deprecated use `UpdateRepresentativeGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateRepresentativeGlobals$outboundSchema;
  /** @deprecated use `UpdateRepresentativeGlobals$Outbound` instead. */
  export type Outbound = UpdateRepresentativeGlobals$Outbound;
}

export function updateRepresentativeGlobalsToJSON(
  updateRepresentativeGlobals: UpdateRepresentativeGlobals,
): string {
  return JSON.stringify(
    UpdateRepresentativeGlobals$outboundSchema.parse(
      updateRepresentativeGlobals,
    ),
  );
}

export function updateRepresentativeGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRepresentativeGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRepresentativeGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRepresentativeGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateRepresentativeRequest$inboundSchema: z.ZodType<
  UpdateRepresentativeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  representativeID: z.string(),
  UpdateRepresentative: components.UpdateRepresentative$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateRepresentative": "updateRepresentative",
  });
});

/** @internal */
export type UpdateRepresentativeRequest$Outbound = {
  accountID: string;
  representativeID: string;
  UpdateRepresentative: components.UpdateRepresentative$Outbound;
};

/** @internal */
export const UpdateRepresentativeRequest$outboundSchema: z.ZodType<
  UpdateRepresentativeRequest$Outbound,
  z.ZodTypeDef,
  UpdateRepresentativeRequest
> = z.object({
  accountID: z.string(),
  representativeID: z.string(),
  updateRepresentative: components.UpdateRepresentative$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateRepresentative: "UpdateRepresentative",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRepresentativeRequest$ {
  /** @deprecated use `UpdateRepresentativeRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRepresentativeRequest$inboundSchema;
  /** @deprecated use `UpdateRepresentativeRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRepresentativeRequest$outboundSchema;
  /** @deprecated use `UpdateRepresentativeRequest$Outbound` instead. */
  export type Outbound = UpdateRepresentativeRequest$Outbound;
}

export function updateRepresentativeRequestToJSON(
  updateRepresentativeRequest: UpdateRepresentativeRequest,
): string {
  return JSON.stringify(
    UpdateRepresentativeRequest$outboundSchema.parse(
      updateRepresentativeRequest,
    ),
  );
}

export function updateRepresentativeRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRepresentativeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRepresentativeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRepresentativeRequest' from JSON`,
  );
}

/** @internal */
export const UpdateRepresentativeResponse$inboundSchema: z.ZodType<
  UpdateRepresentativeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Representative$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateRepresentativeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Representative$Outbound;
};

/** @internal */
export const UpdateRepresentativeResponse$outboundSchema: z.ZodType<
  UpdateRepresentativeResponse$Outbound,
  z.ZodTypeDef,
  UpdateRepresentativeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Representative$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRepresentativeResponse$ {
  /** @deprecated use `UpdateRepresentativeResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateRepresentativeResponse$inboundSchema;
  /** @deprecated use `UpdateRepresentativeResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateRepresentativeResponse$outboundSchema;
  /** @deprecated use `UpdateRepresentativeResponse$Outbound` instead. */
  export type Outbound = UpdateRepresentativeResponse$Outbound;
}

export function updateRepresentativeResponseToJSON(
  updateRepresentativeResponse: UpdateRepresentativeResponse,
): string {
  return JSON.stringify(
    UpdateRepresentativeResponse$outboundSchema.parse(
      updateRepresentativeResponse,
    ),
  );
}

export function updateRepresentativeResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRepresentativeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRepresentativeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRepresentativeResponse' from JSON`,
  );
}
