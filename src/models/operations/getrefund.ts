/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRefundGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetRefundRequest = {
  /**
   * Identifier for the transfer.
   */
  transferID: string;
  accountID: string;
  /**
   * Identifier for the refund.
   */
  refundID: string;
};

export type GetRefundResponse = {
  headers: { [k: string]: Array<string> };
  result: components.CardAcquiringRefund;
};

/** @internal */
export const GetRefundGlobals$inboundSchema: z.ZodType<
  GetRefundGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetRefundGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetRefundGlobals$outboundSchema: z.ZodType<
  GetRefundGlobals$Outbound,
  z.ZodTypeDef,
  GetRefundGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundGlobals$ {
  /** @deprecated use `GetRefundGlobals$inboundSchema` instead. */
  export const inboundSchema = GetRefundGlobals$inboundSchema;
  /** @deprecated use `GetRefundGlobals$outboundSchema` instead. */
  export const outboundSchema = GetRefundGlobals$outboundSchema;
  /** @deprecated use `GetRefundGlobals$Outbound` instead. */
  export type Outbound = GetRefundGlobals$Outbound;
}

export function getRefundGlobalsToJSON(
  getRefundGlobals: GetRefundGlobals,
): string {
  return JSON.stringify(
    GetRefundGlobals$outboundSchema.parse(getRefundGlobals),
  );
}

export function getRefundGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundGlobals' from JSON`,
  );
}

/** @internal */
export const GetRefundRequest$inboundSchema: z.ZodType<
  GetRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferID: z.string(),
  accountID: z.string(),
  refundID: z.string(),
});

/** @internal */
export type GetRefundRequest$Outbound = {
  transferID: string;
  accountID: string;
  refundID: string;
};

/** @internal */
export const GetRefundRequest$outboundSchema: z.ZodType<
  GetRefundRequest$Outbound,
  z.ZodTypeDef,
  GetRefundRequest
> = z.object({
  transferID: z.string(),
  accountID: z.string(),
  refundID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundRequest$ {
  /** @deprecated use `GetRefundRequest$inboundSchema` instead. */
  export const inboundSchema = GetRefundRequest$inboundSchema;
  /** @deprecated use `GetRefundRequest$outboundSchema` instead. */
  export const outboundSchema = GetRefundRequest$outboundSchema;
  /** @deprecated use `GetRefundRequest$Outbound` instead. */
  export type Outbound = GetRefundRequest$Outbound;
}

export function getRefundRequestToJSON(
  getRefundRequest: GetRefundRequest,
): string {
  return JSON.stringify(
    GetRefundRequest$outboundSchema.parse(getRefundRequest),
  );
}

export function getRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundRequest' from JSON`,
  );
}

/** @internal */
export const GetRefundResponse$inboundSchema: z.ZodType<
  GetRefundResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.CardAcquiringRefund$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetRefundResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.CardAcquiringRefund$Outbound;
};

/** @internal */
export const GetRefundResponse$outboundSchema: z.ZodType<
  GetRefundResponse$Outbound,
  z.ZodTypeDef,
  GetRefundResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.CardAcquiringRefund$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundResponse$ {
  /** @deprecated use `GetRefundResponse$inboundSchema` instead. */
  export const inboundSchema = GetRefundResponse$inboundSchema;
  /** @deprecated use `GetRefundResponse$outboundSchema` instead. */
  export const outboundSchema = GetRefundResponse$outboundSchema;
  /** @deprecated use `GetRefundResponse$Outbound` instead. */
  export type Outbound = GetRefundResponse$Outbound;
}

export function getRefundResponseToJSON(
  getRefundResponse: GetRefundResponse,
): string {
  return JSON.stringify(
    GetRefundResponse$outboundSchema.parse(getRefundResponse),
  );
}

export function getRefundResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundResponse' from JSON`,
  );
}
