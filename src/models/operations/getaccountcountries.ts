/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAccountCountriesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetAccountCountriesRequest = {
  accountID: string;
};

export type GetAccountCountriesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.AccountCountries;
};

/** @internal */
export const GetAccountCountriesGlobals$inboundSchema: z.ZodType<
  GetAccountCountriesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetAccountCountriesGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetAccountCountriesGlobals$outboundSchema: z.ZodType<
  GetAccountCountriesGlobals$Outbound,
  z.ZodTypeDef,
  GetAccountCountriesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountCountriesGlobals$ {
  /** @deprecated use `GetAccountCountriesGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAccountCountriesGlobals$inboundSchema;
  /** @deprecated use `GetAccountCountriesGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAccountCountriesGlobals$outboundSchema;
  /** @deprecated use `GetAccountCountriesGlobals$Outbound` instead. */
  export type Outbound = GetAccountCountriesGlobals$Outbound;
}

export function getAccountCountriesGlobalsToJSON(
  getAccountCountriesGlobals: GetAccountCountriesGlobals,
): string {
  return JSON.stringify(
    GetAccountCountriesGlobals$outboundSchema.parse(getAccountCountriesGlobals),
  );
}

export function getAccountCountriesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountCountriesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountCountriesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountCountriesGlobals' from JSON`,
  );
}

/** @internal */
export const GetAccountCountriesRequest$inboundSchema: z.ZodType<
  GetAccountCountriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type GetAccountCountriesRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const GetAccountCountriesRequest$outboundSchema: z.ZodType<
  GetAccountCountriesRequest$Outbound,
  z.ZodTypeDef,
  GetAccountCountriesRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountCountriesRequest$ {
  /** @deprecated use `GetAccountCountriesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAccountCountriesRequest$inboundSchema;
  /** @deprecated use `GetAccountCountriesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAccountCountriesRequest$outboundSchema;
  /** @deprecated use `GetAccountCountriesRequest$Outbound` instead. */
  export type Outbound = GetAccountCountriesRequest$Outbound;
}

export function getAccountCountriesRequestToJSON(
  getAccountCountriesRequest: GetAccountCountriesRequest,
): string {
  return JSON.stringify(
    GetAccountCountriesRequest$outboundSchema.parse(getAccountCountriesRequest),
  );
}

export function getAccountCountriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountCountriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountCountriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountCountriesRequest' from JSON`,
  );
}

/** @internal */
export const GetAccountCountriesResponse$inboundSchema: z.ZodType<
  GetAccountCountriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.AccountCountries$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetAccountCountriesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.AccountCountries$Outbound;
};

/** @internal */
export const GetAccountCountriesResponse$outboundSchema: z.ZodType<
  GetAccountCountriesResponse$Outbound,
  z.ZodTypeDef,
  GetAccountCountriesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.AccountCountries$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountCountriesResponse$ {
  /** @deprecated use `GetAccountCountriesResponse$inboundSchema` instead. */
  export const inboundSchema = GetAccountCountriesResponse$inboundSchema;
  /** @deprecated use `GetAccountCountriesResponse$outboundSchema` instead. */
  export const outboundSchema = GetAccountCountriesResponse$outboundSchema;
  /** @deprecated use `GetAccountCountriesResponse$Outbound` instead. */
  export type Outbound = GetAccountCountriesResponse$Outbound;
}

export function getAccountCountriesResponseToJSON(
  getAccountCountriesResponse: GetAccountCountriesResponse,
): string {
  return JSON.stringify(
    GetAccountCountriesResponse$outboundSchema.parse(
      getAccountCountriesResponse,
    ),
  );
}

export function getAccountCountriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountCountriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountCountriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountCountriesResponse' from JSON`,
  );
}
