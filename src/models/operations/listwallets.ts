/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListWalletsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListWalletsRequest = {
  /**
   * Optional parameter for filtering wallets by status.
   */
  status?: components.WalletStatus | undefined;
  /**
   * Optional parameter for filtering wallets by type.
   */
  walletType?: components.WalletType | undefined;
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
};

export type ListWalletsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Wallet>;
};

/** @internal */
export const ListWalletsGlobals$inboundSchema: z.ZodType<
  ListWalletsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListWalletsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListWalletsGlobals$outboundSchema: z.ZodType<
  ListWalletsGlobals$Outbound,
  z.ZodTypeDef,
  ListWalletsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWalletsGlobals$ {
  /** @deprecated use `ListWalletsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListWalletsGlobals$inboundSchema;
  /** @deprecated use `ListWalletsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListWalletsGlobals$outboundSchema;
  /** @deprecated use `ListWalletsGlobals$Outbound` instead. */
  export type Outbound = ListWalletsGlobals$Outbound;
}

export function listWalletsGlobalsToJSON(
  listWalletsGlobals: ListWalletsGlobals,
): string {
  return JSON.stringify(
    ListWalletsGlobals$outboundSchema.parse(listWalletsGlobals),
  );
}

export function listWalletsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListWalletsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWalletsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWalletsGlobals' from JSON`,
  );
}

/** @internal */
export const ListWalletsRequest$inboundSchema: z.ZodType<
  ListWalletsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: components.WalletStatus$inboundSchema.optional(),
  walletType: components.WalletType$inboundSchema.optional(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
});

/** @internal */
export type ListWalletsRequest$Outbound = {
  status?: string | undefined;
  walletType?: string | undefined;
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
};

/** @internal */
export const ListWalletsRequest$outboundSchema: z.ZodType<
  ListWalletsRequest$Outbound,
  z.ZodTypeDef,
  ListWalletsRequest
> = z.object({
  status: components.WalletStatus$outboundSchema.optional(),
  walletType: components.WalletType$outboundSchema.optional(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWalletsRequest$ {
  /** @deprecated use `ListWalletsRequest$inboundSchema` instead. */
  export const inboundSchema = ListWalletsRequest$inboundSchema;
  /** @deprecated use `ListWalletsRequest$outboundSchema` instead. */
  export const outboundSchema = ListWalletsRequest$outboundSchema;
  /** @deprecated use `ListWalletsRequest$Outbound` instead. */
  export type Outbound = ListWalletsRequest$Outbound;
}

export function listWalletsRequestToJSON(
  listWalletsRequest: ListWalletsRequest,
): string {
  return JSON.stringify(
    ListWalletsRequest$outboundSchema.parse(listWalletsRequest),
  );
}

export function listWalletsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListWalletsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWalletsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWalletsRequest' from JSON`,
  );
}

/** @internal */
export const ListWalletsResponse$inboundSchema: z.ZodType<
  ListWalletsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Wallet$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListWalletsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Wallet$Outbound>;
};

/** @internal */
export const ListWalletsResponse$outboundSchema: z.ZodType<
  ListWalletsResponse$Outbound,
  z.ZodTypeDef,
  ListWalletsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Wallet$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWalletsResponse$ {
  /** @deprecated use `ListWalletsResponse$inboundSchema` instead. */
  export const inboundSchema = ListWalletsResponse$inboundSchema;
  /** @deprecated use `ListWalletsResponse$outboundSchema` instead. */
  export const outboundSchema = ListWalletsResponse$outboundSchema;
  /** @deprecated use `ListWalletsResponse$Outbound` instead. */
  export type Outbound = ListWalletsResponse$Outbound;
}

export function listWalletsResponseToJSON(
  listWalletsResponse: ListWalletsResponse,
): string {
  return JSON.stringify(
    ListWalletsResponse$outboundSchema.parse(listWalletsResponse),
  );
}

export function listWalletsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListWalletsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWalletsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWalletsResponse' from JSON`,
  );
}
