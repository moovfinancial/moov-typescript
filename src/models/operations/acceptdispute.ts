/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AcceptDisputeGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type AcceptDisputeRequest = {
  accountID: string;
  disputeID: string;
};

export type AcceptDisputeResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Dispute;
};

/** @internal */
export const AcceptDisputeGlobals$inboundSchema: z.ZodType<
  AcceptDisputeGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type AcceptDisputeGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const AcceptDisputeGlobals$outboundSchema: z.ZodType<
  AcceptDisputeGlobals$Outbound,
  z.ZodTypeDef,
  AcceptDisputeGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptDisputeGlobals$ {
  /** @deprecated use `AcceptDisputeGlobals$inboundSchema` instead. */
  export const inboundSchema = AcceptDisputeGlobals$inboundSchema;
  /** @deprecated use `AcceptDisputeGlobals$outboundSchema` instead. */
  export const outboundSchema = AcceptDisputeGlobals$outboundSchema;
  /** @deprecated use `AcceptDisputeGlobals$Outbound` instead. */
  export type Outbound = AcceptDisputeGlobals$Outbound;
}

export function acceptDisputeGlobalsToJSON(
  acceptDisputeGlobals: AcceptDisputeGlobals,
): string {
  return JSON.stringify(
    AcceptDisputeGlobals$outboundSchema.parse(acceptDisputeGlobals),
  );
}

export function acceptDisputeGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AcceptDisputeGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptDisputeGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptDisputeGlobals' from JSON`,
  );
}

/** @internal */
export const AcceptDisputeRequest$inboundSchema: z.ZodType<
  AcceptDisputeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
});

/** @internal */
export type AcceptDisputeRequest$Outbound = {
  accountID: string;
  disputeID: string;
};

/** @internal */
export const AcceptDisputeRequest$outboundSchema: z.ZodType<
  AcceptDisputeRequest$Outbound,
  z.ZodTypeDef,
  AcceptDisputeRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptDisputeRequest$ {
  /** @deprecated use `AcceptDisputeRequest$inboundSchema` instead. */
  export const inboundSchema = AcceptDisputeRequest$inboundSchema;
  /** @deprecated use `AcceptDisputeRequest$outboundSchema` instead. */
  export const outboundSchema = AcceptDisputeRequest$outboundSchema;
  /** @deprecated use `AcceptDisputeRequest$Outbound` instead. */
  export type Outbound = AcceptDisputeRequest$Outbound;
}

export function acceptDisputeRequestToJSON(
  acceptDisputeRequest: AcceptDisputeRequest,
): string {
  return JSON.stringify(
    AcceptDisputeRequest$outboundSchema.parse(acceptDisputeRequest),
  );
}

export function acceptDisputeRequestFromJSON(
  jsonString: string,
): SafeParseResult<AcceptDisputeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptDisputeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptDisputeRequest' from JSON`,
  );
}

/** @internal */
export const AcceptDisputeResponse$inboundSchema: z.ZodType<
  AcceptDisputeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Dispute$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type AcceptDisputeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Dispute$Outbound;
};

/** @internal */
export const AcceptDisputeResponse$outboundSchema: z.ZodType<
  AcceptDisputeResponse$Outbound,
  z.ZodTypeDef,
  AcceptDisputeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Dispute$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptDisputeResponse$ {
  /** @deprecated use `AcceptDisputeResponse$inboundSchema` instead. */
  export const inboundSchema = AcceptDisputeResponse$inboundSchema;
  /** @deprecated use `AcceptDisputeResponse$outboundSchema` instead. */
  export const outboundSchema = AcceptDisputeResponse$outboundSchema;
  /** @deprecated use `AcceptDisputeResponse$Outbound` instead. */
  export type Outbound = AcceptDisputeResponse$Outbound;
}

export function acceptDisputeResponseToJSON(
  acceptDisputeResponse: AcceptDisputeResponse,
): string {
  return JSON.stringify(
    AcceptDisputeResponse$outboundSchema.parse(acceptDisputeResponse),
  );
}

export function acceptDisputeResponseFromJSON(
  jsonString: string,
): SafeParseResult<AcceptDisputeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptDisputeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptDisputeResponse' from JSON`,
  );
}
