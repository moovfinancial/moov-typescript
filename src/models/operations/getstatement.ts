/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStatementGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetStatementRequest = {
  accountID: string;
  statementID: string;
};

export type GetStatementResponseResult =
  | components.Statement
  | ReadableStream<Uint8Array>;

export type GetStatementResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Statement | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetStatementGlobals$inboundSchema: z.ZodType<
  GetStatementGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetStatementGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetStatementGlobals$outboundSchema: z.ZodType<
  GetStatementGlobals$Outbound,
  z.ZodTypeDef,
  GetStatementGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatementGlobals$ {
  /** @deprecated use `GetStatementGlobals$inboundSchema` instead. */
  export const inboundSchema = GetStatementGlobals$inboundSchema;
  /** @deprecated use `GetStatementGlobals$outboundSchema` instead. */
  export const outboundSchema = GetStatementGlobals$outboundSchema;
  /** @deprecated use `GetStatementGlobals$Outbound` instead. */
  export type Outbound = GetStatementGlobals$Outbound;
}

export function getStatementGlobalsToJSON(
  getStatementGlobals: GetStatementGlobals,
): string {
  return JSON.stringify(
    GetStatementGlobals$outboundSchema.parse(getStatementGlobals),
  );
}

export function getStatementGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetStatementGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatementGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatementGlobals' from JSON`,
  );
}

/** @internal */
export const GetStatementRequest$inboundSchema: z.ZodType<
  GetStatementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  statementID: z.string(),
});

/** @internal */
export type GetStatementRequest$Outbound = {
  accountID: string;
  statementID: string;
};

/** @internal */
export const GetStatementRequest$outboundSchema: z.ZodType<
  GetStatementRequest$Outbound,
  z.ZodTypeDef,
  GetStatementRequest
> = z.object({
  accountID: z.string(),
  statementID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatementRequest$ {
  /** @deprecated use `GetStatementRequest$inboundSchema` instead. */
  export const inboundSchema = GetStatementRequest$inboundSchema;
  /** @deprecated use `GetStatementRequest$outboundSchema` instead. */
  export const outboundSchema = GetStatementRequest$outboundSchema;
  /** @deprecated use `GetStatementRequest$Outbound` instead. */
  export type Outbound = GetStatementRequest$Outbound;
}

export function getStatementRequestToJSON(
  getStatementRequest: GetStatementRequest,
): string {
  return JSON.stringify(
    GetStatementRequest$outboundSchema.parse(getStatementRequest),
  );
}

export function getStatementRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStatementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatementRequest' from JSON`,
  );
}

/** @internal */
export const GetStatementResponseResult$inboundSchema: z.ZodType<
  GetStatementResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.Statement$inboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetStatementResponseResult$Outbound =
  | components.Statement$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetStatementResponseResult$outboundSchema: z.ZodType<
  GetStatementResponseResult$Outbound,
  z.ZodTypeDef,
  GetStatementResponseResult
> = z.union([
  components.Statement$outboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatementResponseResult$ {
  /** @deprecated use `GetStatementResponseResult$inboundSchema` instead. */
  export const inboundSchema = GetStatementResponseResult$inboundSchema;
  /** @deprecated use `GetStatementResponseResult$outboundSchema` instead. */
  export const outboundSchema = GetStatementResponseResult$outboundSchema;
  /** @deprecated use `GetStatementResponseResult$Outbound` instead. */
  export type Outbound = GetStatementResponseResult$Outbound;
}

export function getStatementResponseResultToJSON(
  getStatementResponseResult: GetStatementResponseResult,
): string {
  return JSON.stringify(
    GetStatementResponseResult$outboundSchema.parse(getStatementResponseResult),
  );
}

export function getStatementResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<GetStatementResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatementResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatementResponseResult' from JSON`,
  );
}

/** @internal */
export const GetStatementResponse$inboundSchema: z.ZodType<
  GetStatementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.Statement$inboundSchema,
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetStatementResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Statement$Outbound | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetStatementResponse$outboundSchema: z.ZodType<
  GetStatementResponse$Outbound,
  z.ZodTypeDef,
  GetStatementResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.Statement$outboundSchema,
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatementResponse$ {
  /** @deprecated use `GetStatementResponse$inboundSchema` instead. */
  export const inboundSchema = GetStatementResponse$inboundSchema;
  /** @deprecated use `GetStatementResponse$outboundSchema` instead. */
  export const outboundSchema = GetStatementResponse$outboundSchema;
  /** @deprecated use `GetStatementResponse$Outbound` instead. */
  export type Outbound = GetStatementResponse$Outbound;
}

export function getStatementResponseToJSON(
  getStatementResponse: GetStatementResponse,
): string {
  return JSON.stringify(
    GetStatementResponse$outboundSchema.parse(getStatementResponse),
  );
}

export function getStatementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStatementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatementResponse' from JSON`,
  );
}
