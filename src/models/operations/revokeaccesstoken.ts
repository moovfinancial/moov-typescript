/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RevokeAccessTokenGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type RevokeAccessTokenResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RevokeAccessTokenGlobals$inboundSchema: z.ZodType<
  RevokeAccessTokenGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type RevokeAccessTokenGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const RevokeAccessTokenGlobals$outboundSchema: z.ZodType<
  RevokeAccessTokenGlobals$Outbound,
  z.ZodTypeDef,
  RevokeAccessTokenGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeAccessTokenGlobals$ {
  /** @deprecated use `RevokeAccessTokenGlobals$inboundSchema` instead. */
  export const inboundSchema = RevokeAccessTokenGlobals$inboundSchema;
  /** @deprecated use `RevokeAccessTokenGlobals$outboundSchema` instead. */
  export const outboundSchema = RevokeAccessTokenGlobals$outboundSchema;
  /** @deprecated use `RevokeAccessTokenGlobals$Outbound` instead. */
  export type Outbound = RevokeAccessTokenGlobals$Outbound;
}

export function revokeAccessTokenGlobalsToJSON(
  revokeAccessTokenGlobals: RevokeAccessTokenGlobals,
): string {
  return JSON.stringify(
    RevokeAccessTokenGlobals$outboundSchema.parse(revokeAccessTokenGlobals),
  );
}

export function revokeAccessTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RevokeAccessTokenGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeAccessTokenGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeAccessTokenGlobals' from JSON`,
  );
}

/** @internal */
export const RevokeAccessTokenResponse$inboundSchema: z.ZodType<
  RevokeAccessTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RevokeAccessTokenResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RevokeAccessTokenResponse$outboundSchema: z.ZodType<
  RevokeAccessTokenResponse$Outbound,
  z.ZodTypeDef,
  RevokeAccessTokenResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeAccessTokenResponse$ {
  /** @deprecated use `RevokeAccessTokenResponse$inboundSchema` instead. */
  export const inboundSchema = RevokeAccessTokenResponse$inboundSchema;
  /** @deprecated use `RevokeAccessTokenResponse$outboundSchema` instead. */
  export const outboundSchema = RevokeAccessTokenResponse$outboundSchema;
  /** @deprecated use `RevokeAccessTokenResponse$Outbound` instead. */
  export type Outbound = RevokeAccessTokenResponse$Outbound;
}

export function revokeAccessTokenResponseToJSON(
  revokeAccessTokenResponse: RevokeAccessTokenResponse,
): string {
  return JSON.stringify(
    RevokeAccessTokenResponse$outboundSchema.parse(revokeAccessTokenResponse),
  );
}

export function revokeAccessTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<RevokeAccessTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeAccessTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeAccessTokenResponse' from JSON`,
  );
}
