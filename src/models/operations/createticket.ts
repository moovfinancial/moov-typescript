/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTicketGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateTicketRequest = {
  accountID: string;
  createTicket: components.CreateTicket;
};

export type CreateTicketResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Ticket;
};

/** @internal */
export const CreateTicketGlobals$inboundSchema: z.ZodType<
  CreateTicketGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateTicketGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateTicketGlobals$outboundSchema: z.ZodType<
  CreateTicketGlobals$Outbound,
  z.ZodTypeDef,
  CreateTicketGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTicketGlobals$ {
  /** @deprecated use `CreateTicketGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTicketGlobals$inboundSchema;
  /** @deprecated use `CreateTicketGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTicketGlobals$outboundSchema;
  /** @deprecated use `CreateTicketGlobals$Outbound` instead. */
  export type Outbound = CreateTicketGlobals$Outbound;
}

export function createTicketGlobalsToJSON(
  createTicketGlobals: CreateTicketGlobals,
): string {
  return JSON.stringify(
    CreateTicketGlobals$outboundSchema.parse(createTicketGlobals),
  );
}

export function createTicketGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTicketGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTicketGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTicketGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTicketRequest$inboundSchema: z.ZodType<
  CreateTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  CreateTicket: components.CreateTicket$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateTicket": "createTicket",
  });
});

/** @internal */
export type CreateTicketRequest$Outbound = {
  accountID: string;
  CreateTicket: components.CreateTicket$Outbound;
};

/** @internal */
export const CreateTicketRequest$outboundSchema: z.ZodType<
  CreateTicketRequest$Outbound,
  z.ZodTypeDef,
  CreateTicketRequest
> = z.object({
  accountID: z.string(),
  createTicket: components.CreateTicket$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createTicket: "CreateTicket",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTicketRequest$ {
  /** @deprecated use `CreateTicketRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTicketRequest$inboundSchema;
  /** @deprecated use `CreateTicketRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTicketRequest$outboundSchema;
  /** @deprecated use `CreateTicketRequest$Outbound` instead. */
  export type Outbound = CreateTicketRequest$Outbound;
}

export function createTicketRequestToJSON(
  createTicketRequest: CreateTicketRequest,
): string {
  return JSON.stringify(
    CreateTicketRequest$outboundSchema.parse(createTicketRequest),
  );
}

export function createTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTicketRequest' from JSON`,
  );
}

/** @internal */
export const CreateTicketResponse$inboundSchema: z.ZodType<
  CreateTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Ticket$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateTicketResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Ticket$Outbound;
};

/** @internal */
export const CreateTicketResponse$outboundSchema: z.ZodType<
  CreateTicketResponse$Outbound,
  z.ZodTypeDef,
  CreateTicketResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Ticket$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTicketResponse$ {
  /** @deprecated use `CreateTicketResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTicketResponse$inboundSchema;
  /** @deprecated use `CreateTicketResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTicketResponse$outboundSchema;
  /** @deprecated use `CreateTicketResponse$Outbound` instead. */
  export type Outbound = CreateTicketResponse$Outbound;
}

export function createTicketResponseToJSON(
  createTicketResponse: CreateTicketResponse,
): string {
  return JSON.stringify(
    CreateTicketResponse$outboundSchema.parse(createTicketResponse),
  );
}

export function createTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTicketResponse' from JSON`,
  );
}
