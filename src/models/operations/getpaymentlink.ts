/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPaymentLinkGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetPaymentLinkRequest = {
  accountID: string;
  paymentLinkCode: string;
};

export type GetPaymentLinkResponse = {
  headers: { [k: string]: Array<string> };
  result: components.PaymentLink;
};

/** @internal */
export const GetPaymentLinkGlobals$inboundSchema: z.ZodType<
  GetPaymentLinkGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetPaymentLinkGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetPaymentLinkGlobals$outboundSchema: z.ZodType<
  GetPaymentLinkGlobals$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkGlobals$ {
  /** @deprecated use `GetPaymentLinkGlobals$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkGlobals$inboundSchema;
  /** @deprecated use `GetPaymentLinkGlobals$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkGlobals$outboundSchema;
  /** @deprecated use `GetPaymentLinkGlobals$Outbound` instead. */
  export type Outbound = GetPaymentLinkGlobals$Outbound;
}

export function getPaymentLinkGlobalsToJSON(
  getPaymentLinkGlobals: GetPaymentLinkGlobals,
): string {
  return JSON.stringify(
    GetPaymentLinkGlobals$outboundSchema.parse(getPaymentLinkGlobals),
  );
}

export function getPaymentLinkGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkGlobals' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkRequest$inboundSchema: z.ZodType<
  GetPaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  paymentLinkCode: z.string(),
});

/** @internal */
export type GetPaymentLinkRequest$Outbound = {
  accountID: string;
  paymentLinkCode: string;
};

/** @internal */
export const GetPaymentLinkRequest$outboundSchema: z.ZodType<
  GetPaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkRequest
> = z.object({
  accountID: z.string(),
  paymentLinkCode: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkRequest$ {
  /** @deprecated use `GetPaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkRequest$inboundSchema;
  /** @deprecated use `GetPaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkRequest$outboundSchema;
  /** @deprecated use `GetPaymentLinkRequest$Outbound` instead. */
  export type Outbound = GetPaymentLinkRequest$Outbound;
}

export function getPaymentLinkRequestToJSON(
  getPaymentLinkRequest: GetPaymentLinkRequest,
): string {
  return JSON.stringify(
    GetPaymentLinkRequest$outboundSchema.parse(getPaymentLinkRequest),
  );
}

export function getPaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkRequest' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkResponse$inboundSchema: z.ZodType<
  GetPaymentLinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.PaymentLink$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetPaymentLinkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.PaymentLink$Outbound;
};

/** @internal */
export const GetPaymentLinkResponse$outboundSchema: z.ZodType<
  GetPaymentLinkResponse$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.PaymentLink$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkResponse$ {
  /** @deprecated use `GetPaymentLinkResponse$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkResponse$inboundSchema;
  /** @deprecated use `GetPaymentLinkResponse$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkResponse$outboundSchema;
  /** @deprecated use `GetPaymentLinkResponse$Outbound` instead. */
  export type Outbound = GetPaymentLinkResponse$Outbound;
}

export function getPaymentLinkResponseToJSON(
  getPaymentLinkResponse: GetPaymentLinkResponse,
): string {
  return JSON.stringify(
    GetPaymentLinkResponse$outboundSchema.parse(getPaymentLinkResponse),
  );
}

export function getPaymentLinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkResponse' from JSON`,
  );
}
