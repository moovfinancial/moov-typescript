/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPaymentLinkSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetPaymentLinkRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  paymentLinkCode: string;
};

/** @internal */
export const GetPaymentLinkSecurity$inboundSchema: z.ZodType<
  GetPaymentLinkSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetPaymentLinkSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetPaymentLinkSecurity$outboundSchema: z.ZodType<
  GetPaymentLinkSecurity$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkSecurity$ {
  /** @deprecated use `GetPaymentLinkSecurity$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkSecurity$inboundSchema;
  /** @deprecated use `GetPaymentLinkSecurity$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkSecurity$outboundSchema;
  /** @deprecated use `GetPaymentLinkSecurity$Outbound` instead. */
  export type Outbound = GetPaymentLinkSecurity$Outbound;
}

export function getPaymentLinkSecurityToJSON(
  getPaymentLinkSecurity: GetPaymentLinkSecurity,
): string {
  return JSON.stringify(
    GetPaymentLinkSecurity$outboundSchema.parse(getPaymentLinkSecurity),
  );
}

export function getPaymentLinkSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkSecurity' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkRequest$inboundSchema: z.ZodType<
  GetPaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  paymentLinkCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetPaymentLinkRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  paymentLinkCode: string;
};

/** @internal */
export const GetPaymentLinkRequest$outboundSchema: z.ZodType<
  GetPaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  paymentLinkCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkRequest$ {
  /** @deprecated use `GetPaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkRequest$inboundSchema;
  /** @deprecated use `GetPaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkRequest$outboundSchema;
  /** @deprecated use `GetPaymentLinkRequest$Outbound` instead. */
  export type Outbound = GetPaymentLinkRequest$Outbound;
}

export function getPaymentLinkRequestToJSON(
  getPaymentLinkRequest: GetPaymentLinkRequest,
): string {
  return JSON.stringify(
    GetPaymentLinkRequest$outboundSchema.parse(getPaymentLinkRequest),
  );
}

export function getPaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkRequest' from JSON`,
  );
}
