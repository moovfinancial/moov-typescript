/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSweepConfigsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListSweepConfigsRequest = {
  accountID: string;
};

export type ListSweepConfigsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.SweepConfig>;
};

/** @internal */
export const ListSweepConfigsGlobals$inboundSchema: z.ZodType<
  ListSweepConfigsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListSweepConfigsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListSweepConfigsGlobals$outboundSchema: z.ZodType<
  ListSweepConfigsGlobals$Outbound,
  z.ZodTypeDef,
  ListSweepConfigsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepConfigsGlobals$ {
  /** @deprecated use `ListSweepConfigsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListSweepConfigsGlobals$inboundSchema;
  /** @deprecated use `ListSweepConfigsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListSweepConfigsGlobals$outboundSchema;
  /** @deprecated use `ListSweepConfigsGlobals$Outbound` instead. */
  export type Outbound = ListSweepConfigsGlobals$Outbound;
}

export function listSweepConfigsGlobalsToJSON(
  listSweepConfigsGlobals: ListSweepConfigsGlobals,
): string {
  return JSON.stringify(
    ListSweepConfigsGlobals$outboundSchema.parse(listSweepConfigsGlobals),
  );
}

export function listSweepConfigsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepConfigsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepConfigsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepConfigsGlobals' from JSON`,
  );
}

/** @internal */
export const ListSweepConfigsRequest$inboundSchema: z.ZodType<
  ListSweepConfigsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type ListSweepConfigsRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const ListSweepConfigsRequest$outboundSchema: z.ZodType<
  ListSweepConfigsRequest$Outbound,
  z.ZodTypeDef,
  ListSweepConfigsRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepConfigsRequest$ {
  /** @deprecated use `ListSweepConfigsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSweepConfigsRequest$inboundSchema;
  /** @deprecated use `ListSweepConfigsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSweepConfigsRequest$outboundSchema;
  /** @deprecated use `ListSweepConfigsRequest$Outbound` instead. */
  export type Outbound = ListSweepConfigsRequest$Outbound;
}

export function listSweepConfigsRequestToJSON(
  listSweepConfigsRequest: ListSweepConfigsRequest,
): string {
  return JSON.stringify(
    ListSweepConfigsRequest$outboundSchema.parse(listSweepConfigsRequest),
  );
}

export function listSweepConfigsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepConfigsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepConfigsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepConfigsRequest' from JSON`,
  );
}

/** @internal */
export const ListSweepConfigsResponse$inboundSchema: z.ZodType<
  ListSweepConfigsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.SweepConfig$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListSweepConfigsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.SweepConfig$Outbound>;
};

/** @internal */
export const ListSweepConfigsResponse$outboundSchema: z.ZodType<
  ListSweepConfigsResponse$Outbound,
  z.ZodTypeDef,
  ListSweepConfigsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.SweepConfig$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepConfigsResponse$ {
  /** @deprecated use `ListSweepConfigsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSweepConfigsResponse$inboundSchema;
  /** @deprecated use `ListSweepConfigsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSweepConfigsResponse$outboundSchema;
  /** @deprecated use `ListSweepConfigsResponse$Outbound` instead. */
  export type Outbound = ListSweepConfigsResponse$Outbound;
}

export function listSweepConfigsResponseToJSON(
  listSweepConfigsResponse: ListSweepConfigsResponse,
): string {
  return JSON.stringify(
    ListSweepConfigsResponse$outboundSchema.parse(listSweepConfigsResponse),
  );
}

export function listSweepConfigsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepConfigsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepConfigsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepConfigsResponse' from JSON`,
  );
}
