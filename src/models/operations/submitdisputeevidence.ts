/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubmitDisputeEvidenceGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type SubmitDisputeEvidenceRequest = {
  accountID: string;
  disputeID: string;
};

export type SubmitDisputeEvidenceResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Dispute;
};

/** @internal */
export const SubmitDisputeEvidenceGlobals$inboundSchema: z.ZodType<
  SubmitDisputeEvidenceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type SubmitDisputeEvidenceGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const SubmitDisputeEvidenceGlobals$outboundSchema: z.ZodType<
  SubmitDisputeEvidenceGlobals$Outbound,
  z.ZodTypeDef,
  SubmitDisputeEvidenceGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitDisputeEvidenceGlobals$ {
  /** @deprecated use `SubmitDisputeEvidenceGlobals$inboundSchema` instead. */
  export const inboundSchema = SubmitDisputeEvidenceGlobals$inboundSchema;
  /** @deprecated use `SubmitDisputeEvidenceGlobals$outboundSchema` instead. */
  export const outboundSchema = SubmitDisputeEvidenceGlobals$outboundSchema;
  /** @deprecated use `SubmitDisputeEvidenceGlobals$Outbound` instead. */
  export type Outbound = SubmitDisputeEvidenceGlobals$Outbound;
}

export function submitDisputeEvidenceGlobalsToJSON(
  submitDisputeEvidenceGlobals: SubmitDisputeEvidenceGlobals,
): string {
  return JSON.stringify(
    SubmitDisputeEvidenceGlobals$outboundSchema.parse(
      submitDisputeEvidenceGlobals,
    ),
  );
}

export function submitDisputeEvidenceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SubmitDisputeEvidenceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitDisputeEvidenceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitDisputeEvidenceGlobals' from JSON`,
  );
}

/** @internal */
export const SubmitDisputeEvidenceRequest$inboundSchema: z.ZodType<
  SubmitDisputeEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
});

/** @internal */
export type SubmitDisputeEvidenceRequest$Outbound = {
  accountID: string;
  disputeID: string;
};

/** @internal */
export const SubmitDisputeEvidenceRequest$outboundSchema: z.ZodType<
  SubmitDisputeEvidenceRequest$Outbound,
  z.ZodTypeDef,
  SubmitDisputeEvidenceRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitDisputeEvidenceRequest$ {
  /** @deprecated use `SubmitDisputeEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema = SubmitDisputeEvidenceRequest$inboundSchema;
  /** @deprecated use `SubmitDisputeEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema = SubmitDisputeEvidenceRequest$outboundSchema;
  /** @deprecated use `SubmitDisputeEvidenceRequest$Outbound` instead. */
  export type Outbound = SubmitDisputeEvidenceRequest$Outbound;
}

export function submitDisputeEvidenceRequestToJSON(
  submitDisputeEvidenceRequest: SubmitDisputeEvidenceRequest,
): string {
  return JSON.stringify(
    SubmitDisputeEvidenceRequest$outboundSchema.parse(
      submitDisputeEvidenceRequest,
    ),
  );
}

export function submitDisputeEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubmitDisputeEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitDisputeEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitDisputeEvidenceRequest' from JSON`,
  );
}

/** @internal */
export const SubmitDisputeEvidenceResponse$inboundSchema: z.ZodType<
  SubmitDisputeEvidenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Dispute$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type SubmitDisputeEvidenceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Dispute$Outbound;
};

/** @internal */
export const SubmitDisputeEvidenceResponse$outboundSchema: z.ZodType<
  SubmitDisputeEvidenceResponse$Outbound,
  z.ZodTypeDef,
  SubmitDisputeEvidenceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Dispute$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitDisputeEvidenceResponse$ {
  /** @deprecated use `SubmitDisputeEvidenceResponse$inboundSchema` instead. */
  export const inboundSchema = SubmitDisputeEvidenceResponse$inboundSchema;
  /** @deprecated use `SubmitDisputeEvidenceResponse$outboundSchema` instead. */
  export const outboundSchema = SubmitDisputeEvidenceResponse$outboundSchema;
  /** @deprecated use `SubmitDisputeEvidenceResponse$Outbound` instead. */
  export type Outbound = SubmitDisputeEvidenceResponse$Outbound;
}

export function submitDisputeEvidenceResponseToJSON(
  submitDisputeEvidenceResponse: SubmitDisputeEvidenceResponse,
): string {
  return JSON.stringify(
    SubmitDisputeEvidenceResponse$outboundSchema.parse(
      submitDisputeEvidenceResponse,
    ),
  );
}

export function submitDisputeEvidenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<SubmitDisputeEvidenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitDisputeEvidenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitDisputeEvidenceResponse' from JSON`,
  );
}
