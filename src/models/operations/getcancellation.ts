/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCancellationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetCancellationRequest = {
  /**
   * Moov account ID of the partner or transfer's source or destination.
   */
  accountID: string;
  /**
   * Identifier for the transfer.
   */
  transferID: string;
  /**
   * Identifier for the cancellation.
   */
  cancellationID: string;
};

export type GetCancellationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Cancellation;
};

/** @internal */
export const GetCancellationGlobals$inboundSchema: z.ZodType<
  GetCancellationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetCancellationGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetCancellationGlobals$outboundSchema: z.ZodType<
  GetCancellationGlobals$Outbound,
  z.ZodTypeDef,
  GetCancellationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCancellationGlobals$ {
  /** @deprecated use `GetCancellationGlobals$inboundSchema` instead. */
  export const inboundSchema = GetCancellationGlobals$inboundSchema;
  /** @deprecated use `GetCancellationGlobals$outboundSchema` instead. */
  export const outboundSchema = GetCancellationGlobals$outboundSchema;
  /** @deprecated use `GetCancellationGlobals$Outbound` instead. */
  export type Outbound = GetCancellationGlobals$Outbound;
}

export function getCancellationGlobalsToJSON(
  getCancellationGlobals: GetCancellationGlobals,
): string {
  return JSON.stringify(
    GetCancellationGlobals$outboundSchema.parse(getCancellationGlobals),
  );
}

export function getCancellationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetCancellationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCancellationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCancellationGlobals' from JSON`,
  );
}

/** @internal */
export const GetCancellationRequest$inboundSchema: z.ZodType<
  GetCancellationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  cancellationID: z.string(),
});

/** @internal */
export type GetCancellationRequest$Outbound = {
  accountID: string;
  transferID: string;
  cancellationID: string;
};

/** @internal */
export const GetCancellationRequest$outboundSchema: z.ZodType<
  GetCancellationRequest$Outbound,
  z.ZodTypeDef,
  GetCancellationRequest
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  cancellationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCancellationRequest$ {
  /** @deprecated use `GetCancellationRequest$inboundSchema` instead. */
  export const inboundSchema = GetCancellationRequest$inboundSchema;
  /** @deprecated use `GetCancellationRequest$outboundSchema` instead. */
  export const outboundSchema = GetCancellationRequest$outboundSchema;
  /** @deprecated use `GetCancellationRequest$Outbound` instead. */
  export type Outbound = GetCancellationRequest$Outbound;
}

export function getCancellationRequestToJSON(
  getCancellationRequest: GetCancellationRequest,
): string {
  return JSON.stringify(
    GetCancellationRequest$outboundSchema.parse(getCancellationRequest),
  );
}

export function getCancellationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCancellationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCancellationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCancellationRequest' from JSON`,
  );
}

/** @internal */
export const GetCancellationResponse$inboundSchema: z.ZodType<
  GetCancellationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Cancellation$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetCancellationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Cancellation$Outbound;
};

/** @internal */
export const GetCancellationResponse$outboundSchema: z.ZodType<
  GetCancellationResponse$Outbound,
  z.ZodTypeDef,
  GetCancellationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Cancellation$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCancellationResponse$ {
  /** @deprecated use `GetCancellationResponse$inboundSchema` instead. */
  export const inboundSchema = GetCancellationResponse$inboundSchema;
  /** @deprecated use `GetCancellationResponse$outboundSchema` instead. */
  export const outboundSchema = GetCancellationResponse$outboundSchema;
  /** @deprecated use `GetCancellationResponse$Outbound` instead. */
  export type Outbound = GetCancellationResponse$Outbound;
}

export function getCancellationResponseToJSON(
  getCancellationResponse: GetCancellationResponse,
): string {
  return JSON.stringify(
    GetCancellationResponse$outboundSchema.parse(getCancellationResponse),
  );
}

export function getCancellationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCancellationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCancellationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCancellationResponse' from JSON`,
  );
}
