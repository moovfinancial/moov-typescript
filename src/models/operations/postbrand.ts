/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostBrandSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type PostBrandRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  brand: components.Brand;
};

/** @internal */
export const PostBrandSecurity$inboundSchema: z.ZodType<
  PostBrandSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type PostBrandSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const PostBrandSecurity$outboundSchema: z.ZodType<
  PostBrandSecurity$Outbound,
  z.ZodTypeDef,
  PostBrandSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostBrandSecurity$ {
  /** @deprecated use `PostBrandSecurity$inboundSchema` instead. */
  export const inboundSchema = PostBrandSecurity$inboundSchema;
  /** @deprecated use `PostBrandSecurity$outboundSchema` instead. */
  export const outboundSchema = PostBrandSecurity$outboundSchema;
  /** @deprecated use `PostBrandSecurity$Outbound` instead. */
  export type Outbound = PostBrandSecurity$Outbound;
}

export function postBrandSecurityToJSON(
  postBrandSecurity: PostBrandSecurity,
): string {
  return JSON.stringify(
    PostBrandSecurity$outboundSchema.parse(postBrandSecurity),
  );
}

export function postBrandSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostBrandSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostBrandSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostBrandSecurity' from JSON`,
  );
}

/** @internal */
export const PostBrandRequest$inboundSchema: z.ZodType<
  PostBrandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  Brand: components.Brand$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "Brand": "brand",
  });
});

/** @internal */
export type PostBrandRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  Brand: components.Brand$Outbound;
};

/** @internal */
export const PostBrandRequest$outboundSchema: z.ZodType<
  PostBrandRequest$Outbound,
  z.ZodTypeDef,
  PostBrandRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  brand: components.Brand$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    brand: "Brand",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostBrandRequest$ {
  /** @deprecated use `PostBrandRequest$inboundSchema` instead. */
  export const inboundSchema = PostBrandRequest$inboundSchema;
  /** @deprecated use `PostBrandRequest$outboundSchema` instead. */
  export const outboundSchema = PostBrandRequest$outboundSchema;
  /** @deprecated use `PostBrandRequest$Outbound` instead. */
  export type Outbound = PostBrandRequest$Outbound;
}

export function postBrandRequestToJSON(
  postBrandRequest: PostBrandRequest,
): string {
  return JSON.stringify(
    PostBrandRequest$outboundSchema.parse(postBrandRequest),
  );
}

export function postBrandRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostBrandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostBrandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostBrandRequest' from JSON`,
  );
}
