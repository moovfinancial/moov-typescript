/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBankAccountsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListBankAccountsRequest = {
  accountID: string;
};

export type ListBankAccountsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.BankAccount>;
};

/** @internal */
export const ListBankAccountsGlobals$inboundSchema: z.ZodType<
  ListBankAccountsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListBankAccountsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListBankAccountsGlobals$outboundSchema: z.ZodType<
  ListBankAccountsGlobals$Outbound,
  z.ZodTypeDef,
  ListBankAccountsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBankAccountsGlobals$ {
  /** @deprecated use `ListBankAccountsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListBankAccountsGlobals$inboundSchema;
  /** @deprecated use `ListBankAccountsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListBankAccountsGlobals$outboundSchema;
  /** @deprecated use `ListBankAccountsGlobals$Outbound` instead. */
  export type Outbound = ListBankAccountsGlobals$Outbound;
}

export function listBankAccountsGlobalsToJSON(
  listBankAccountsGlobals: ListBankAccountsGlobals,
): string {
  return JSON.stringify(
    ListBankAccountsGlobals$outboundSchema.parse(listBankAccountsGlobals),
  );
}

export function listBankAccountsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListBankAccountsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBankAccountsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBankAccountsGlobals' from JSON`,
  );
}

/** @internal */
export const ListBankAccountsRequest$inboundSchema: z.ZodType<
  ListBankAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type ListBankAccountsRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const ListBankAccountsRequest$outboundSchema: z.ZodType<
  ListBankAccountsRequest$Outbound,
  z.ZodTypeDef,
  ListBankAccountsRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBankAccountsRequest$ {
  /** @deprecated use `ListBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = ListBankAccountsRequest$inboundSchema;
  /** @deprecated use `ListBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = ListBankAccountsRequest$outboundSchema;
  /** @deprecated use `ListBankAccountsRequest$Outbound` instead. */
  export type Outbound = ListBankAccountsRequest$Outbound;
}

export function listBankAccountsRequestToJSON(
  listBankAccountsRequest: ListBankAccountsRequest,
): string {
  return JSON.stringify(
    ListBankAccountsRequest$outboundSchema.parse(listBankAccountsRequest),
  );
}

export function listBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBankAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBankAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const ListBankAccountsResponse$inboundSchema: z.ZodType<
  ListBankAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.BankAccount$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListBankAccountsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.BankAccount$Outbound>;
};

/** @internal */
export const ListBankAccountsResponse$outboundSchema: z.ZodType<
  ListBankAccountsResponse$Outbound,
  z.ZodTypeDef,
  ListBankAccountsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.BankAccount$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBankAccountsResponse$ {
  /** @deprecated use `ListBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = ListBankAccountsResponse$inboundSchema;
  /** @deprecated use `ListBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = ListBankAccountsResponse$outboundSchema;
  /** @deprecated use `ListBankAccountsResponse$Outbound` instead. */
  export type Outbound = ListBankAccountsResponse$Outbound;
}

export function listBankAccountsResponseToJSON(
  listBankAccountsResponse: ListBankAccountsResponse,
): string {
  return JSON.stringify(
    ListBankAccountsResponse$outboundSchema.parse(listBankAccountsResponse),
  );
}

export function listBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBankAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBankAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBankAccountsResponse' from JSON`,
  );
}
