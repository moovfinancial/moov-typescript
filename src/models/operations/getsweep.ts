/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSweepSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetSweepRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  walletID: string;
  sweepID: string;
};

/** @internal */
export const GetSweepSecurity$inboundSchema: z.ZodType<
  GetSweepSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetSweepSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetSweepSecurity$outboundSchema: z.ZodType<
  GetSweepSecurity$Outbound,
  z.ZodTypeDef,
  GetSweepSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSweepSecurity$ {
  /** @deprecated use `GetSweepSecurity$inboundSchema` instead. */
  export const inboundSchema = GetSweepSecurity$inboundSchema;
  /** @deprecated use `GetSweepSecurity$outboundSchema` instead. */
  export const outboundSchema = GetSweepSecurity$outboundSchema;
  /** @deprecated use `GetSweepSecurity$Outbound` instead. */
  export type Outbound = GetSweepSecurity$Outbound;
}

export function getSweepSecurityToJSON(
  getSweepSecurity: GetSweepSecurity,
): string {
  return JSON.stringify(
    GetSweepSecurity$outboundSchema.parse(getSweepSecurity),
  );
}

export function getSweepSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetSweepSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSweepSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSweepSecurity' from JSON`,
  );
}

/** @internal */
export const GetSweepRequest$inboundSchema: z.ZodType<
  GetSweepRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string(),
  sweepID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetSweepRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  walletID: string;
  sweepID: string;
};

/** @internal */
export const GetSweepRequest$outboundSchema: z.ZodType<
  GetSweepRequest$Outbound,
  z.ZodTypeDef,
  GetSweepRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string(),
  sweepID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSweepRequest$ {
  /** @deprecated use `GetSweepRequest$inboundSchema` instead. */
  export const inboundSchema = GetSweepRequest$inboundSchema;
  /** @deprecated use `GetSweepRequest$outboundSchema` instead. */
  export const outboundSchema = GetSweepRequest$outboundSchema;
  /** @deprecated use `GetSweepRequest$Outbound` instead. */
  export type Outbound = GetSweepRequest$Outbound;
}

export function getSweepRequestToJSON(
  getSweepRequest: GetSweepRequest,
): string {
  return JSON.stringify(GetSweepRequest$outboundSchema.parse(getSweepRequest));
}

export function getSweepRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSweepRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSweepRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSweepRequest' from JSON`,
  );
}
