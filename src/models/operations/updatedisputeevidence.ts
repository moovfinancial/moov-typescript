/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateDisputeEvidenceGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateDisputeEvidenceRequest = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
  updateEvidence: components.UpdateEvidence;
};

export type UpdateDisputeEvidenceResponse = {
  headers: { [k: string]: Array<string> };
  result: components.DisputeEvidenceResponse;
};

/** @internal */
export const UpdateDisputeEvidenceGlobals$inboundSchema: z.ZodType<
  UpdateDisputeEvidenceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateDisputeEvidenceGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateDisputeEvidenceGlobals$outboundSchema: z.ZodType<
  UpdateDisputeEvidenceGlobals$Outbound,
  z.ZodTypeDef,
  UpdateDisputeEvidenceGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDisputeEvidenceGlobals$ {
  /** @deprecated use `UpdateDisputeEvidenceGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateDisputeEvidenceGlobals$inboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateDisputeEvidenceGlobals$outboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceGlobals$Outbound` instead. */
  export type Outbound = UpdateDisputeEvidenceGlobals$Outbound;
}

export function updateDisputeEvidenceGlobalsToJSON(
  updateDisputeEvidenceGlobals: UpdateDisputeEvidenceGlobals,
): string {
  return JSON.stringify(
    UpdateDisputeEvidenceGlobals$outboundSchema.parse(
      updateDisputeEvidenceGlobals,
    ),
  );
}

export function updateDisputeEvidenceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDisputeEvidenceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDisputeEvidenceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDisputeEvidenceGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateDisputeEvidenceRequest$inboundSchema: z.ZodType<
  UpdateDisputeEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
  UpdateEvidence: components.UpdateEvidence$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateEvidence": "updateEvidence",
  });
});

/** @internal */
export type UpdateDisputeEvidenceRequest$Outbound = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
  UpdateEvidence: components.UpdateEvidence$Outbound;
};

/** @internal */
export const UpdateDisputeEvidenceRequest$outboundSchema: z.ZodType<
  UpdateDisputeEvidenceRequest$Outbound,
  z.ZodTypeDef,
  UpdateDisputeEvidenceRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
  updateEvidence: components.UpdateEvidence$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateEvidence: "UpdateEvidence",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDisputeEvidenceRequest$ {
  /** @deprecated use `UpdateDisputeEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDisputeEvidenceRequest$inboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDisputeEvidenceRequest$outboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceRequest$Outbound` instead. */
  export type Outbound = UpdateDisputeEvidenceRequest$Outbound;
}

export function updateDisputeEvidenceRequestToJSON(
  updateDisputeEvidenceRequest: UpdateDisputeEvidenceRequest,
): string {
  return JSON.stringify(
    UpdateDisputeEvidenceRequest$outboundSchema.parse(
      updateDisputeEvidenceRequest,
    ),
  );
}

export function updateDisputeEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDisputeEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDisputeEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDisputeEvidenceRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDisputeEvidenceResponse$inboundSchema: z.ZodType<
  UpdateDisputeEvidenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.DisputeEvidenceResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateDisputeEvidenceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.DisputeEvidenceResponse$Outbound;
};

/** @internal */
export const UpdateDisputeEvidenceResponse$outboundSchema: z.ZodType<
  UpdateDisputeEvidenceResponse$Outbound,
  z.ZodTypeDef,
  UpdateDisputeEvidenceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.DisputeEvidenceResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDisputeEvidenceResponse$ {
  /** @deprecated use `UpdateDisputeEvidenceResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateDisputeEvidenceResponse$inboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateDisputeEvidenceResponse$outboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceResponse$Outbound` instead. */
  export type Outbound = UpdateDisputeEvidenceResponse$Outbound;
}

export function updateDisputeEvidenceResponseToJSON(
  updateDisputeEvidenceResponse: UpdateDisputeEvidenceResponse,
): string {
  return JSON.stringify(
    UpdateDisputeEvidenceResponse$outboundSchema.parse(
      updateDisputeEvidenceResponse,
    ),
  );
}

export function updateDisputeEvidenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDisputeEvidenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDisputeEvidenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDisputeEvidenceResponse' from JSON`,
  );
}
