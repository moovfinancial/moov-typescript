/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateDisputeEvidenceSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateDisputeEvidenceRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  disputeID: string;
  evidenceID: string;
  updateEvidence: components.UpdateEvidence;
};

/** @internal */
export const UpdateDisputeEvidenceSecurity$inboundSchema: z.ZodType<
  UpdateDisputeEvidenceSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateDisputeEvidenceSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateDisputeEvidenceSecurity$outboundSchema: z.ZodType<
  UpdateDisputeEvidenceSecurity$Outbound,
  z.ZodTypeDef,
  UpdateDisputeEvidenceSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDisputeEvidenceSecurity$ {
  /** @deprecated use `UpdateDisputeEvidenceSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateDisputeEvidenceSecurity$inboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateDisputeEvidenceSecurity$outboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceSecurity$Outbound` instead. */
  export type Outbound = UpdateDisputeEvidenceSecurity$Outbound;
}

export function updateDisputeEvidenceSecurityToJSON(
  updateDisputeEvidenceSecurity: UpdateDisputeEvidenceSecurity,
): string {
  return JSON.stringify(
    UpdateDisputeEvidenceSecurity$outboundSchema.parse(
      updateDisputeEvidenceSecurity,
    ),
  );
}

export function updateDisputeEvidenceSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDisputeEvidenceSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDisputeEvidenceSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDisputeEvidenceSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateDisputeEvidenceRequest$inboundSchema: z.ZodType<
  UpdateDisputeEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
  UpdateEvidence: components.UpdateEvidence$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpdateEvidence": "updateEvidence",
  });
});

/** @internal */
export type UpdateDisputeEvidenceRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  disputeID: string;
  evidenceID: string;
  UpdateEvidence: components.UpdateEvidence$Outbound;
};

/** @internal */
export const UpdateDisputeEvidenceRequest$outboundSchema: z.ZodType<
  UpdateDisputeEvidenceRequest$Outbound,
  z.ZodTypeDef,
  UpdateDisputeEvidenceRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
  updateEvidence: components.UpdateEvidence$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    updateEvidence: "UpdateEvidence",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDisputeEvidenceRequest$ {
  /** @deprecated use `UpdateDisputeEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDisputeEvidenceRequest$inboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDisputeEvidenceRequest$outboundSchema;
  /** @deprecated use `UpdateDisputeEvidenceRequest$Outbound` instead. */
  export type Outbound = UpdateDisputeEvidenceRequest$Outbound;
}

export function updateDisputeEvidenceRequestToJSON(
  updateDisputeEvidenceRequest: UpdateDisputeEvidenceRequest,
): string {
  return JSON.stringify(
    UpdateDisputeEvidenceRequest$outboundSchema.parse(
      updateDisputeEvidenceRequest,
    ),
  );
}

export function updateDisputeEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDisputeEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDisputeEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDisputeEvidenceRequest' from JSON`,
  );
}
