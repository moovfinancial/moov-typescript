/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateRepresentativeGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateRepresentativeRequest = {
  /**
   * ID of the account.
   */
  accountID: string;
  createRepresentative: components.CreateRepresentative;
};

export type CreateRepresentativeResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Representative;
};

/** @internal */
export const CreateRepresentativeGlobals$inboundSchema: z.ZodType<
  CreateRepresentativeGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateRepresentativeGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateRepresentativeGlobals$outboundSchema: z.ZodType<
  CreateRepresentativeGlobals$Outbound,
  z.ZodTypeDef,
  CreateRepresentativeGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRepresentativeGlobals$ {
  /** @deprecated use `CreateRepresentativeGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateRepresentativeGlobals$inboundSchema;
  /** @deprecated use `CreateRepresentativeGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateRepresentativeGlobals$outboundSchema;
  /** @deprecated use `CreateRepresentativeGlobals$Outbound` instead. */
  export type Outbound = CreateRepresentativeGlobals$Outbound;
}

export function createRepresentativeGlobalsToJSON(
  createRepresentativeGlobals: CreateRepresentativeGlobals,
): string {
  return JSON.stringify(
    CreateRepresentativeGlobals$outboundSchema.parse(
      createRepresentativeGlobals,
    ),
  );
}

export function createRepresentativeGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateRepresentativeGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRepresentativeGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRepresentativeGlobals' from JSON`,
  );
}

/** @internal */
export const CreateRepresentativeRequest$inboundSchema: z.ZodType<
  CreateRepresentativeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  CreateRepresentative: components.CreateRepresentative$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateRepresentative": "createRepresentative",
  });
});

/** @internal */
export type CreateRepresentativeRequest$Outbound = {
  accountID: string;
  CreateRepresentative: components.CreateRepresentative$Outbound;
};

/** @internal */
export const CreateRepresentativeRequest$outboundSchema: z.ZodType<
  CreateRepresentativeRequest$Outbound,
  z.ZodTypeDef,
  CreateRepresentativeRequest
> = z.object({
  accountID: z.string(),
  createRepresentative: components.CreateRepresentative$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createRepresentative: "CreateRepresentative",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRepresentativeRequest$ {
  /** @deprecated use `CreateRepresentativeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRepresentativeRequest$inboundSchema;
  /** @deprecated use `CreateRepresentativeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRepresentativeRequest$outboundSchema;
  /** @deprecated use `CreateRepresentativeRequest$Outbound` instead. */
  export type Outbound = CreateRepresentativeRequest$Outbound;
}

export function createRepresentativeRequestToJSON(
  createRepresentativeRequest: CreateRepresentativeRequest,
): string {
  return JSON.stringify(
    CreateRepresentativeRequest$outboundSchema.parse(
      createRepresentativeRequest,
    ),
  );
}

export function createRepresentativeRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRepresentativeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRepresentativeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRepresentativeRequest' from JSON`,
  );
}

/** @internal */
export const CreateRepresentativeResponse$inboundSchema: z.ZodType<
  CreateRepresentativeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Representative$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateRepresentativeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Representative$Outbound;
};

/** @internal */
export const CreateRepresentativeResponse$outboundSchema: z.ZodType<
  CreateRepresentativeResponse$Outbound,
  z.ZodTypeDef,
  CreateRepresentativeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Representative$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRepresentativeResponse$ {
  /** @deprecated use `CreateRepresentativeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateRepresentativeResponse$inboundSchema;
  /** @deprecated use `CreateRepresentativeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateRepresentativeResponse$outboundSchema;
  /** @deprecated use `CreateRepresentativeResponse$Outbound` instead. */
  export type Outbound = CreateRepresentativeResponse$Outbound;
}

export function createRepresentativeResponseToJSON(
  createRepresentativeResponse: CreateRepresentativeResponse,
): string {
  return JSON.stringify(
    CreateRepresentativeResponse$outboundSchema.parse(
      createRepresentativeResponse,
    ),
  );
}

export function createRepresentativeResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRepresentativeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRepresentativeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRepresentativeResponse' from JSON`,
  );
}
