/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateRepresentativeSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CreateRepresentativeRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * ID of the account.
   */
  accountID: string;
  createRepresentative: components.CreateRepresentative;
};

/** @internal */
export const CreateRepresentativeSecurity$inboundSchema: z.ZodType<
  CreateRepresentativeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CreateRepresentativeSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CreateRepresentativeSecurity$outboundSchema: z.ZodType<
  CreateRepresentativeSecurity$Outbound,
  z.ZodTypeDef,
  CreateRepresentativeSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRepresentativeSecurity$ {
  /** @deprecated use `CreateRepresentativeSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateRepresentativeSecurity$inboundSchema;
  /** @deprecated use `CreateRepresentativeSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateRepresentativeSecurity$outboundSchema;
  /** @deprecated use `CreateRepresentativeSecurity$Outbound` instead. */
  export type Outbound = CreateRepresentativeSecurity$Outbound;
}

export function createRepresentativeSecurityToJSON(
  createRepresentativeSecurity: CreateRepresentativeSecurity,
): string {
  return JSON.stringify(
    CreateRepresentativeSecurity$outboundSchema.parse(
      createRepresentativeSecurity,
    ),
  );
}

export function createRepresentativeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateRepresentativeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRepresentativeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRepresentativeSecurity' from JSON`,
  );
}

/** @internal */
export const CreateRepresentativeRequest$inboundSchema: z.ZodType<
  CreateRepresentativeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  CreateRepresentative: components.CreateRepresentative$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CreateRepresentative": "createRepresentative",
  });
});

/** @internal */
export type CreateRepresentativeRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  CreateRepresentative: components.CreateRepresentative$Outbound;
};

/** @internal */
export const CreateRepresentativeRequest$outboundSchema: z.ZodType<
  CreateRepresentativeRequest$Outbound,
  z.ZodTypeDef,
  CreateRepresentativeRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  createRepresentative: components.CreateRepresentative$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    createRepresentative: "CreateRepresentative",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRepresentativeRequest$ {
  /** @deprecated use `CreateRepresentativeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRepresentativeRequest$inboundSchema;
  /** @deprecated use `CreateRepresentativeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRepresentativeRequest$outboundSchema;
  /** @deprecated use `CreateRepresentativeRequest$Outbound` instead. */
  export type Outbound = CreateRepresentativeRequest$Outbound;
}

export function createRepresentativeRequestToJSON(
  createRepresentativeRequest: CreateRepresentativeRequest,
): string {
  return JSON.stringify(
    CreateRepresentativeRequest$outboundSchema.parse(
      createRepresentativeRequest,
    ),
  );
}

export function createRepresentativeRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRepresentativeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRepresentativeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRepresentativeRequest' from JSON`,
  );
}
