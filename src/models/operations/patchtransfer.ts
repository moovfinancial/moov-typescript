/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchTransferSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type PatchTransferRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Identifier for the transfer.
   */
  transferID: string;
  accountID: string;
};

/** @internal */
export const PatchTransferSecurity$inboundSchema: z.ZodType<
  PatchTransferSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type PatchTransferSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const PatchTransferSecurity$outboundSchema: z.ZodType<
  PatchTransferSecurity$Outbound,
  z.ZodTypeDef,
  PatchTransferSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransferSecurity$ {
  /** @deprecated use `PatchTransferSecurity$inboundSchema` instead. */
  export const inboundSchema = PatchTransferSecurity$inboundSchema;
  /** @deprecated use `PatchTransferSecurity$outboundSchema` instead. */
  export const outboundSchema = PatchTransferSecurity$outboundSchema;
  /** @deprecated use `PatchTransferSecurity$Outbound` instead. */
  export type Outbound = PatchTransferSecurity$Outbound;
}

export function patchTransferSecurityToJSON(
  patchTransferSecurity: PatchTransferSecurity,
): string {
  return JSON.stringify(
    PatchTransferSecurity$outboundSchema.parse(patchTransferSecurity),
  );
}

export function patchTransferSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransferSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTransferSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransferSecurity' from JSON`,
  );
}

/** @internal */
export const PatchTransferRequest$inboundSchema: z.ZodType<
  PatchTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  transferID: z.string(),
  accountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type PatchTransferRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  transferID: string;
  accountID: string;
};

/** @internal */
export const PatchTransferRequest$outboundSchema: z.ZodType<
  PatchTransferRequest$Outbound,
  z.ZodTypeDef,
  PatchTransferRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  transferID: z.string(),
  accountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransferRequest$ {
  /** @deprecated use `PatchTransferRequest$inboundSchema` instead. */
  export const inboundSchema = PatchTransferRequest$inboundSchema;
  /** @deprecated use `PatchTransferRequest$outboundSchema` instead. */
  export const outboundSchema = PatchTransferRequest$outboundSchema;
  /** @deprecated use `PatchTransferRequest$Outbound` instead. */
  export type Outbound = PatchTransferRequest$Outbound;
}

export function patchTransferRequestToJSON(
  patchTransferRequest: PatchTransferRequest,
): string {
  return JSON.stringify(
    PatchTransferRequest$outboundSchema.parse(patchTransferRequest),
  );
}

export function patchTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransferRequest' from JSON`,
  );
}
