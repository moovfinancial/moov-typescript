/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateReversalGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateReversalRequest = {
  /**
   * Prevents duplicate reversals from being created.
   */
  xIdempotencyKey: string;
  /**
   * The Moov account ID.
   */
  accountID: string;
  /**
   * The transfer ID to reverse.
   */
  transferID: string;
  createReversal?: components.CreateReversal | undefined;
};

export type CreateReversalResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Reversal;
};

/** @internal */
export const CreateReversalGlobals$inboundSchema: z.ZodType<
  CreateReversalGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type CreateReversalGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const CreateReversalGlobals$outboundSchema: z.ZodType<
  CreateReversalGlobals$Outbound,
  z.ZodTypeDef,
  CreateReversalGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReversalGlobals$ {
  /** @deprecated use `CreateReversalGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateReversalGlobals$inboundSchema;
  /** @deprecated use `CreateReversalGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateReversalGlobals$outboundSchema;
  /** @deprecated use `CreateReversalGlobals$Outbound` instead. */
  export type Outbound = CreateReversalGlobals$Outbound;
}

export function createReversalGlobalsToJSON(
  createReversalGlobals: CreateReversalGlobals,
): string {
  return JSON.stringify(
    CreateReversalGlobals$outboundSchema.parse(createReversalGlobals),
  );
}

export function createReversalGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateReversalGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReversalGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReversalGlobals' from JSON`,
  );
}

/** @internal */
export const CreateReversalRequest$inboundSchema: z.ZodType<
  CreateReversalRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-idempotency-key": z.string(),
  accountID: z.string(),
  transferID: z.string(),
  CreateReversal: components.CreateReversal$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "x-idempotency-key": "xIdempotencyKey",
    "CreateReversal": "createReversal",
  });
});

/** @internal */
export type CreateReversalRequest$Outbound = {
  "x-idempotency-key": string;
  accountID: string;
  transferID: string;
  CreateReversal?: components.CreateReversal$Outbound | undefined;
};

/** @internal */
export const CreateReversalRequest$outboundSchema: z.ZodType<
  CreateReversalRequest$Outbound,
  z.ZodTypeDef,
  CreateReversalRequest
> = z.object({
  xIdempotencyKey: z.string(),
  accountID: z.string(),
  transferID: z.string(),
  createReversal: components.CreateReversal$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    xIdempotencyKey: "x-idempotency-key",
    createReversal: "CreateReversal",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReversalRequest$ {
  /** @deprecated use `CreateReversalRequest$inboundSchema` instead. */
  export const inboundSchema = CreateReversalRequest$inboundSchema;
  /** @deprecated use `CreateReversalRequest$outboundSchema` instead. */
  export const outboundSchema = CreateReversalRequest$outboundSchema;
  /** @deprecated use `CreateReversalRequest$Outbound` instead. */
  export type Outbound = CreateReversalRequest$Outbound;
}

export function createReversalRequestToJSON(
  createReversalRequest: CreateReversalRequest,
): string {
  return JSON.stringify(
    CreateReversalRequest$outboundSchema.parse(createReversalRequest),
  );
}

export function createReversalRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateReversalRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReversalRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReversalRequest' from JSON`,
  );
}

/** @internal */
export const CreateReversalResponse$inboundSchema: z.ZodType<
  CreateReversalResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Reversal$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateReversalResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Reversal$Outbound;
};

/** @internal */
export const CreateReversalResponse$outboundSchema: z.ZodType<
  CreateReversalResponse$Outbound,
  z.ZodTypeDef,
  CreateReversalResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Reversal$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReversalResponse$ {
  /** @deprecated use `CreateReversalResponse$inboundSchema` instead. */
  export const inboundSchema = CreateReversalResponse$inboundSchema;
  /** @deprecated use `CreateReversalResponse$outboundSchema` instead. */
  export const outboundSchema = CreateReversalResponse$outboundSchema;
  /** @deprecated use `CreateReversalResponse$Outbound` instead. */
  export type Outbound = CreateReversalResponse$Outbound;
}

export function createReversalResponseToJSON(
  createReversalResponse: CreateReversalResponse,
): string {
  return JSON.stringify(
    CreateReversalResponse$outboundSchema.parse(createReversalResponse),
  );
}

export function createReversalResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateReversalResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReversalResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReversalResponse' from JSON`,
  );
}
