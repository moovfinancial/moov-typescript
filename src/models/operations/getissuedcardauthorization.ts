/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIssuedCardAuthorizationSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetIssuedCardAuthorizationRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * The Moov business account for which cards have been issued.
   */
  accountID: string;
  authorizationID: string;
};

/** @internal */
export const GetIssuedCardAuthorizationSecurity$inboundSchema: z.ZodType<
  GetIssuedCardAuthorizationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetIssuedCardAuthorizationSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetIssuedCardAuthorizationSecurity$outboundSchema: z.ZodType<
  GetIssuedCardAuthorizationSecurity$Outbound,
  z.ZodTypeDef,
  GetIssuedCardAuthorizationSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIssuedCardAuthorizationSecurity$ {
  /** @deprecated use `GetIssuedCardAuthorizationSecurity$inboundSchema` instead. */
  export const inboundSchema = GetIssuedCardAuthorizationSecurity$inboundSchema;
  /** @deprecated use `GetIssuedCardAuthorizationSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetIssuedCardAuthorizationSecurity$outboundSchema;
  /** @deprecated use `GetIssuedCardAuthorizationSecurity$Outbound` instead. */
  export type Outbound = GetIssuedCardAuthorizationSecurity$Outbound;
}

export function getIssuedCardAuthorizationSecurityToJSON(
  getIssuedCardAuthorizationSecurity: GetIssuedCardAuthorizationSecurity,
): string {
  return JSON.stringify(
    GetIssuedCardAuthorizationSecurity$outboundSchema.parse(
      getIssuedCardAuthorizationSecurity,
    ),
  );
}

export function getIssuedCardAuthorizationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetIssuedCardAuthorizationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetIssuedCardAuthorizationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIssuedCardAuthorizationSecurity' from JSON`,
  );
}

/** @internal */
export const GetIssuedCardAuthorizationRequest$inboundSchema: z.ZodType<
  GetIssuedCardAuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  authorizationID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetIssuedCardAuthorizationRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  authorizationID: string;
};

/** @internal */
export const GetIssuedCardAuthorizationRequest$outboundSchema: z.ZodType<
  GetIssuedCardAuthorizationRequest$Outbound,
  z.ZodTypeDef,
  GetIssuedCardAuthorizationRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  authorizationID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIssuedCardAuthorizationRequest$ {
  /** @deprecated use `GetIssuedCardAuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = GetIssuedCardAuthorizationRequest$inboundSchema;
  /** @deprecated use `GetIssuedCardAuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetIssuedCardAuthorizationRequest$outboundSchema;
  /** @deprecated use `GetIssuedCardAuthorizationRequest$Outbound` instead. */
  export type Outbound = GetIssuedCardAuthorizationRequest$Outbound;
}

export function getIssuedCardAuthorizationRequestToJSON(
  getIssuedCardAuthorizationRequest: GetIssuedCardAuthorizationRequest,
): string {
  return JSON.stringify(
    GetIssuedCardAuthorizationRequest$outboundSchema.parse(
      getIssuedCardAuthorizationRequest,
    ),
  );
}

export function getIssuedCardAuthorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIssuedCardAuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIssuedCardAuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIssuedCardAuthorizationRequest' from JSON`,
  );
}
