/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchInstitutionsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type SearchInstitutionsRequest = {
  /**
   * Name of the financial institution. Either `name` or `routingNumber` is required.
   */
  name?: string | undefined;
  /**
   * Routing number for a financial institution. Either `routingNumber` or `name` is required.
   */
  routingNumber?: string | undefined;
  /**
   * Maximum results returned by a search.
   */
  limit?: number | undefined;
};

export type SearchInstitutionsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.InstitutionsSearchResponse;
};

/** @internal */
export const SearchInstitutionsGlobals$inboundSchema: z.ZodType<
  SearchInstitutionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type SearchInstitutionsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const SearchInstitutionsGlobals$outboundSchema: z.ZodType<
  SearchInstitutionsGlobals$Outbound,
  z.ZodTypeDef,
  SearchInstitutionsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchInstitutionsGlobals$ {
  /** @deprecated use `SearchInstitutionsGlobals$inboundSchema` instead. */
  export const inboundSchema = SearchInstitutionsGlobals$inboundSchema;
  /** @deprecated use `SearchInstitutionsGlobals$outboundSchema` instead. */
  export const outboundSchema = SearchInstitutionsGlobals$outboundSchema;
  /** @deprecated use `SearchInstitutionsGlobals$Outbound` instead. */
  export type Outbound = SearchInstitutionsGlobals$Outbound;
}

export function searchInstitutionsGlobalsToJSON(
  searchInstitutionsGlobals: SearchInstitutionsGlobals,
): string {
  return JSON.stringify(
    SearchInstitutionsGlobals$outboundSchema.parse(searchInstitutionsGlobals),
  );
}

export function searchInstitutionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SearchInstitutionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchInstitutionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchInstitutionsGlobals' from JSON`,
  );
}

/** @internal */
export const SearchInstitutionsRequest$inboundSchema: z.ZodType<
  SearchInstitutionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  routingNumber: z.string().optional(),
  limit: z.number().int().optional(),
});

/** @internal */
export type SearchInstitutionsRequest$Outbound = {
  name?: string | undefined;
  routingNumber?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const SearchInstitutionsRequest$outboundSchema: z.ZodType<
  SearchInstitutionsRequest$Outbound,
  z.ZodTypeDef,
  SearchInstitutionsRequest
> = z.object({
  name: z.string().optional(),
  routingNumber: z.string().optional(),
  limit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchInstitutionsRequest$ {
  /** @deprecated use `SearchInstitutionsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchInstitutionsRequest$inboundSchema;
  /** @deprecated use `SearchInstitutionsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchInstitutionsRequest$outboundSchema;
  /** @deprecated use `SearchInstitutionsRequest$Outbound` instead. */
  export type Outbound = SearchInstitutionsRequest$Outbound;
}

export function searchInstitutionsRequestToJSON(
  searchInstitutionsRequest: SearchInstitutionsRequest,
): string {
  return JSON.stringify(
    SearchInstitutionsRequest$outboundSchema.parse(searchInstitutionsRequest),
  );
}

export function searchInstitutionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchInstitutionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchInstitutionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchInstitutionsRequest' from JSON`,
  );
}

/** @internal */
export const SearchInstitutionsResponse$inboundSchema: z.ZodType<
  SearchInstitutionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.InstitutionsSearchResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type SearchInstitutionsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.InstitutionsSearchResponse$Outbound;
};

/** @internal */
export const SearchInstitutionsResponse$outboundSchema: z.ZodType<
  SearchInstitutionsResponse$Outbound,
  z.ZodTypeDef,
  SearchInstitutionsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.InstitutionsSearchResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchInstitutionsResponse$ {
  /** @deprecated use `SearchInstitutionsResponse$inboundSchema` instead. */
  export const inboundSchema = SearchInstitutionsResponse$inboundSchema;
  /** @deprecated use `SearchInstitutionsResponse$outboundSchema` instead. */
  export const outboundSchema = SearchInstitutionsResponse$outboundSchema;
  /** @deprecated use `SearchInstitutionsResponse$Outbound` instead. */
  export type Outbound = SearchInstitutionsResponse$Outbound;
}

export function searchInstitutionsResponseToJSON(
  searchInstitutionsResponse: SearchInstitutionsResponse,
): string {
  return JSON.stringify(
    SearchInstitutionsResponse$outboundSchema.parse(searchInstitutionsResponse),
  );
}

export function searchInstitutionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchInstitutionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchInstitutionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchInstitutionsResponse' from JSON`,
  );
}
