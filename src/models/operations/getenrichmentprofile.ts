/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEnrichmentProfileGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetEnrichmentProfileRequest = {
  email: string;
};

export type GetEnrichmentProfileResponse = {
  headers: { [k: string]: Array<string> };
  result: components.EnrichedBusinessResponse;
};

/** @internal */
export const GetEnrichmentProfileGlobals$inboundSchema: z.ZodType<
  GetEnrichmentProfileGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetEnrichmentProfileGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetEnrichmentProfileGlobals$outboundSchema: z.ZodType<
  GetEnrichmentProfileGlobals$Outbound,
  z.ZodTypeDef,
  GetEnrichmentProfileGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnrichmentProfileGlobals$ {
  /** @deprecated use `GetEnrichmentProfileGlobals$inboundSchema` instead. */
  export const inboundSchema = GetEnrichmentProfileGlobals$inboundSchema;
  /** @deprecated use `GetEnrichmentProfileGlobals$outboundSchema` instead. */
  export const outboundSchema = GetEnrichmentProfileGlobals$outboundSchema;
  /** @deprecated use `GetEnrichmentProfileGlobals$Outbound` instead. */
  export type Outbound = GetEnrichmentProfileGlobals$Outbound;
}

export function getEnrichmentProfileGlobalsToJSON(
  getEnrichmentProfileGlobals: GetEnrichmentProfileGlobals,
): string {
  return JSON.stringify(
    GetEnrichmentProfileGlobals$outboundSchema.parse(
      getEnrichmentProfileGlobals,
    ),
  );
}

export function getEnrichmentProfileGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetEnrichmentProfileGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEnrichmentProfileGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEnrichmentProfileGlobals' from JSON`,
  );
}

/** @internal */
export const GetEnrichmentProfileRequest$inboundSchema: z.ZodType<
  GetEnrichmentProfileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
});

/** @internal */
export type GetEnrichmentProfileRequest$Outbound = {
  email: string;
};

/** @internal */
export const GetEnrichmentProfileRequest$outboundSchema: z.ZodType<
  GetEnrichmentProfileRequest$Outbound,
  z.ZodTypeDef,
  GetEnrichmentProfileRequest
> = z.object({
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnrichmentProfileRequest$ {
  /** @deprecated use `GetEnrichmentProfileRequest$inboundSchema` instead. */
  export const inboundSchema = GetEnrichmentProfileRequest$inboundSchema;
  /** @deprecated use `GetEnrichmentProfileRequest$outboundSchema` instead. */
  export const outboundSchema = GetEnrichmentProfileRequest$outboundSchema;
  /** @deprecated use `GetEnrichmentProfileRequest$Outbound` instead. */
  export type Outbound = GetEnrichmentProfileRequest$Outbound;
}

export function getEnrichmentProfileRequestToJSON(
  getEnrichmentProfileRequest: GetEnrichmentProfileRequest,
): string {
  return JSON.stringify(
    GetEnrichmentProfileRequest$outboundSchema.parse(
      getEnrichmentProfileRequest,
    ),
  );
}

export function getEnrichmentProfileRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEnrichmentProfileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEnrichmentProfileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEnrichmentProfileRequest' from JSON`,
  );
}

/** @internal */
export const GetEnrichmentProfileResponse$inboundSchema: z.ZodType<
  GetEnrichmentProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.EnrichedBusinessResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetEnrichmentProfileResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.EnrichedBusinessResponse$Outbound;
};

/** @internal */
export const GetEnrichmentProfileResponse$outboundSchema: z.ZodType<
  GetEnrichmentProfileResponse$Outbound,
  z.ZodTypeDef,
  GetEnrichmentProfileResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.EnrichedBusinessResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnrichmentProfileResponse$ {
  /** @deprecated use `GetEnrichmentProfileResponse$inboundSchema` instead. */
  export const inboundSchema = GetEnrichmentProfileResponse$inboundSchema;
  /** @deprecated use `GetEnrichmentProfileResponse$outboundSchema` instead. */
  export const outboundSchema = GetEnrichmentProfileResponse$outboundSchema;
  /** @deprecated use `GetEnrichmentProfileResponse$Outbound` instead. */
  export type Outbound = GetEnrichmentProfileResponse$Outbound;
}

export function getEnrichmentProfileResponseToJSON(
  getEnrichmentProfileResponse: GetEnrichmentProfileResponse,
): string {
  return JSON.stringify(
    GetEnrichmentProfileResponse$outboundSchema.parse(
      getEnrichmentProfileResponse,
    ),
  );
}

export function getEnrichmentProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetEnrichmentProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEnrichmentProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEnrichmentProfileResponse' from JSON`,
  );
}
