/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDisputeEvidenceGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetDisputeEvidenceRequest = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

export type GetDisputeEvidenceResponse = {
  headers: { [k: string]: Array<string> };
  result: components.DisputeEvidenceResponse;
};

/** @internal */
export const GetDisputeEvidenceGlobals$inboundSchema: z.ZodType<
  GetDisputeEvidenceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetDisputeEvidenceGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetDisputeEvidenceGlobals$outboundSchema: z.ZodType<
  GetDisputeEvidenceGlobals$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceGlobals$ {
  /** @deprecated use `GetDisputeEvidenceGlobals$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceGlobals$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceGlobals$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceGlobals$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceGlobals$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceGlobals$Outbound;
}

export function getDisputeEvidenceGlobalsToJSON(
  getDisputeEvidenceGlobals: GetDisputeEvidenceGlobals,
): string {
  return JSON.stringify(
    GetDisputeEvidenceGlobals$outboundSchema.parse(getDisputeEvidenceGlobals),
  );
}

export function getDisputeEvidenceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceGlobals' from JSON`,
  );
}

/** @internal */
export const GetDisputeEvidenceRequest$inboundSchema: z.ZodType<
  GetDisputeEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
});

/** @internal */
export type GetDisputeEvidenceRequest$Outbound = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

/** @internal */
export const GetDisputeEvidenceRequest$outboundSchema: z.ZodType<
  GetDisputeEvidenceRequest$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceRequest$ {
  /** @deprecated use `GetDisputeEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceRequest$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceRequest$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceRequest$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceRequest$Outbound;
}

export function getDisputeEvidenceRequestToJSON(
  getDisputeEvidenceRequest: GetDisputeEvidenceRequest,
): string {
  return JSON.stringify(
    GetDisputeEvidenceRequest$outboundSchema.parse(getDisputeEvidenceRequest),
  );
}

export function getDisputeEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceRequest' from JSON`,
  );
}

/** @internal */
export const GetDisputeEvidenceResponse$inboundSchema: z.ZodType<
  GetDisputeEvidenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.DisputeEvidenceResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetDisputeEvidenceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.DisputeEvidenceResponse$Outbound;
};

/** @internal */
export const GetDisputeEvidenceResponse$outboundSchema: z.ZodType<
  GetDisputeEvidenceResponse$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.DisputeEvidenceResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceResponse$ {
  /** @deprecated use `GetDisputeEvidenceResponse$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceResponse$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceResponse$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceResponse$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceResponse$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceResponse$Outbound;
}

export function getDisputeEvidenceResponseToJSON(
  getDisputeEvidenceResponse: GetDisputeEvidenceResponse,
): string {
  return JSON.stringify(
    GetDisputeEvidenceResponse$outboundSchema.parse(getDisputeEvidenceResponse),
  );
}

export function getDisputeEvidenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceResponse' from JSON`,
  );
}
