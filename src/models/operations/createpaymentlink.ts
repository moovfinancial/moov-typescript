/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePaymentLinkGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreatePaymentLinkRequest = {
  accountID: string;
  createPaymentLink: components.CreatePaymentLink;
};

export type CreatePaymentLinkResponse = {
  headers: { [k: string]: Array<string> };
  result: components.PaymentLink;
};

/** @internal */
export const CreatePaymentLinkGlobals$inboundSchema: z.ZodType<
  CreatePaymentLinkGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreatePaymentLinkGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreatePaymentLinkGlobals$outboundSchema: z.ZodType<
  CreatePaymentLinkGlobals$Outbound,
  z.ZodTypeDef,
  CreatePaymentLinkGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentLinkGlobals$ {
  /** @deprecated use `CreatePaymentLinkGlobals$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentLinkGlobals$inboundSchema;
  /** @deprecated use `CreatePaymentLinkGlobals$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentLinkGlobals$outboundSchema;
  /** @deprecated use `CreatePaymentLinkGlobals$Outbound` instead. */
  export type Outbound = CreatePaymentLinkGlobals$Outbound;
}

export function createPaymentLinkGlobalsToJSON(
  createPaymentLinkGlobals: CreatePaymentLinkGlobals,
): string {
  return JSON.stringify(
    CreatePaymentLinkGlobals$outboundSchema.parse(createPaymentLinkGlobals),
  );
}

export function createPaymentLinkGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentLinkGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentLinkGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentLinkGlobals' from JSON`,
  );
}

/** @internal */
export const CreatePaymentLinkRequest$inboundSchema: z.ZodType<
  CreatePaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  CreatePaymentLink: components.CreatePaymentLink$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreatePaymentLink": "createPaymentLink",
  });
});

/** @internal */
export type CreatePaymentLinkRequest$Outbound = {
  accountID: string;
  CreatePaymentLink: components.CreatePaymentLink$Outbound;
};

/** @internal */
export const CreatePaymentLinkRequest$outboundSchema: z.ZodType<
  CreatePaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  CreatePaymentLinkRequest
> = z.object({
  accountID: z.string(),
  createPaymentLink: components.CreatePaymentLink$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createPaymentLink: "CreatePaymentLink",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentLinkRequest$ {
  /** @deprecated use `CreatePaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentLinkRequest$inboundSchema;
  /** @deprecated use `CreatePaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentLinkRequest$outboundSchema;
  /** @deprecated use `CreatePaymentLinkRequest$Outbound` instead. */
  export type Outbound = CreatePaymentLinkRequest$Outbound;
}

export function createPaymentLinkRequestToJSON(
  createPaymentLinkRequest: CreatePaymentLinkRequest,
): string {
  return JSON.stringify(
    CreatePaymentLinkRequest$outboundSchema.parse(createPaymentLinkRequest),
  );
}

export function createPaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentLinkRequest' from JSON`,
  );
}

/** @internal */
export const CreatePaymentLinkResponse$inboundSchema: z.ZodType<
  CreatePaymentLinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.PaymentLink$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreatePaymentLinkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.PaymentLink$Outbound;
};

/** @internal */
export const CreatePaymentLinkResponse$outboundSchema: z.ZodType<
  CreatePaymentLinkResponse$Outbound,
  z.ZodTypeDef,
  CreatePaymentLinkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.PaymentLink$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentLinkResponse$ {
  /** @deprecated use `CreatePaymentLinkResponse$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentLinkResponse$inboundSchema;
  /** @deprecated use `CreatePaymentLinkResponse$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentLinkResponse$outboundSchema;
  /** @deprecated use `CreatePaymentLinkResponse$Outbound` instead. */
  export type Outbound = CreatePaymentLinkResponse$Outbound;
}

export function createPaymentLinkResponseToJSON(
  createPaymentLinkResponse: CreatePaymentLinkResponse,
): string {
  return JSON.stringify(
    CreatePaymentLinkResponse$outboundSchema.parse(createPaymentLinkResponse),
  );
}

export function createPaymentLinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentLinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentLinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentLinkResponse' from JSON`,
  );
}
