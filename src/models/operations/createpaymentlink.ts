/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePaymentLinkSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CreatePaymentLinkRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  createPaymentLink: components.CreatePaymentLink;
};

/** @internal */
export const CreatePaymentLinkSecurity$inboundSchema: z.ZodType<
  CreatePaymentLinkSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CreatePaymentLinkSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CreatePaymentLinkSecurity$outboundSchema: z.ZodType<
  CreatePaymentLinkSecurity$Outbound,
  z.ZodTypeDef,
  CreatePaymentLinkSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentLinkSecurity$ {
  /** @deprecated use `CreatePaymentLinkSecurity$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentLinkSecurity$inboundSchema;
  /** @deprecated use `CreatePaymentLinkSecurity$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentLinkSecurity$outboundSchema;
  /** @deprecated use `CreatePaymentLinkSecurity$Outbound` instead. */
  export type Outbound = CreatePaymentLinkSecurity$Outbound;
}

export function createPaymentLinkSecurityToJSON(
  createPaymentLinkSecurity: CreatePaymentLinkSecurity,
): string {
  return JSON.stringify(
    CreatePaymentLinkSecurity$outboundSchema.parse(createPaymentLinkSecurity),
  );
}

export function createPaymentLinkSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentLinkSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentLinkSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentLinkSecurity' from JSON`,
  );
}

/** @internal */
export const CreatePaymentLinkRequest$inboundSchema: z.ZodType<
  CreatePaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  CreatePaymentLink: components.CreatePaymentLink$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CreatePaymentLink": "createPaymentLink",
  });
});

/** @internal */
export type CreatePaymentLinkRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  CreatePaymentLink: components.CreatePaymentLink$Outbound;
};

/** @internal */
export const CreatePaymentLinkRequest$outboundSchema: z.ZodType<
  CreatePaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  CreatePaymentLinkRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  createPaymentLink: components.CreatePaymentLink$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    createPaymentLink: "CreatePaymentLink",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentLinkRequest$ {
  /** @deprecated use `CreatePaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentLinkRequest$inboundSchema;
  /** @deprecated use `CreatePaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentLinkRequest$outboundSchema;
  /** @deprecated use `CreatePaymentLinkRequest$Outbound` instead. */
  export type Outbound = CreatePaymentLinkRequest$Outbound;
}

export function createPaymentLinkRequestToJSON(
  createPaymentLinkRequest: CreatePaymentLinkRequest,
): string {
  return JSON.stringify(
    CreatePaymentLinkRequest$outboundSchema.parse(createPaymentLinkRequest),
  );
}

export function createPaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentLinkRequest' from JSON`,
  );
}
