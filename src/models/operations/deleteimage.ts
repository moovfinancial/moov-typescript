/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteImageGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type DeleteImageRequest = {
  accountID: string;
  imageID: string;
};

export type DeleteImageResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteImageGlobals$inboundSchema: z.ZodType<
  DeleteImageGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type DeleteImageGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const DeleteImageGlobals$outboundSchema: z.ZodType<
  DeleteImageGlobals$Outbound,
  z.ZodTypeDef,
  DeleteImageGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteImageGlobals$ {
  /** @deprecated use `DeleteImageGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteImageGlobals$inboundSchema;
  /** @deprecated use `DeleteImageGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteImageGlobals$outboundSchema;
  /** @deprecated use `DeleteImageGlobals$Outbound` instead. */
  export type Outbound = DeleteImageGlobals$Outbound;
}

export function deleteImageGlobalsToJSON(
  deleteImageGlobals: DeleteImageGlobals,
): string {
  return JSON.stringify(
    DeleteImageGlobals$outboundSchema.parse(deleteImageGlobals),
  );
}

export function deleteImageGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteImageGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteImageGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteImageGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteImageRequest$inboundSchema: z.ZodType<
  DeleteImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
});

/** @internal */
export type DeleteImageRequest$Outbound = {
  accountID: string;
  imageID: string;
};

/** @internal */
export const DeleteImageRequest$outboundSchema: z.ZodType<
  DeleteImageRequest$Outbound,
  z.ZodTypeDef,
  DeleteImageRequest
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteImageRequest$ {
  /** @deprecated use `DeleteImageRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteImageRequest$inboundSchema;
  /** @deprecated use `DeleteImageRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteImageRequest$outboundSchema;
  /** @deprecated use `DeleteImageRequest$Outbound` instead. */
  export type Outbound = DeleteImageRequest$Outbound;
}

export function deleteImageRequestToJSON(
  deleteImageRequest: DeleteImageRequest,
): string {
  return JSON.stringify(
    DeleteImageRequest$outboundSchema.parse(deleteImageRequest),
  );
}

export function deleteImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteImageRequest' from JSON`,
  );
}

/** @internal */
export const DeleteImageResponse$inboundSchema: z.ZodType<
  DeleteImageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type DeleteImageResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteImageResponse$outboundSchema: z.ZodType<
  DeleteImageResponse$Outbound,
  z.ZodTypeDef,
  DeleteImageResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteImageResponse$ {
  /** @deprecated use `DeleteImageResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteImageResponse$inboundSchema;
  /** @deprecated use `DeleteImageResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteImageResponse$outboundSchema;
  /** @deprecated use `DeleteImageResponse$Outbound` instead. */
  export type Outbound = DeleteImageResponse$Outbound;
}

export function deleteImageResponseToJSON(
  deleteImageResponse: DeleteImageResponse,
): string {
  return JSON.stringify(
    DeleteImageResponse$outboundSchema.parse(deleteImageResponse),
  );
}

export function deleteImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteImageResponse' from JSON`,
  );
}
