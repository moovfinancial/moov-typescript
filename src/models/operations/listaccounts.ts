/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListAccountsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Filter connected accounts by name.
   *
   * @remarks
   *
   * If provided, this query will attempt to find matches against the following Account and Profile fields:
   * <ul>
   *   <li>Account `displayName`</li>
   *   <li>Individual Profile `firstName`, `middleName`, and `lastName`</li>
   *   <li>Business Profile `legalBusinessName`</li>
   * </ul>
   */
  name?: string | undefined;
  /**
   *   Filter connected accounts by email address.
   *
   * @remarks
   *
   *   Provide the full email address to filter by email.
   */
  email?: string | undefined;
  /**
   *   Filter connected accounts by AccountType.
   *
   * @remarks
   *
   *   If the `type` parameter is used in combination with `name`, only the corresponding type's name fields will
   *   be searched. For example, if `type=business` and `name=moov`, the search will attempt to find matches against
   *   the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).
   */
  type?: components.AccountType | undefined;
  /**
   *   Serves as an optional alias from a foreign/external system which can be used to reference this resource.
   */
  foreignID?: string | undefined;
  /**
   * Filter disconnected accounts.
   *
   * @remarks
   *
   * If true, the response will include disconnected accounts.
   */
  includeDisconnected?: boolean | undefined;
  /**
   *   Filter connected accounts by the capability.
   */
  capability?: components.CapabilityID | undefined;
  /**
   *   Filter connected accounts by the capability.
   */
  capabilityStatus?: components.CapabilityStatus | undefined;
  skip?: number | undefined;
  count?: number | undefined;
};

/** @internal */
export const ListAccountsSecurity$inboundSchema: z.ZodType<
  ListAccountsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListAccountsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListAccountsSecurity$outboundSchema: z.ZodType<
  ListAccountsSecurity$Outbound,
  z.ZodTypeDef,
  ListAccountsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountsSecurity$ {
  /** @deprecated use `ListAccountsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListAccountsSecurity$inboundSchema;
  /** @deprecated use `ListAccountsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListAccountsSecurity$outboundSchema;
  /** @deprecated use `ListAccountsSecurity$Outbound` instead. */
  export type Outbound = ListAccountsSecurity$Outbound;
}

export function listAccountsSecurityToJSON(
  listAccountsSecurity: ListAccountsSecurity,
): string {
  return JSON.stringify(
    ListAccountsSecurity$outboundSchema.parse(listAccountsSecurity),
  );
}

export function listAccountsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountsSecurity' from JSON`,
  );
}

/** @internal */
export const ListAccountsRequest$inboundSchema: z.ZodType<
  ListAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  type: components.AccountType$inboundSchema.optional(),
  foreignID: z.string().optional(),
  includeDisconnected: z.boolean().optional(),
  capability: components.CapabilityID$inboundSchema.optional(),
  capabilityStatus: components.CapabilityStatus$inboundSchema.optional(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListAccountsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  type?: string | undefined;
  foreignID?: string | undefined;
  includeDisconnected?: boolean | undefined;
  capability?: string | undefined;
  capabilityStatus?: string | undefined;
  skip?: number | undefined;
  count?: number | undefined;
};

/** @internal */
export const ListAccountsRequest$outboundSchema: z.ZodType<
  ListAccountsRequest$Outbound,
  z.ZodTypeDef,
  ListAccountsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  type: components.AccountType$outboundSchema.optional(),
  foreignID: z.string().optional(),
  includeDisconnected: z.boolean().optional(),
  capability: components.CapabilityID$outboundSchema.optional(),
  capabilityStatus: components.CapabilityStatus$outboundSchema.optional(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountsRequest$ {
  /** @deprecated use `ListAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountsRequest$inboundSchema;
  /** @deprecated use `ListAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccountsRequest$outboundSchema;
  /** @deprecated use `ListAccountsRequest$Outbound` instead. */
  export type Outbound = ListAccountsRequest$Outbound;
}

export function listAccountsRequestToJSON(
  listAccountsRequest: ListAccountsRequest,
): string {
  return JSON.stringify(
    ListAccountsRequest$outboundSchema.parse(listAccountsRequest),
  );
}

export function listAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountsRequest' from JSON`,
  );
}
