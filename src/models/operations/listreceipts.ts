/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListReceiptsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListReceiptsRequest = {
  /**
   * The transfer, schedule, or transfer occurrence ID to filter receipts by.
   */
  id: string;
};

export type ListReceiptsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.ReceiptResponse>;
};

/** @internal */
export const ListReceiptsGlobals$inboundSchema: z.ZodType<
  ListReceiptsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListReceiptsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListReceiptsGlobals$outboundSchema: z.ZodType<
  ListReceiptsGlobals$Outbound,
  z.ZodTypeDef,
  ListReceiptsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReceiptsGlobals$ {
  /** @deprecated use `ListReceiptsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListReceiptsGlobals$inboundSchema;
  /** @deprecated use `ListReceiptsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListReceiptsGlobals$outboundSchema;
  /** @deprecated use `ListReceiptsGlobals$Outbound` instead. */
  export type Outbound = ListReceiptsGlobals$Outbound;
}

export function listReceiptsGlobalsToJSON(
  listReceiptsGlobals: ListReceiptsGlobals,
): string {
  return JSON.stringify(
    ListReceiptsGlobals$outboundSchema.parse(listReceiptsGlobals),
  );
}

export function listReceiptsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListReceiptsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListReceiptsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListReceiptsGlobals' from JSON`,
  );
}

/** @internal */
export const ListReceiptsRequest$inboundSchema: z.ZodType<
  ListReceiptsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ListReceiptsRequest$Outbound = {
  id: string;
};

/** @internal */
export const ListReceiptsRequest$outboundSchema: z.ZodType<
  ListReceiptsRequest$Outbound,
  z.ZodTypeDef,
  ListReceiptsRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReceiptsRequest$ {
  /** @deprecated use `ListReceiptsRequest$inboundSchema` instead. */
  export const inboundSchema = ListReceiptsRequest$inboundSchema;
  /** @deprecated use `ListReceiptsRequest$outboundSchema` instead. */
  export const outboundSchema = ListReceiptsRequest$outboundSchema;
  /** @deprecated use `ListReceiptsRequest$Outbound` instead. */
  export type Outbound = ListReceiptsRequest$Outbound;
}

export function listReceiptsRequestToJSON(
  listReceiptsRequest: ListReceiptsRequest,
): string {
  return JSON.stringify(
    ListReceiptsRequest$outboundSchema.parse(listReceiptsRequest),
  );
}

export function listReceiptsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListReceiptsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListReceiptsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListReceiptsRequest' from JSON`,
  );
}

/** @internal */
export const ListReceiptsResponse$inboundSchema: z.ZodType<
  ListReceiptsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.ReceiptResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListReceiptsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.ReceiptResponse$Outbound>;
};

/** @internal */
export const ListReceiptsResponse$outboundSchema: z.ZodType<
  ListReceiptsResponse$Outbound,
  z.ZodTypeDef,
  ListReceiptsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.ReceiptResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReceiptsResponse$ {
  /** @deprecated use `ListReceiptsResponse$inboundSchema` instead. */
  export const inboundSchema = ListReceiptsResponse$inboundSchema;
  /** @deprecated use `ListReceiptsResponse$outboundSchema` instead. */
  export const outboundSchema = ListReceiptsResponse$outboundSchema;
  /** @deprecated use `ListReceiptsResponse$Outbound` instead. */
  export type Outbound = ListReceiptsResponse$Outbound;
}

export function listReceiptsResponseToJSON(
  listReceiptsResponse: ListReceiptsResponse,
): string {
  return JSON.stringify(
    ListReceiptsResponse$outboundSchema.parse(listReceiptsResponse),
  );
}

export function listReceiptsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListReceiptsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListReceiptsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListReceiptsResponse' from JSON`,
  );
}
