/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSweepConfigGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetSweepConfigRequest = {
  accountID: string;
  sweepConfigID: string;
};

export type GetSweepConfigResponse = {
  headers: { [k: string]: Array<string> };
  result: components.SweepConfig;
};

/** @internal */
export const GetSweepConfigGlobals$inboundSchema: z.ZodType<
  GetSweepConfigGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetSweepConfigGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetSweepConfigGlobals$outboundSchema: z.ZodType<
  GetSweepConfigGlobals$Outbound,
  z.ZodTypeDef,
  GetSweepConfigGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSweepConfigGlobals$ {
  /** @deprecated use `GetSweepConfigGlobals$inboundSchema` instead. */
  export const inboundSchema = GetSweepConfigGlobals$inboundSchema;
  /** @deprecated use `GetSweepConfigGlobals$outboundSchema` instead. */
  export const outboundSchema = GetSweepConfigGlobals$outboundSchema;
  /** @deprecated use `GetSweepConfigGlobals$Outbound` instead. */
  export type Outbound = GetSweepConfigGlobals$Outbound;
}

export function getSweepConfigGlobalsToJSON(
  getSweepConfigGlobals: GetSweepConfigGlobals,
): string {
  return JSON.stringify(
    GetSweepConfigGlobals$outboundSchema.parse(getSweepConfigGlobals),
  );
}

export function getSweepConfigGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetSweepConfigGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSweepConfigGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSweepConfigGlobals' from JSON`,
  );
}

/** @internal */
export const GetSweepConfigRequest$inboundSchema: z.ZodType<
  GetSweepConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  sweepConfigID: z.string(),
});

/** @internal */
export type GetSweepConfigRequest$Outbound = {
  accountID: string;
  sweepConfigID: string;
};

/** @internal */
export const GetSweepConfigRequest$outboundSchema: z.ZodType<
  GetSweepConfigRequest$Outbound,
  z.ZodTypeDef,
  GetSweepConfigRequest
> = z.object({
  accountID: z.string(),
  sweepConfigID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSweepConfigRequest$ {
  /** @deprecated use `GetSweepConfigRequest$inboundSchema` instead. */
  export const inboundSchema = GetSweepConfigRequest$inboundSchema;
  /** @deprecated use `GetSweepConfigRequest$outboundSchema` instead. */
  export const outboundSchema = GetSweepConfigRequest$outboundSchema;
  /** @deprecated use `GetSweepConfigRequest$Outbound` instead. */
  export type Outbound = GetSweepConfigRequest$Outbound;
}

export function getSweepConfigRequestToJSON(
  getSweepConfigRequest: GetSweepConfigRequest,
): string {
  return JSON.stringify(
    GetSweepConfigRequest$outboundSchema.parse(getSweepConfigRequest),
  );
}

export function getSweepConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSweepConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSweepConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSweepConfigRequest' from JSON`,
  );
}

/** @internal */
export const GetSweepConfigResponse$inboundSchema: z.ZodType<
  GetSweepConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.SweepConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetSweepConfigResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.SweepConfig$Outbound;
};

/** @internal */
export const GetSweepConfigResponse$outboundSchema: z.ZodType<
  GetSweepConfigResponse$Outbound,
  z.ZodTypeDef,
  GetSweepConfigResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.SweepConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSweepConfigResponse$ {
  /** @deprecated use `GetSweepConfigResponse$inboundSchema` instead. */
  export const inboundSchema = GetSweepConfigResponse$inboundSchema;
  /** @deprecated use `GetSweepConfigResponse$outboundSchema` instead. */
  export const outboundSchema = GetSweepConfigResponse$outboundSchema;
  /** @deprecated use `GetSweepConfigResponse$Outbound` instead. */
  export type Outbound = GetSweepConfigResponse$Outbound;
}

export function getSweepConfigResponseToJSON(
  getSweepConfigResponse: GetSweepConfigResponse,
): string {
  return JSON.stringify(
    GetSweepConfigResponse$outboundSchema.parse(getSweepConfigResponse),
  );
}

export function getSweepConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSweepConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSweepConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSweepConfigResponse' from JSON`,
  );
}
