/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPaymentMethodGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetPaymentMethodRequest = {
  accountID: string;
  paymentMethodID: string;
};

export type GetPaymentMethodResponse = {
  headers: { [k: string]: Array<string> };
  result: components.PaymentMethod;
};

/** @internal */
export const GetPaymentMethodGlobals$inboundSchema: z.ZodType<
  GetPaymentMethodGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetPaymentMethodGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetPaymentMethodGlobals$outboundSchema: z.ZodType<
  GetPaymentMethodGlobals$Outbound,
  z.ZodTypeDef,
  GetPaymentMethodGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentMethodGlobals$ {
  /** @deprecated use `GetPaymentMethodGlobals$inboundSchema` instead. */
  export const inboundSchema = GetPaymentMethodGlobals$inboundSchema;
  /** @deprecated use `GetPaymentMethodGlobals$outboundSchema` instead. */
  export const outboundSchema = GetPaymentMethodGlobals$outboundSchema;
  /** @deprecated use `GetPaymentMethodGlobals$Outbound` instead. */
  export type Outbound = GetPaymentMethodGlobals$Outbound;
}

export function getPaymentMethodGlobalsToJSON(
  getPaymentMethodGlobals: GetPaymentMethodGlobals,
): string {
  return JSON.stringify(
    GetPaymentMethodGlobals$outboundSchema.parse(getPaymentMethodGlobals),
  );
}

export function getPaymentMethodGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentMethodGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentMethodGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentMethodGlobals' from JSON`,
  );
}

/** @internal */
export const GetPaymentMethodRequest$inboundSchema: z.ZodType<
  GetPaymentMethodRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  paymentMethodID: z.string(),
});

/** @internal */
export type GetPaymentMethodRequest$Outbound = {
  accountID: string;
  paymentMethodID: string;
};

/** @internal */
export const GetPaymentMethodRequest$outboundSchema: z.ZodType<
  GetPaymentMethodRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentMethodRequest
> = z.object({
  accountID: z.string(),
  paymentMethodID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentMethodRequest$ {
  /** @deprecated use `GetPaymentMethodRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentMethodRequest$inboundSchema;
  /** @deprecated use `GetPaymentMethodRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentMethodRequest$outboundSchema;
  /** @deprecated use `GetPaymentMethodRequest$Outbound` instead. */
  export type Outbound = GetPaymentMethodRequest$Outbound;
}

export function getPaymentMethodRequestToJSON(
  getPaymentMethodRequest: GetPaymentMethodRequest,
): string {
  return JSON.stringify(
    GetPaymentMethodRequest$outboundSchema.parse(getPaymentMethodRequest),
  );
}

export function getPaymentMethodRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentMethodRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentMethodRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentMethodRequest' from JSON`,
  );
}

/** @internal */
export const GetPaymentMethodResponse$inboundSchema: z.ZodType<
  GetPaymentMethodResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.PaymentMethod$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetPaymentMethodResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.PaymentMethod$Outbound;
};

/** @internal */
export const GetPaymentMethodResponse$outboundSchema: z.ZodType<
  GetPaymentMethodResponse$Outbound,
  z.ZodTypeDef,
  GetPaymentMethodResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.PaymentMethod$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentMethodResponse$ {
  /** @deprecated use `GetPaymentMethodResponse$inboundSchema` instead. */
  export const inboundSchema = GetPaymentMethodResponse$inboundSchema;
  /** @deprecated use `GetPaymentMethodResponse$outboundSchema` instead. */
  export const outboundSchema = GetPaymentMethodResponse$outboundSchema;
  /** @deprecated use `GetPaymentMethodResponse$Outbound` instead. */
  export type Outbound = GetPaymentMethodResponse$Outbound;
}

export function getPaymentMethodResponseToJSON(
  getPaymentMethodResponse: GetPaymentMethodResponse,
): string {
  return JSON.stringify(
    GetPaymentMethodResponse$outboundSchema.parse(getPaymentMethodResponse),
  );
}

export function getPaymentMethodResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentMethodResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentMethodResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentMethodResponse' from JSON`,
  );
}
