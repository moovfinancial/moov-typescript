/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateScheduleSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateScheduleRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  scheduleID: string;
  upsertSchedule: components.UpsertSchedule;
};

/** @internal */
export const UpdateScheduleSecurity$inboundSchema: z.ZodType<
  UpdateScheduleSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateScheduleSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateScheduleSecurity$outboundSchema: z.ZodType<
  UpdateScheduleSecurity$Outbound,
  z.ZodTypeDef,
  UpdateScheduleSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleSecurity$ {
  /** @deprecated use `UpdateScheduleSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateScheduleSecurity$inboundSchema;
  /** @deprecated use `UpdateScheduleSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateScheduleSecurity$outboundSchema;
  /** @deprecated use `UpdateScheduleSecurity$Outbound` instead. */
  export type Outbound = UpdateScheduleSecurity$Outbound;
}

export function updateScheduleSecurityToJSON(
  updateScheduleSecurity: UpdateScheduleSecurity,
): string {
  return JSON.stringify(
    UpdateScheduleSecurity$outboundSchema.parse(updateScheduleSecurity),
  );
}

export function updateScheduleSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScheduleSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScheduleSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScheduleSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateScheduleRequest$inboundSchema: z.ZodType<
  UpdateScheduleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  scheduleID: z.string(),
  UpsertSchedule: components.UpsertSchedule$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpsertSchedule": "upsertSchedule",
  });
});

/** @internal */
export type UpdateScheduleRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  scheduleID: string;
  UpsertSchedule: components.UpsertSchedule$Outbound;
};

/** @internal */
export const UpdateScheduleRequest$outboundSchema: z.ZodType<
  UpdateScheduleRequest$Outbound,
  z.ZodTypeDef,
  UpdateScheduleRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  scheduleID: z.string(),
  upsertSchedule: components.UpsertSchedule$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    upsertSchedule: "UpsertSchedule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleRequest$ {
  /** @deprecated use `UpdateScheduleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateScheduleRequest$inboundSchema;
  /** @deprecated use `UpdateScheduleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateScheduleRequest$outboundSchema;
  /** @deprecated use `UpdateScheduleRequest$Outbound` instead. */
  export type Outbound = UpdateScheduleRequest$Outbound;
}

export function updateScheduleRequestToJSON(
  updateScheduleRequest: UpdateScheduleRequest,
): string {
  return JSON.stringify(
    UpdateScheduleRequest$outboundSchema.parse(updateScheduleRequest),
  );
}

export function updateScheduleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScheduleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScheduleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScheduleRequest' from JSON`,
  );
}
