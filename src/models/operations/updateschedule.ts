/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateScheduleGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateScheduleRequest = {
  /**
   * Account ID of the account that will run the transfer.
   */
  accountID: string;
  scheduleID: string;
  upsertSchedule: components.UpsertSchedule;
};

export type UpdateScheduleResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ScheduleResponse;
};

/** @internal */
export const UpdateScheduleGlobals$inboundSchema: z.ZodType<
  UpdateScheduleGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateScheduleGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateScheduleGlobals$outboundSchema: z.ZodType<
  UpdateScheduleGlobals$Outbound,
  z.ZodTypeDef,
  UpdateScheduleGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleGlobals$ {
  /** @deprecated use `UpdateScheduleGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateScheduleGlobals$inboundSchema;
  /** @deprecated use `UpdateScheduleGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateScheduleGlobals$outboundSchema;
  /** @deprecated use `UpdateScheduleGlobals$Outbound` instead. */
  export type Outbound = UpdateScheduleGlobals$Outbound;
}

export function updateScheduleGlobalsToJSON(
  updateScheduleGlobals: UpdateScheduleGlobals,
): string {
  return JSON.stringify(
    UpdateScheduleGlobals$outboundSchema.parse(updateScheduleGlobals),
  );
}

export function updateScheduleGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScheduleGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScheduleGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScheduleGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateScheduleRequest$inboundSchema: z.ZodType<
  UpdateScheduleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
  UpsertSchedule: components.UpsertSchedule$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpsertSchedule": "upsertSchedule",
  });
});

/** @internal */
export type UpdateScheduleRequest$Outbound = {
  accountID: string;
  scheduleID: string;
  UpsertSchedule: components.UpsertSchedule$Outbound;
};

/** @internal */
export const UpdateScheduleRequest$outboundSchema: z.ZodType<
  UpdateScheduleRequest$Outbound,
  z.ZodTypeDef,
  UpdateScheduleRequest
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
  upsertSchedule: components.UpsertSchedule$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    upsertSchedule: "UpsertSchedule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleRequest$ {
  /** @deprecated use `UpdateScheduleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateScheduleRequest$inboundSchema;
  /** @deprecated use `UpdateScheduleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateScheduleRequest$outboundSchema;
  /** @deprecated use `UpdateScheduleRequest$Outbound` instead. */
  export type Outbound = UpdateScheduleRequest$Outbound;
}

export function updateScheduleRequestToJSON(
  updateScheduleRequest: UpdateScheduleRequest,
): string {
  return JSON.stringify(
    UpdateScheduleRequest$outboundSchema.parse(updateScheduleRequest),
  );
}

export function updateScheduleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScheduleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScheduleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScheduleRequest' from JSON`,
  );
}

/** @internal */
export const UpdateScheduleResponse$inboundSchema: z.ZodType<
  UpdateScheduleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ScheduleResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateScheduleResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ScheduleResponse$Outbound;
};

/** @internal */
export const UpdateScheduleResponse$outboundSchema: z.ZodType<
  UpdateScheduleResponse$Outbound,
  z.ZodTypeDef,
  UpdateScheduleResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ScheduleResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleResponse$ {
  /** @deprecated use `UpdateScheduleResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateScheduleResponse$inboundSchema;
  /** @deprecated use `UpdateScheduleResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateScheduleResponse$outboundSchema;
  /** @deprecated use `UpdateScheduleResponse$Outbound` instead. */
  export type Outbound = UpdateScheduleResponse$Outbound;
}

export function updateScheduleResponseToJSON(
  updateScheduleResponse: UpdateScheduleResponse,
): string {
  return JSON.stringify(
    UpdateScheduleResponse$outboundSchema.parse(updateScheduleResponse),
  );
}

export function updateScheduleResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScheduleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScheduleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScheduleResponse' from JSON`,
  );
}
