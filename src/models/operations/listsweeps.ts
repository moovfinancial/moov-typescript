/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSweepsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListSweepsRequest = {
  accountID: string;
  walletID: string;
  skip?: number | undefined;
  count?: number | undefined;
  /**
   * Optional parameter to filter by sweep status.
   */
  status?: components.SweepStatus | undefined;
  /**
   * Optional string to filter by statement descriptor.
   */
  statementDescriptor?: string | undefined;
};

export type ListSweepsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Sweep>;
};

/** @internal */
export const ListSweepsGlobals$inboundSchema: z.ZodType<
  ListSweepsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListSweepsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListSweepsGlobals$outboundSchema: z.ZodType<
  ListSweepsGlobals$Outbound,
  z.ZodTypeDef,
  ListSweepsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepsGlobals$ {
  /** @deprecated use `ListSweepsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListSweepsGlobals$inboundSchema;
  /** @deprecated use `ListSweepsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListSweepsGlobals$outboundSchema;
  /** @deprecated use `ListSweepsGlobals$Outbound` instead. */
  export type Outbound = ListSweepsGlobals$Outbound;
}

export function listSweepsGlobalsToJSON(
  listSweepsGlobals: ListSweepsGlobals,
): string {
  return JSON.stringify(
    ListSweepsGlobals$outboundSchema.parse(listSweepsGlobals),
  );
}

export function listSweepsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepsGlobals' from JSON`,
  );
}

/** @internal */
export const ListSweepsRequest$inboundSchema: z.ZodType<
  ListSweepsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  status: components.SweepStatus$inboundSchema.optional(),
  statementDescriptor: z.string().optional(),
});

/** @internal */
export type ListSweepsRequest$Outbound = {
  accountID: string;
  walletID: string;
  skip?: number | undefined;
  count?: number | undefined;
  status?: string | undefined;
  statementDescriptor?: string | undefined;
};

/** @internal */
export const ListSweepsRequest$outboundSchema: z.ZodType<
  ListSweepsRequest$Outbound,
  z.ZodTypeDef,
  ListSweepsRequest
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  status: components.SweepStatus$outboundSchema.optional(),
  statementDescriptor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepsRequest$ {
  /** @deprecated use `ListSweepsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSweepsRequest$inboundSchema;
  /** @deprecated use `ListSweepsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSweepsRequest$outboundSchema;
  /** @deprecated use `ListSweepsRequest$Outbound` instead. */
  export type Outbound = ListSweepsRequest$Outbound;
}

export function listSweepsRequestToJSON(
  listSweepsRequest: ListSweepsRequest,
): string {
  return JSON.stringify(
    ListSweepsRequest$outboundSchema.parse(listSweepsRequest),
  );
}

export function listSweepsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepsRequest' from JSON`,
  );
}

/** @internal */
export const ListSweepsResponse$inboundSchema: z.ZodType<
  ListSweepsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Sweep$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListSweepsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Sweep$Outbound>;
};

/** @internal */
export const ListSweepsResponse$outboundSchema: z.ZodType<
  ListSweepsResponse$Outbound,
  z.ZodTypeDef,
  ListSweepsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Sweep$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepsResponse$ {
  /** @deprecated use `ListSweepsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSweepsResponse$inboundSchema;
  /** @deprecated use `ListSweepsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSweepsResponse$outboundSchema;
  /** @deprecated use `ListSweepsResponse$Outbound` instead. */
  export type Outbound = ListSweepsResponse$Outbound;
}

export function listSweepsResponseToJSON(
  listSweepsResponse: ListSweepsResponse,
): string {
  return JSON.stringify(
    ListSweepsResponse$outboundSchema.parse(listSweepsResponse),
  );
}

export function listSweepsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepsResponse' from JSON`,
  );
}
