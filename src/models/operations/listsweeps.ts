/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSweepsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListSweepsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  walletID: string;
  skip?: number | undefined;
  count?: number | undefined;
  /**
   * Optional parameter to filter by sweep status.
   */
  status?: components.SweepStatus | undefined;
  /**
   * Optional string to filter by statement descriptor.
   */
  statementDescriptor?: string | undefined;
};

/** @internal */
export const ListSweepsSecurity$inboundSchema: z.ZodType<
  ListSweepsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListSweepsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListSweepsSecurity$outboundSchema: z.ZodType<
  ListSweepsSecurity$Outbound,
  z.ZodTypeDef,
  ListSweepsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepsSecurity$ {
  /** @deprecated use `ListSweepsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListSweepsSecurity$inboundSchema;
  /** @deprecated use `ListSweepsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListSweepsSecurity$outboundSchema;
  /** @deprecated use `ListSweepsSecurity$Outbound` instead. */
  export type Outbound = ListSweepsSecurity$Outbound;
}

export function listSweepsSecurityToJSON(
  listSweepsSecurity: ListSweepsSecurity,
): string {
  return JSON.stringify(
    ListSweepsSecurity$outboundSchema.parse(listSweepsSecurity),
  );
}

export function listSweepsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepsSecurity' from JSON`,
  );
}

/** @internal */
export const ListSweepsRequest$inboundSchema: z.ZodType<
  ListSweepsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  status: components.SweepStatus$inboundSchema.optional(),
  statementDescriptor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListSweepsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  walletID: string;
  skip?: number | undefined;
  count?: number | undefined;
  status?: string | undefined;
  statementDescriptor?: string | undefined;
};

/** @internal */
export const ListSweepsRequest$outboundSchema: z.ZodType<
  ListSweepsRequest$Outbound,
  z.ZodTypeDef,
  ListSweepsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  status: components.SweepStatus$outboundSchema.optional(),
  statementDescriptor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSweepsRequest$ {
  /** @deprecated use `ListSweepsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSweepsRequest$inboundSchema;
  /** @deprecated use `ListSweepsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSweepsRequest$outboundSchema;
  /** @deprecated use `ListSweepsRequest$Outbound` instead. */
  export type Outbound = ListSweepsRequest$Outbound;
}

export function listSweepsRequestToJSON(
  listSweepsRequest: ListSweepsRequest,
): string {
  return JSON.stringify(
    ListSweepsRequest$outboundSchema.parse(listSweepsRequest),
  );
}

export function listSweepsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSweepsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSweepsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSweepsRequest' from JSON`,
  );
}
