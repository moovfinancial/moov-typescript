/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DisableCapabilityGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type DisableCapabilityRequest = {
  accountID: string;
  /**
   * Moov account capabilities.
   *
   * @remarks
   *
   * The `production-app`, `platform.production-app`, and / or `platform.wallet-transfers` capabilities might appear in your list. These are read-only capabilities that Moov requests and uses for account verification purposes. These capabilities remains active with your account and require no additional action.
   */
  capabilityID: components.CapabilityID;
};

export type DisableCapabilityResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableCapabilityGlobals$inboundSchema: z.ZodType<
  DisableCapabilityGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type DisableCapabilityGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const DisableCapabilityGlobals$outboundSchema: z.ZodType<
  DisableCapabilityGlobals$Outbound,
  z.ZodTypeDef,
  DisableCapabilityGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableCapabilityGlobals$ {
  /** @deprecated use `DisableCapabilityGlobals$inboundSchema` instead. */
  export const inboundSchema = DisableCapabilityGlobals$inboundSchema;
  /** @deprecated use `DisableCapabilityGlobals$outboundSchema` instead. */
  export const outboundSchema = DisableCapabilityGlobals$outboundSchema;
  /** @deprecated use `DisableCapabilityGlobals$Outbound` instead. */
  export type Outbound = DisableCapabilityGlobals$Outbound;
}

export function disableCapabilityGlobalsToJSON(
  disableCapabilityGlobals: DisableCapabilityGlobals,
): string {
  return JSON.stringify(
    DisableCapabilityGlobals$outboundSchema.parse(disableCapabilityGlobals),
  );
}

export function disableCapabilityGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DisableCapabilityGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableCapabilityGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableCapabilityGlobals' from JSON`,
  );
}

/** @internal */
export const DisableCapabilityRequest$inboundSchema: z.ZodType<
  DisableCapabilityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  capabilityID: components.CapabilityID$inboundSchema,
});

/** @internal */
export type DisableCapabilityRequest$Outbound = {
  accountID: string;
  capabilityID: string;
};

/** @internal */
export const DisableCapabilityRequest$outboundSchema: z.ZodType<
  DisableCapabilityRequest$Outbound,
  z.ZodTypeDef,
  DisableCapabilityRequest
> = z.object({
  accountID: z.string(),
  capabilityID: components.CapabilityID$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableCapabilityRequest$ {
  /** @deprecated use `DisableCapabilityRequest$inboundSchema` instead. */
  export const inboundSchema = DisableCapabilityRequest$inboundSchema;
  /** @deprecated use `DisableCapabilityRequest$outboundSchema` instead. */
  export const outboundSchema = DisableCapabilityRequest$outboundSchema;
  /** @deprecated use `DisableCapabilityRequest$Outbound` instead. */
  export type Outbound = DisableCapabilityRequest$Outbound;
}

export function disableCapabilityRequestToJSON(
  disableCapabilityRequest: DisableCapabilityRequest,
): string {
  return JSON.stringify(
    DisableCapabilityRequest$outboundSchema.parse(disableCapabilityRequest),
  );
}

export function disableCapabilityRequestFromJSON(
  jsonString: string,
): SafeParseResult<DisableCapabilityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableCapabilityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableCapabilityRequest' from JSON`,
  );
}

/** @internal */
export const DisableCapabilityResponse$inboundSchema: z.ZodType<
  DisableCapabilityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type DisableCapabilityResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableCapabilityResponse$outboundSchema: z.ZodType<
  DisableCapabilityResponse$Outbound,
  z.ZodTypeDef,
  DisableCapabilityResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableCapabilityResponse$ {
  /** @deprecated use `DisableCapabilityResponse$inboundSchema` instead. */
  export const inboundSchema = DisableCapabilityResponse$inboundSchema;
  /** @deprecated use `DisableCapabilityResponse$outboundSchema` instead. */
  export const outboundSchema = DisableCapabilityResponse$outboundSchema;
  /** @deprecated use `DisableCapabilityResponse$Outbound` instead. */
  export type Outbound = DisableCapabilityResponse$Outbound;
}

export function disableCapabilityResponseToJSON(
  disableCapabilityResponse: DisableCapabilityResponse,
): string {
  return JSON.stringify(
    DisableCapabilityResponse$outboundSchema.parse(disableCapabilityResponse),
  );
}

export function disableCapabilityResponseFromJSON(
  jsonString: string,
): SafeParseResult<DisableCapabilityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableCapabilityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableCapabilityResponse' from JSON`,
  );
}
