/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDisputeEvidenceDataSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetDisputeEvidenceDataRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

export type GetDisputeEvidenceDataResponse =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetDisputeEvidenceDataSecurity$inboundSchema: z.ZodType<
  GetDisputeEvidenceDataSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetDisputeEvidenceDataSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetDisputeEvidenceDataSecurity$outboundSchema: z.ZodType<
  GetDisputeEvidenceDataSecurity$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceDataSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceDataSecurity$ {
  /** @deprecated use `GetDisputeEvidenceDataSecurity$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceDataSecurity$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataSecurity$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceDataSecurity$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataSecurity$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceDataSecurity$Outbound;
}

export function getDisputeEvidenceDataSecurityToJSON(
  getDisputeEvidenceDataSecurity: GetDisputeEvidenceDataSecurity,
): string {
  return JSON.stringify(
    GetDisputeEvidenceDataSecurity$outboundSchema.parse(
      getDisputeEvidenceDataSecurity,
    ),
  );
}

export function getDisputeEvidenceDataSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceDataSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceDataSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceDataSecurity' from JSON`,
  );
}

/** @internal */
export const GetDisputeEvidenceDataRequest$inboundSchema: z.ZodType<
  GetDisputeEvidenceDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetDisputeEvidenceDataRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

/** @internal */
export const GetDisputeEvidenceDataRequest$outboundSchema: z.ZodType<
  GetDisputeEvidenceDataRequest$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceDataRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceDataRequest$ {
  /** @deprecated use `GetDisputeEvidenceDataRequest$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceDataRequest$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataRequest$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceDataRequest$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataRequest$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceDataRequest$Outbound;
}

export function getDisputeEvidenceDataRequestToJSON(
  getDisputeEvidenceDataRequest: GetDisputeEvidenceDataRequest,
): string {
  return JSON.stringify(
    GetDisputeEvidenceDataRequest$outboundSchema.parse(
      getDisputeEvidenceDataRequest,
    ),
  );
}

export function getDisputeEvidenceDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceDataRequest' from JSON`,
  );
}

/** @internal */
export const GetDisputeEvidenceDataResponse$inboundSchema: z.ZodType<
  GetDisputeEvidenceDataResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetDisputeEvidenceDataResponse$Outbound =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetDisputeEvidenceDataResponse$outboundSchema: z.ZodType<
  GetDisputeEvidenceDataResponse$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceDataResponse
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceDataResponse$ {
  /** @deprecated use `GetDisputeEvidenceDataResponse$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceDataResponse$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataResponse$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceDataResponse$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataResponse$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceDataResponse$Outbound;
}

export function getDisputeEvidenceDataResponseToJSON(
  getDisputeEvidenceDataResponse: GetDisputeEvidenceDataResponse,
): string {
  return JSON.stringify(
    GetDisputeEvidenceDataResponse$outboundSchema.parse(
      getDisputeEvidenceDataResponse,
    ),
  );
}

export function getDisputeEvidenceDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceDataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceDataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceDataResponse' from JSON`,
  );
}
