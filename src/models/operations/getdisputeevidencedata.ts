/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDisputeEvidenceDataGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetDisputeEvidenceDataRequest = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

export type GetDisputeEvidenceDataResponseResult =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

export type GetDisputeEvidenceDataResponse = {
  headers: { [k: string]: Array<string> };
  result:
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetDisputeEvidenceDataGlobals$inboundSchema: z.ZodType<
  GetDisputeEvidenceDataGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetDisputeEvidenceDataGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetDisputeEvidenceDataGlobals$outboundSchema: z.ZodType<
  GetDisputeEvidenceDataGlobals$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceDataGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceDataGlobals$ {
  /** @deprecated use `GetDisputeEvidenceDataGlobals$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceDataGlobals$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataGlobals$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceDataGlobals$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataGlobals$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceDataGlobals$Outbound;
}

export function getDisputeEvidenceDataGlobalsToJSON(
  getDisputeEvidenceDataGlobals: GetDisputeEvidenceDataGlobals,
): string {
  return JSON.stringify(
    GetDisputeEvidenceDataGlobals$outboundSchema.parse(
      getDisputeEvidenceDataGlobals,
    ),
  );
}

export function getDisputeEvidenceDataGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceDataGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceDataGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceDataGlobals' from JSON`,
  );
}

/** @internal */
export const GetDisputeEvidenceDataRequest$inboundSchema: z.ZodType<
  GetDisputeEvidenceDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
});

/** @internal */
export type GetDisputeEvidenceDataRequest$Outbound = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

/** @internal */
export const GetDisputeEvidenceDataRequest$outboundSchema: z.ZodType<
  GetDisputeEvidenceDataRequest$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceDataRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceDataRequest$ {
  /** @deprecated use `GetDisputeEvidenceDataRequest$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceDataRequest$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataRequest$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceDataRequest$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataRequest$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceDataRequest$Outbound;
}

export function getDisputeEvidenceDataRequestToJSON(
  getDisputeEvidenceDataRequest: GetDisputeEvidenceDataRequest,
): string {
  return JSON.stringify(
    GetDisputeEvidenceDataRequest$outboundSchema.parse(
      getDisputeEvidenceDataRequest,
    ),
  );
}

export function getDisputeEvidenceDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceDataRequest' from JSON`,
  );
}

/** @internal */
export const GetDisputeEvidenceDataResponseResult$inboundSchema: z.ZodType<
  GetDisputeEvidenceDataResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetDisputeEvidenceDataResponseResult$Outbound =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetDisputeEvidenceDataResponseResult$outboundSchema: z.ZodType<
  GetDisputeEvidenceDataResponseResult$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceDataResponseResult
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceDataResponseResult$ {
  /** @deprecated use `GetDisputeEvidenceDataResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    GetDisputeEvidenceDataResponseResult$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    GetDisputeEvidenceDataResponseResult$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataResponseResult$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceDataResponseResult$Outbound;
}

export function getDisputeEvidenceDataResponseResultToJSON(
  getDisputeEvidenceDataResponseResult: GetDisputeEvidenceDataResponseResult,
): string {
  return JSON.stringify(
    GetDisputeEvidenceDataResponseResult$outboundSchema.parse(
      getDisputeEvidenceDataResponseResult,
    ),
  );
}

export function getDisputeEvidenceDataResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceDataResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDisputeEvidenceDataResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceDataResponseResult' from JSON`,
  );
}

/** @internal */
export const GetDisputeEvidenceDataResponse$inboundSchema: z.ZodType<
  GetDisputeEvidenceDataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetDisputeEvidenceDataResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>
    | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetDisputeEvidenceDataResponse$outboundSchema: z.ZodType<
  GetDisputeEvidenceDataResponse$Outbound,
  z.ZodTypeDef,
  GetDisputeEvidenceDataResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDisputeEvidenceDataResponse$ {
  /** @deprecated use `GetDisputeEvidenceDataResponse$inboundSchema` instead. */
  export const inboundSchema = GetDisputeEvidenceDataResponse$inboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataResponse$outboundSchema` instead. */
  export const outboundSchema = GetDisputeEvidenceDataResponse$outboundSchema;
  /** @deprecated use `GetDisputeEvidenceDataResponse$Outbound` instead. */
  export type Outbound = GetDisputeEvidenceDataResponse$Outbound;
}

export function getDisputeEvidenceDataResponseToJSON(
  getDisputeEvidenceDataResponse: GetDisputeEvidenceDataResponse,
): string {
  return JSON.stringify(
    GetDisputeEvidenceDataResponse$outboundSchema.parse(
      getDisputeEvidenceDataResponse,
    ),
  );
}

export function getDisputeEvidenceDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDisputeEvidenceDataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDisputeEvidenceDataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDisputeEvidenceDataResponse' from JSON`,
  );
}
