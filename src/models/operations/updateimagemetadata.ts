/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateImageMetadataGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateImageMetadataRequest = {
  accountID: string;
  imageID: string;
  imageMetadataRequest: components.ImageMetadataRequest;
};

export type UpdateImageMetadataResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ImageMetadata;
};

/** @internal */
export const UpdateImageMetadataGlobals$inboundSchema: z.ZodType<
  UpdateImageMetadataGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateImageMetadataGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UpdateImageMetadataGlobals$outboundSchema: z.ZodType<
  UpdateImageMetadataGlobals$Outbound,
  z.ZodTypeDef,
  UpdateImageMetadataGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateImageMetadataGlobals$ {
  /** @deprecated use `UpdateImageMetadataGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateImageMetadataGlobals$inboundSchema;
  /** @deprecated use `UpdateImageMetadataGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateImageMetadataGlobals$outboundSchema;
  /** @deprecated use `UpdateImageMetadataGlobals$Outbound` instead. */
  export type Outbound = UpdateImageMetadataGlobals$Outbound;
}

export function updateImageMetadataGlobalsToJSON(
  updateImageMetadataGlobals: UpdateImageMetadataGlobals,
): string {
  return JSON.stringify(
    UpdateImageMetadataGlobals$outboundSchema.parse(updateImageMetadataGlobals),
  );
}

export function updateImageMetadataGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateImageMetadataGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateImageMetadataGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateImageMetadataGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateImageMetadataRequest$inboundSchema: z.ZodType<
  UpdateImageMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
  ImageMetadataRequest: components.ImageMetadataRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ImageMetadataRequest": "imageMetadataRequest",
  });
});

/** @internal */
export type UpdateImageMetadataRequest$Outbound = {
  accountID: string;
  imageID: string;
  ImageMetadataRequest: components.ImageMetadataRequest$Outbound;
};

/** @internal */
export const UpdateImageMetadataRequest$outboundSchema: z.ZodType<
  UpdateImageMetadataRequest$Outbound,
  z.ZodTypeDef,
  UpdateImageMetadataRequest
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
  imageMetadataRequest: components.ImageMetadataRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    imageMetadataRequest: "ImageMetadataRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateImageMetadataRequest$ {
  /** @deprecated use `UpdateImageMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateImageMetadataRequest$inboundSchema;
  /** @deprecated use `UpdateImageMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateImageMetadataRequest$outboundSchema;
  /** @deprecated use `UpdateImageMetadataRequest$Outbound` instead. */
  export type Outbound = UpdateImageMetadataRequest$Outbound;
}

export function updateImageMetadataRequestToJSON(
  updateImageMetadataRequest: UpdateImageMetadataRequest,
): string {
  return JSON.stringify(
    UpdateImageMetadataRequest$outboundSchema.parse(updateImageMetadataRequest),
  );
}

export function updateImageMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateImageMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateImageMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateImageMetadataRequest' from JSON`,
  );
}

/** @internal */
export const UpdateImageMetadataResponse$inboundSchema: z.ZodType<
  UpdateImageMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ImageMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateImageMetadataResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ImageMetadata$Outbound;
};

/** @internal */
export const UpdateImageMetadataResponse$outboundSchema: z.ZodType<
  UpdateImageMetadataResponse$Outbound,
  z.ZodTypeDef,
  UpdateImageMetadataResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ImageMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateImageMetadataResponse$ {
  /** @deprecated use `UpdateImageMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateImageMetadataResponse$inboundSchema;
  /** @deprecated use `UpdateImageMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateImageMetadataResponse$outboundSchema;
  /** @deprecated use `UpdateImageMetadataResponse$Outbound` instead. */
  export type Outbound = UpdateImageMetadataResponse$Outbound;
}

export function updateImageMetadataResponseToJSON(
  updateImageMetadataResponse: UpdateImageMetadataResponse,
): string {
  return JSON.stringify(
    UpdateImageMetadataResponse$outboundSchema.parse(
      updateImageMetadataResponse,
    ),
  );
}

export function updateImageMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateImageMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateImageMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateImageMetadataResponse' from JSON`,
  );
}
