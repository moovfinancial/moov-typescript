/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIssuedCardTransactionGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetIssuedCardTransactionRequest = {
  /**
   * The Moov business account for which cards have been issued.
   */
  accountID: string;
  cardTransactionID: string;
};

export type GetIssuedCardTransactionResponse = {
  headers: { [k: string]: Array<string> };
  result: components.IssuedCardTransaction;
};

/** @internal */
export const GetIssuedCardTransactionGlobals$inboundSchema: z.ZodType<
  GetIssuedCardTransactionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetIssuedCardTransactionGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetIssuedCardTransactionGlobals$outboundSchema: z.ZodType<
  GetIssuedCardTransactionGlobals$Outbound,
  z.ZodTypeDef,
  GetIssuedCardTransactionGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIssuedCardTransactionGlobals$ {
  /** @deprecated use `GetIssuedCardTransactionGlobals$inboundSchema` instead. */
  export const inboundSchema = GetIssuedCardTransactionGlobals$inboundSchema;
  /** @deprecated use `GetIssuedCardTransactionGlobals$outboundSchema` instead. */
  export const outboundSchema = GetIssuedCardTransactionGlobals$outboundSchema;
  /** @deprecated use `GetIssuedCardTransactionGlobals$Outbound` instead. */
  export type Outbound = GetIssuedCardTransactionGlobals$Outbound;
}

export function getIssuedCardTransactionGlobalsToJSON(
  getIssuedCardTransactionGlobals: GetIssuedCardTransactionGlobals,
): string {
  return JSON.stringify(
    GetIssuedCardTransactionGlobals$outboundSchema.parse(
      getIssuedCardTransactionGlobals,
    ),
  );
}

export function getIssuedCardTransactionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetIssuedCardTransactionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIssuedCardTransactionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIssuedCardTransactionGlobals' from JSON`,
  );
}

/** @internal */
export const GetIssuedCardTransactionRequest$inboundSchema: z.ZodType<
  GetIssuedCardTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  cardTransactionID: z.string(),
});

/** @internal */
export type GetIssuedCardTransactionRequest$Outbound = {
  accountID: string;
  cardTransactionID: string;
};

/** @internal */
export const GetIssuedCardTransactionRequest$outboundSchema: z.ZodType<
  GetIssuedCardTransactionRequest$Outbound,
  z.ZodTypeDef,
  GetIssuedCardTransactionRequest
> = z.object({
  accountID: z.string(),
  cardTransactionID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIssuedCardTransactionRequest$ {
  /** @deprecated use `GetIssuedCardTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = GetIssuedCardTransactionRequest$inboundSchema;
  /** @deprecated use `GetIssuedCardTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = GetIssuedCardTransactionRequest$outboundSchema;
  /** @deprecated use `GetIssuedCardTransactionRequest$Outbound` instead. */
  export type Outbound = GetIssuedCardTransactionRequest$Outbound;
}

export function getIssuedCardTransactionRequestToJSON(
  getIssuedCardTransactionRequest: GetIssuedCardTransactionRequest,
): string {
  return JSON.stringify(
    GetIssuedCardTransactionRequest$outboundSchema.parse(
      getIssuedCardTransactionRequest,
    ),
  );
}

export function getIssuedCardTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIssuedCardTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIssuedCardTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIssuedCardTransactionRequest' from JSON`,
  );
}

/** @internal */
export const GetIssuedCardTransactionResponse$inboundSchema: z.ZodType<
  GetIssuedCardTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.IssuedCardTransaction$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetIssuedCardTransactionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.IssuedCardTransaction$Outbound;
};

/** @internal */
export const GetIssuedCardTransactionResponse$outboundSchema: z.ZodType<
  GetIssuedCardTransactionResponse$Outbound,
  z.ZodTypeDef,
  GetIssuedCardTransactionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.IssuedCardTransaction$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIssuedCardTransactionResponse$ {
  /** @deprecated use `GetIssuedCardTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = GetIssuedCardTransactionResponse$inboundSchema;
  /** @deprecated use `GetIssuedCardTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = GetIssuedCardTransactionResponse$outboundSchema;
  /** @deprecated use `GetIssuedCardTransactionResponse$Outbound` instead. */
  export type Outbound = GetIssuedCardTransactionResponse$Outbound;
}

export function getIssuedCardTransactionResponseToJSON(
  getIssuedCardTransactionResponse: GetIssuedCardTransactionResponse,
): string {
  return JSON.stringify(
    GetIssuedCardTransactionResponse$outboundSchema.parse(
      getIssuedCardTransactionResponse,
    ),
  );
}

export function getIssuedCardTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetIssuedCardTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIssuedCardTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIssuedCardTransactionResponse' from JSON`,
  );
}
