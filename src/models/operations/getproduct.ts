/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProductGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetProductRequest = {
  accountID: string;
  productID: string;
};

export type GetProductResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Product;
};

/** @internal */
export const GetProductGlobals$inboundSchema: z.ZodType<
  GetProductGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetProductGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetProductGlobals$outboundSchema: z.ZodType<
  GetProductGlobals$Outbound,
  z.ZodTypeDef,
  GetProductGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductGlobals$ {
  /** @deprecated use `GetProductGlobals$inboundSchema` instead. */
  export const inboundSchema = GetProductGlobals$inboundSchema;
  /** @deprecated use `GetProductGlobals$outboundSchema` instead. */
  export const outboundSchema = GetProductGlobals$outboundSchema;
  /** @deprecated use `GetProductGlobals$Outbound` instead. */
  export type Outbound = GetProductGlobals$Outbound;
}

export function getProductGlobalsToJSON(
  getProductGlobals: GetProductGlobals,
): string {
  return JSON.stringify(
    GetProductGlobals$outboundSchema.parse(getProductGlobals),
  );
}

export function getProductGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetProductGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductGlobals' from JSON`,
  );
}

/** @internal */
export const GetProductRequest$inboundSchema: z.ZodType<
  GetProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  productID: z.string(),
});

/** @internal */
export type GetProductRequest$Outbound = {
  accountID: string;
  productID: string;
};

/** @internal */
export const GetProductRequest$outboundSchema: z.ZodType<
  GetProductRequest$Outbound,
  z.ZodTypeDef,
  GetProductRequest
> = z.object({
  accountID: z.string(),
  productID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductRequest$ {
  /** @deprecated use `GetProductRequest$inboundSchema` instead. */
  export const inboundSchema = GetProductRequest$inboundSchema;
  /** @deprecated use `GetProductRequest$outboundSchema` instead. */
  export const outboundSchema = GetProductRequest$outboundSchema;
  /** @deprecated use `GetProductRequest$Outbound` instead. */
  export type Outbound = GetProductRequest$Outbound;
}

export function getProductRequestToJSON(
  getProductRequest: GetProductRequest,
): string {
  return JSON.stringify(
    GetProductRequest$outboundSchema.parse(getProductRequest),
  );
}

export function getProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductRequest' from JSON`,
  );
}

/** @internal */
export const GetProductResponse$inboundSchema: z.ZodType<
  GetProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.Product$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetProductResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Product$Outbound;
};

/** @internal */
export const GetProductResponse$outboundSchema: z.ZodType<
  GetProductResponse$Outbound,
  z.ZodTypeDef,
  GetProductResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Product$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductResponse$ {
  /** @deprecated use `GetProductResponse$inboundSchema` instead. */
  export const inboundSchema = GetProductResponse$inboundSchema;
  /** @deprecated use `GetProductResponse$outboundSchema` instead. */
  export const outboundSchema = GetProductResponse$outboundSchema;
  /** @deprecated use `GetProductResponse$Outbound` instead. */
  export type Outbound = GetProductResponse$Outbound;
}

export function getProductResponseToJSON(
  getProductResponse: GetProductResponse,
): string {
  return JSON.stringify(
    GetProductResponse$outboundSchema.parse(getProductResponse),
  );
}

export function getProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductResponse' from JSON`,
  );
}
