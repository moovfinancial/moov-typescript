/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTransferGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetTransferRequest = {
  /**
   * Identifier for the transfer.
   */
  transferID: string;
  accountID: string;
};

export type GetTransferResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Transfer;
};

/** @internal */
export const GetTransferGlobals$inboundSchema: z.ZodType<
  GetTransferGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetTransferGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetTransferGlobals$outboundSchema: z.ZodType<
  GetTransferGlobals$Outbound,
  z.ZodTypeDef,
  GetTransferGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransferGlobals$ {
  /** @deprecated use `GetTransferGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTransferGlobals$inboundSchema;
  /** @deprecated use `GetTransferGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTransferGlobals$outboundSchema;
  /** @deprecated use `GetTransferGlobals$Outbound` instead. */
  export type Outbound = GetTransferGlobals$Outbound;
}

export function getTransferGlobalsToJSON(
  getTransferGlobals: GetTransferGlobals,
): string {
  return JSON.stringify(
    GetTransferGlobals$outboundSchema.parse(getTransferGlobals),
  );
}

export function getTransferGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransferGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransferGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransferGlobals' from JSON`,
  );
}

/** @internal */
export const GetTransferRequest$inboundSchema: z.ZodType<
  GetTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferID: z.string(),
  accountID: z.string(),
});

/** @internal */
export type GetTransferRequest$Outbound = {
  transferID: string;
  accountID: string;
};

/** @internal */
export const GetTransferRequest$outboundSchema: z.ZodType<
  GetTransferRequest$Outbound,
  z.ZodTypeDef,
  GetTransferRequest
> = z.object({
  transferID: z.string(),
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransferRequest$ {
  /** @deprecated use `GetTransferRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransferRequest$inboundSchema;
  /** @deprecated use `GetTransferRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransferRequest$outboundSchema;
  /** @deprecated use `GetTransferRequest$Outbound` instead. */
  export type Outbound = GetTransferRequest$Outbound;
}

export function getTransferRequestToJSON(
  getTransferRequest: GetTransferRequest,
): string {
  return JSON.stringify(
    GetTransferRequest$outboundSchema.parse(getTransferRequest),
  );
}

export function getTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransferRequest' from JSON`,
  );
}

/** @internal */
export const GetTransferResponse$inboundSchema: z.ZodType<
  GetTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Transfer$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetTransferResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Transfer$Outbound;
};

/** @internal */
export const GetTransferResponse$outboundSchema: z.ZodType<
  GetTransferResponse$Outbound,
  z.ZodTypeDef,
  GetTransferResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Transfer$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransferResponse$ {
  /** @deprecated use `GetTransferResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransferResponse$inboundSchema;
  /** @deprecated use `GetTransferResponse$outboundSchema` instead. */
  export const outboundSchema = GetTransferResponse$outboundSchema;
  /** @deprecated use `GetTransferResponse$Outbound` instead. */
  export type Outbound = GetTransferResponse$Outbound;
}

export function getTransferResponseToJSON(
  getTransferResponse: GetTransferResponse,
): string {
  return JSON.stringify(
    GetTransferResponse$outboundSchema.parse(getTransferResponse),
  );
}

export function getTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransferResponse' from JSON`,
  );
}
