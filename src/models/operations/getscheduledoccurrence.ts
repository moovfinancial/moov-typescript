/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetScheduledOccurrenceSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetScheduledOccurrenceRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  scheduleID: string;
  /**
   * Allows the specification of additional filters beyond the UUID.
   *
   * @remarks
   *
   * Specifying a UUID string returns the exact occurrence.
   * Specifying a RFC 3339 timestamp returns the latest occurrence at or before that timestamp.
   * Specifying `latest` returns the latest occurrence at or before now.
   */
  occurrenceFilter: string;
};

/** @internal */
export const GetScheduledOccurrenceSecurity$inboundSchema: z.ZodType<
  GetScheduledOccurrenceSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetScheduledOccurrenceSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetScheduledOccurrenceSecurity$outboundSchema: z.ZodType<
  GetScheduledOccurrenceSecurity$Outbound,
  z.ZodTypeDef,
  GetScheduledOccurrenceSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduledOccurrenceSecurity$ {
  /** @deprecated use `GetScheduledOccurrenceSecurity$inboundSchema` instead. */
  export const inboundSchema = GetScheduledOccurrenceSecurity$inboundSchema;
  /** @deprecated use `GetScheduledOccurrenceSecurity$outboundSchema` instead. */
  export const outboundSchema = GetScheduledOccurrenceSecurity$outboundSchema;
  /** @deprecated use `GetScheduledOccurrenceSecurity$Outbound` instead. */
  export type Outbound = GetScheduledOccurrenceSecurity$Outbound;
}

export function getScheduledOccurrenceSecurityToJSON(
  getScheduledOccurrenceSecurity: GetScheduledOccurrenceSecurity,
): string {
  return JSON.stringify(
    GetScheduledOccurrenceSecurity$outboundSchema.parse(
      getScheduledOccurrenceSecurity,
    ),
  );
}

export function getScheduledOccurrenceSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetScheduledOccurrenceSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetScheduledOccurrenceSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetScheduledOccurrenceSecurity' from JSON`,
  );
}

/** @internal */
export const GetScheduledOccurrenceRequest$inboundSchema: z.ZodType<
  GetScheduledOccurrenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  scheduleID: z.string(),
  occurrenceFilter: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetScheduledOccurrenceRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  scheduleID: string;
  occurrenceFilter: string;
};

/** @internal */
export const GetScheduledOccurrenceRequest$outboundSchema: z.ZodType<
  GetScheduledOccurrenceRequest$Outbound,
  z.ZodTypeDef,
  GetScheduledOccurrenceRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  scheduleID: z.string(),
  occurrenceFilter: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduledOccurrenceRequest$ {
  /** @deprecated use `GetScheduledOccurrenceRequest$inboundSchema` instead. */
  export const inboundSchema = GetScheduledOccurrenceRequest$inboundSchema;
  /** @deprecated use `GetScheduledOccurrenceRequest$outboundSchema` instead. */
  export const outboundSchema = GetScheduledOccurrenceRequest$outboundSchema;
  /** @deprecated use `GetScheduledOccurrenceRequest$Outbound` instead. */
  export type Outbound = GetScheduledOccurrenceRequest$Outbound;
}

export function getScheduledOccurrenceRequestToJSON(
  getScheduledOccurrenceRequest: GetScheduledOccurrenceRequest,
): string {
  return JSON.stringify(
    GetScheduledOccurrenceRequest$outboundSchema.parse(
      getScheduledOccurrenceRequest,
    ),
  );
}

export function getScheduledOccurrenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetScheduledOccurrenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetScheduledOccurrenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetScheduledOccurrenceRequest' from JSON`,
  );
}
