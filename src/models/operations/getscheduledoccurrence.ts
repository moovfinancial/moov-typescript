/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetScheduledOccurrenceGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetScheduledOccurrenceRequest = {
  accountID: string;
  scheduleID: string;
  /**
   * Allows the specification of additional filters beyond the UUID.
   *
   * @remarks
   *
   * Specifying a UUID string returns the exact occurrence.
   * Specifying a RFC 3339 timestamp returns the latest occurrence at or before that timestamp.
   * Specifying `latest` returns the latest occurrence at or before now.
   */
  occurrenceFilter: string;
};

export type GetScheduledOccurrenceResponse = {
  headers: { [k: string]: Array<string> };
  result: components.OccurrencesResponse;
};

/** @internal */
export const GetScheduledOccurrenceGlobals$inboundSchema: z.ZodType<
  GetScheduledOccurrenceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetScheduledOccurrenceGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetScheduledOccurrenceGlobals$outboundSchema: z.ZodType<
  GetScheduledOccurrenceGlobals$Outbound,
  z.ZodTypeDef,
  GetScheduledOccurrenceGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduledOccurrenceGlobals$ {
  /** @deprecated use `GetScheduledOccurrenceGlobals$inboundSchema` instead. */
  export const inboundSchema = GetScheduledOccurrenceGlobals$inboundSchema;
  /** @deprecated use `GetScheduledOccurrenceGlobals$outboundSchema` instead. */
  export const outboundSchema = GetScheduledOccurrenceGlobals$outboundSchema;
  /** @deprecated use `GetScheduledOccurrenceGlobals$Outbound` instead. */
  export type Outbound = GetScheduledOccurrenceGlobals$Outbound;
}

export function getScheduledOccurrenceGlobalsToJSON(
  getScheduledOccurrenceGlobals: GetScheduledOccurrenceGlobals,
): string {
  return JSON.stringify(
    GetScheduledOccurrenceGlobals$outboundSchema.parse(
      getScheduledOccurrenceGlobals,
    ),
  );
}

export function getScheduledOccurrenceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetScheduledOccurrenceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetScheduledOccurrenceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetScheduledOccurrenceGlobals' from JSON`,
  );
}

/** @internal */
export const GetScheduledOccurrenceRequest$inboundSchema: z.ZodType<
  GetScheduledOccurrenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
  occurrenceFilter: z.string(),
});

/** @internal */
export type GetScheduledOccurrenceRequest$Outbound = {
  accountID: string;
  scheduleID: string;
  occurrenceFilter: string;
};

/** @internal */
export const GetScheduledOccurrenceRequest$outboundSchema: z.ZodType<
  GetScheduledOccurrenceRequest$Outbound,
  z.ZodTypeDef,
  GetScheduledOccurrenceRequest
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
  occurrenceFilter: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduledOccurrenceRequest$ {
  /** @deprecated use `GetScheduledOccurrenceRequest$inboundSchema` instead. */
  export const inboundSchema = GetScheduledOccurrenceRequest$inboundSchema;
  /** @deprecated use `GetScheduledOccurrenceRequest$outboundSchema` instead. */
  export const outboundSchema = GetScheduledOccurrenceRequest$outboundSchema;
  /** @deprecated use `GetScheduledOccurrenceRequest$Outbound` instead. */
  export type Outbound = GetScheduledOccurrenceRequest$Outbound;
}

export function getScheduledOccurrenceRequestToJSON(
  getScheduledOccurrenceRequest: GetScheduledOccurrenceRequest,
): string {
  return JSON.stringify(
    GetScheduledOccurrenceRequest$outboundSchema.parse(
      getScheduledOccurrenceRequest,
    ),
  );
}

export function getScheduledOccurrenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetScheduledOccurrenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetScheduledOccurrenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetScheduledOccurrenceRequest' from JSON`,
  );
}

/** @internal */
export const GetScheduledOccurrenceResponse$inboundSchema: z.ZodType<
  GetScheduledOccurrenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.OccurrencesResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetScheduledOccurrenceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.OccurrencesResponse$Outbound;
};

/** @internal */
export const GetScheduledOccurrenceResponse$outboundSchema: z.ZodType<
  GetScheduledOccurrenceResponse$Outbound,
  z.ZodTypeDef,
  GetScheduledOccurrenceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.OccurrencesResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduledOccurrenceResponse$ {
  /** @deprecated use `GetScheduledOccurrenceResponse$inboundSchema` instead. */
  export const inboundSchema = GetScheduledOccurrenceResponse$inboundSchema;
  /** @deprecated use `GetScheduledOccurrenceResponse$outboundSchema` instead. */
  export const outboundSchema = GetScheduledOccurrenceResponse$outboundSchema;
  /** @deprecated use `GetScheduledOccurrenceResponse$Outbound` instead. */
  export type Outbound = GetScheduledOccurrenceResponse$Outbound;
}

export function getScheduledOccurrenceResponseToJSON(
  getScheduledOccurrenceResponse: GetScheduledOccurrenceResponse,
): string {
  return JSON.stringify(
    GetScheduledOccurrenceResponse$outboundSchema.parse(
      getScheduledOccurrenceResponse,
    ),
  );
}

export function getScheduledOccurrenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetScheduledOccurrenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetScheduledOccurrenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetScheduledOccurrenceResponse' from JSON`,
  );
}
