/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIssuedCardTransactionsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListIssuedCardTransactionsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * The Moov business account for which cards have been issued.
   */
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
  /**
   * Optional ID of the issued card to filter results.
   */
  issuedCardID?: string | undefined;
  /**
   * Optional date-time which inclusively filters all card transactions created after this date-time.
   */
  startDateTime?: Date | undefined;
  /**
   * Optional date-time which exclusively filters all card transactions created before this date-time.
   */
  endDateTime?: Date | undefined;
};

/** @internal */
export const ListIssuedCardTransactionsSecurity$inboundSchema: z.ZodType<
  ListIssuedCardTransactionsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListIssuedCardTransactionsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListIssuedCardTransactionsSecurity$outboundSchema: z.ZodType<
  ListIssuedCardTransactionsSecurity$Outbound,
  z.ZodTypeDef,
  ListIssuedCardTransactionsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardTransactionsSecurity$ {
  /** @deprecated use `ListIssuedCardTransactionsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListIssuedCardTransactionsSecurity$inboundSchema;
  /** @deprecated use `ListIssuedCardTransactionsSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardTransactionsSecurity$outboundSchema;
  /** @deprecated use `ListIssuedCardTransactionsSecurity$Outbound` instead. */
  export type Outbound = ListIssuedCardTransactionsSecurity$Outbound;
}

export function listIssuedCardTransactionsSecurityToJSON(
  listIssuedCardTransactionsSecurity: ListIssuedCardTransactionsSecurity,
): string {
  return JSON.stringify(
    ListIssuedCardTransactionsSecurity$outboundSchema.parse(
      listIssuedCardTransactionsSecurity,
    ),
  );
}

export function listIssuedCardTransactionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListIssuedCardTransactionsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListIssuedCardTransactionsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIssuedCardTransactionsSecurity' from JSON`,
  );
}

/** @internal */
export const ListIssuedCardTransactionsRequest$inboundSchema: z.ZodType<
  ListIssuedCardTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  issuedCardID: z.string().optional(),
  startDateTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  endDateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListIssuedCardTransactionsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
  issuedCardID?: string | undefined;
  startDateTime?: string | undefined;
  endDateTime?: string | undefined;
};

/** @internal */
export const ListIssuedCardTransactionsRequest$outboundSchema: z.ZodType<
  ListIssuedCardTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListIssuedCardTransactionsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  issuedCardID: z.string().optional(),
  startDateTime: z.date().transform(v => v.toISOString()).optional(),
  endDateTime: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardTransactionsRequest$ {
  /** @deprecated use `ListIssuedCardTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIssuedCardTransactionsRequest$inboundSchema;
  /** @deprecated use `ListIssuedCardTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardTransactionsRequest$outboundSchema;
  /** @deprecated use `ListIssuedCardTransactionsRequest$Outbound` instead. */
  export type Outbound = ListIssuedCardTransactionsRequest$Outbound;
}

export function listIssuedCardTransactionsRequestToJSON(
  listIssuedCardTransactionsRequest: ListIssuedCardTransactionsRequest,
): string {
  return JSON.stringify(
    ListIssuedCardTransactionsRequest$outboundSchema.parse(
      listIssuedCardTransactionsRequest,
    ),
  );
}

export function listIssuedCardTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIssuedCardTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIssuedCardTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIssuedCardTransactionsRequest' from JSON`,
  );
}
