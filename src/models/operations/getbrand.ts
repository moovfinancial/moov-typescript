/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBrandGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetBrandRequest = {
  accountID: string;
};

export type GetBrandResponse = {
  headers: { [k: string]: Array<string> };
  result: components.BrandProperties;
};

/** @internal */
export const GetBrandGlobals$inboundSchema: z.ZodType<
  GetBrandGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetBrandGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetBrandGlobals$outboundSchema: z.ZodType<
  GetBrandGlobals$Outbound,
  z.ZodTypeDef,
  GetBrandGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBrandGlobals$ {
  /** @deprecated use `GetBrandGlobals$inboundSchema` instead. */
  export const inboundSchema = GetBrandGlobals$inboundSchema;
  /** @deprecated use `GetBrandGlobals$outboundSchema` instead. */
  export const outboundSchema = GetBrandGlobals$outboundSchema;
  /** @deprecated use `GetBrandGlobals$Outbound` instead. */
  export type Outbound = GetBrandGlobals$Outbound;
}

export function getBrandGlobalsToJSON(
  getBrandGlobals: GetBrandGlobals,
): string {
  return JSON.stringify(GetBrandGlobals$outboundSchema.parse(getBrandGlobals));
}

export function getBrandGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetBrandGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBrandGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBrandGlobals' from JSON`,
  );
}

/** @internal */
export const GetBrandRequest$inboundSchema: z.ZodType<
  GetBrandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type GetBrandRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const GetBrandRequest$outboundSchema: z.ZodType<
  GetBrandRequest$Outbound,
  z.ZodTypeDef,
  GetBrandRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBrandRequest$ {
  /** @deprecated use `GetBrandRequest$inboundSchema` instead. */
  export const inboundSchema = GetBrandRequest$inboundSchema;
  /** @deprecated use `GetBrandRequest$outboundSchema` instead. */
  export const outboundSchema = GetBrandRequest$outboundSchema;
  /** @deprecated use `GetBrandRequest$Outbound` instead. */
  export type Outbound = GetBrandRequest$Outbound;
}

export function getBrandRequestToJSON(
  getBrandRequest: GetBrandRequest,
): string {
  return JSON.stringify(GetBrandRequest$outboundSchema.parse(getBrandRequest));
}

export function getBrandRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBrandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBrandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBrandRequest' from JSON`,
  );
}

/** @internal */
export const GetBrandResponse$inboundSchema: z.ZodType<
  GetBrandResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.BrandProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetBrandResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.BrandProperties$Outbound;
};

/** @internal */
export const GetBrandResponse$outboundSchema: z.ZodType<
  GetBrandResponse$Outbound,
  z.ZodTypeDef,
  GetBrandResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.BrandProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBrandResponse$ {
  /** @deprecated use `GetBrandResponse$inboundSchema` instead. */
  export const inboundSchema = GetBrandResponse$inboundSchema;
  /** @deprecated use `GetBrandResponse$outboundSchema` instead. */
  export const outboundSchema = GetBrandResponse$outboundSchema;
  /** @deprecated use `GetBrandResponse$Outbound` instead. */
  export type Outbound = GetBrandResponse$Outbound;
}

export function getBrandResponseToJSON(
  getBrandResponse: GetBrandResponse,
): string {
  return JSON.stringify(
    GetBrandResponse$outboundSchema.parse(getBrandResponse),
  );
}

export function getBrandResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBrandResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBrandResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBrandResponse' from JSON`,
  );
}
