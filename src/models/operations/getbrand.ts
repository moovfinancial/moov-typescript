/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBrandSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetBrandRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
};

/** @internal */
export const GetBrandSecurity$inboundSchema: z.ZodType<
  GetBrandSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetBrandSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetBrandSecurity$outboundSchema: z.ZodType<
  GetBrandSecurity$Outbound,
  z.ZodTypeDef,
  GetBrandSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBrandSecurity$ {
  /** @deprecated use `GetBrandSecurity$inboundSchema` instead. */
  export const inboundSchema = GetBrandSecurity$inboundSchema;
  /** @deprecated use `GetBrandSecurity$outboundSchema` instead. */
  export const outboundSchema = GetBrandSecurity$outboundSchema;
  /** @deprecated use `GetBrandSecurity$Outbound` instead. */
  export type Outbound = GetBrandSecurity$Outbound;
}

export function getBrandSecurityToJSON(
  getBrandSecurity: GetBrandSecurity,
): string {
  return JSON.stringify(
    GetBrandSecurity$outboundSchema.parse(getBrandSecurity),
  );
}

export function getBrandSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetBrandSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBrandSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBrandSecurity' from JSON`,
  );
}

/** @internal */
export const GetBrandRequest$inboundSchema: z.ZodType<
  GetBrandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetBrandRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
};

/** @internal */
export const GetBrandRequest$outboundSchema: z.ZodType<
  GetBrandRequest$Outbound,
  z.ZodTypeDef,
  GetBrandRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBrandRequest$ {
  /** @deprecated use `GetBrandRequest$inboundSchema` instead. */
  export const inboundSchema = GetBrandRequest$inboundSchema;
  /** @deprecated use `GetBrandRequest$outboundSchema` instead. */
  export const outboundSchema = GetBrandRequest$outboundSchema;
  /** @deprecated use `GetBrandRequest$Outbound` instead. */
  export type Outbound = GetBrandRequest$Outbound;
}

export function getBrandRequestToJSON(
  getBrandRequest: GetBrandRequest,
): string {
  return JSON.stringify(GetBrandRequest$outboundSchema.parse(getBrandRequest));
}

export function getBrandRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBrandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBrandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBrandRequest' from JSON`,
  );
}
