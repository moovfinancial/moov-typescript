/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBankAccountVerificationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetBankAccountVerificationRequest = {
  accountID: string;
  bankAccountID: string;
};

export type GetBankAccountVerificationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.BankAccountVerification;
};

/** @internal */
export const GetBankAccountVerificationGlobals$inboundSchema: z.ZodType<
  GetBankAccountVerificationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetBankAccountVerificationGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetBankAccountVerificationGlobals$outboundSchema: z.ZodType<
  GetBankAccountVerificationGlobals$Outbound,
  z.ZodTypeDef,
  GetBankAccountVerificationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBankAccountVerificationGlobals$ {
  /** @deprecated use `GetBankAccountVerificationGlobals$inboundSchema` instead. */
  export const inboundSchema = GetBankAccountVerificationGlobals$inboundSchema;
  /** @deprecated use `GetBankAccountVerificationGlobals$outboundSchema` instead. */
  export const outboundSchema =
    GetBankAccountVerificationGlobals$outboundSchema;
  /** @deprecated use `GetBankAccountVerificationGlobals$Outbound` instead. */
  export type Outbound = GetBankAccountVerificationGlobals$Outbound;
}

export function getBankAccountVerificationGlobalsToJSON(
  getBankAccountVerificationGlobals: GetBankAccountVerificationGlobals,
): string {
  return JSON.stringify(
    GetBankAccountVerificationGlobals$outboundSchema.parse(
      getBankAccountVerificationGlobals,
    ),
  );
}

export function getBankAccountVerificationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetBankAccountVerificationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBankAccountVerificationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBankAccountVerificationGlobals' from JSON`,
  );
}

/** @internal */
export const GetBankAccountVerificationRequest$inboundSchema: z.ZodType<
  GetBankAccountVerificationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
});

/** @internal */
export type GetBankAccountVerificationRequest$Outbound = {
  accountID: string;
  bankAccountID: string;
};

/** @internal */
export const GetBankAccountVerificationRequest$outboundSchema: z.ZodType<
  GetBankAccountVerificationRequest$Outbound,
  z.ZodTypeDef,
  GetBankAccountVerificationRequest
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBankAccountVerificationRequest$ {
  /** @deprecated use `GetBankAccountVerificationRequest$inboundSchema` instead. */
  export const inboundSchema = GetBankAccountVerificationRequest$inboundSchema;
  /** @deprecated use `GetBankAccountVerificationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetBankAccountVerificationRequest$outboundSchema;
  /** @deprecated use `GetBankAccountVerificationRequest$Outbound` instead. */
  export type Outbound = GetBankAccountVerificationRequest$Outbound;
}

export function getBankAccountVerificationRequestToJSON(
  getBankAccountVerificationRequest: GetBankAccountVerificationRequest,
): string {
  return JSON.stringify(
    GetBankAccountVerificationRequest$outboundSchema.parse(
      getBankAccountVerificationRequest,
    ),
  );
}

export function getBankAccountVerificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBankAccountVerificationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBankAccountVerificationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBankAccountVerificationRequest' from JSON`,
  );
}

/** @internal */
export const GetBankAccountVerificationResponse$inboundSchema: z.ZodType<
  GetBankAccountVerificationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.BankAccountVerification$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetBankAccountVerificationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.BankAccountVerification$Outbound;
};

/** @internal */
export const GetBankAccountVerificationResponse$outboundSchema: z.ZodType<
  GetBankAccountVerificationResponse$Outbound,
  z.ZodTypeDef,
  GetBankAccountVerificationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.BankAccountVerification$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBankAccountVerificationResponse$ {
  /** @deprecated use `GetBankAccountVerificationResponse$inboundSchema` instead. */
  export const inboundSchema = GetBankAccountVerificationResponse$inboundSchema;
  /** @deprecated use `GetBankAccountVerificationResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetBankAccountVerificationResponse$outboundSchema;
  /** @deprecated use `GetBankAccountVerificationResponse$Outbound` instead. */
  export type Outbound = GetBankAccountVerificationResponse$Outbound;
}

export function getBankAccountVerificationResponseToJSON(
  getBankAccountVerificationResponse: GetBankAccountVerificationResponse,
): string {
  return JSON.stringify(
    GetBankAccountVerificationResponse$outboundSchema.parse(
      getBankAccountVerificationResponse,
    ),
  );
}

export function getBankAccountVerificationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBankAccountVerificationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetBankAccountVerificationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBankAccountVerificationResponse' from JSON`,
  );
}
