/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateIssuedCardGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateIssuedCardRequest = {
  /**
   * The Moov business account for which the card was issued.
   */
  accountID: string;
  issuedCardID: string;
  updateIssuedCard: components.UpdateIssuedCard;
};

export type UpdateIssuedCardResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const UpdateIssuedCardGlobals$inboundSchema: z.ZodType<
  UpdateIssuedCardGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateIssuedCardGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UpdateIssuedCardGlobals$outboundSchema: z.ZodType<
  UpdateIssuedCardGlobals$Outbound,
  z.ZodTypeDef,
  UpdateIssuedCardGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIssuedCardGlobals$ {
  /** @deprecated use `UpdateIssuedCardGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateIssuedCardGlobals$inboundSchema;
  /** @deprecated use `UpdateIssuedCardGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateIssuedCardGlobals$outboundSchema;
  /** @deprecated use `UpdateIssuedCardGlobals$Outbound` instead. */
  export type Outbound = UpdateIssuedCardGlobals$Outbound;
}

export function updateIssuedCardGlobalsToJSON(
  updateIssuedCardGlobals: UpdateIssuedCardGlobals,
): string {
  return JSON.stringify(
    UpdateIssuedCardGlobals$outboundSchema.parse(updateIssuedCardGlobals),
  );
}

export function updateIssuedCardGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIssuedCardGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIssuedCardGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIssuedCardGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateIssuedCardRequest$inboundSchema: z.ZodType<
  UpdateIssuedCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  issuedCardID: z.string(),
  UpdateIssuedCard: components.UpdateIssuedCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateIssuedCard": "updateIssuedCard",
  });
});

/** @internal */
export type UpdateIssuedCardRequest$Outbound = {
  accountID: string;
  issuedCardID: string;
  UpdateIssuedCard: components.UpdateIssuedCard$Outbound;
};

/** @internal */
export const UpdateIssuedCardRequest$outboundSchema: z.ZodType<
  UpdateIssuedCardRequest$Outbound,
  z.ZodTypeDef,
  UpdateIssuedCardRequest
> = z.object({
  accountID: z.string(),
  issuedCardID: z.string(),
  updateIssuedCard: components.UpdateIssuedCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateIssuedCard: "UpdateIssuedCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIssuedCardRequest$ {
  /** @deprecated use `UpdateIssuedCardRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateIssuedCardRequest$inboundSchema;
  /** @deprecated use `UpdateIssuedCardRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateIssuedCardRequest$outboundSchema;
  /** @deprecated use `UpdateIssuedCardRequest$Outbound` instead. */
  export type Outbound = UpdateIssuedCardRequest$Outbound;
}

export function updateIssuedCardRequestToJSON(
  updateIssuedCardRequest: UpdateIssuedCardRequest,
): string {
  return JSON.stringify(
    UpdateIssuedCardRequest$outboundSchema.parse(updateIssuedCardRequest),
  );
}

export function updateIssuedCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIssuedCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIssuedCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIssuedCardRequest' from JSON`,
  );
}

/** @internal */
export const UpdateIssuedCardResponse$inboundSchema: z.ZodType<
  UpdateIssuedCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type UpdateIssuedCardResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const UpdateIssuedCardResponse$outboundSchema: z.ZodType<
  UpdateIssuedCardResponse$Outbound,
  z.ZodTypeDef,
  UpdateIssuedCardResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIssuedCardResponse$ {
  /** @deprecated use `UpdateIssuedCardResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateIssuedCardResponse$inboundSchema;
  /** @deprecated use `UpdateIssuedCardResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateIssuedCardResponse$outboundSchema;
  /** @deprecated use `UpdateIssuedCardResponse$Outbound` instead. */
  export type Outbound = UpdateIssuedCardResponse$Outbound;
}

export function updateIssuedCardResponseToJSON(
  updateIssuedCardResponse: UpdateIssuedCardResponse,
): string {
  return JSON.stringify(
    UpdateIssuedCardResponse$outboundSchema.parse(updateIssuedCardResponse),
  );
}

export function updateIssuedCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIssuedCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIssuedCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIssuedCardResponse' from JSON`,
  );
}
