/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateIssuedCardSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateIssuedCardRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * The Moov business account for which the card was issued.
   */
  accountID: string;
  issuedCardID: string;
  updateIssuedCard: components.UpdateIssuedCard;
};

/** @internal */
export const UpdateIssuedCardSecurity$inboundSchema: z.ZodType<
  UpdateIssuedCardSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateIssuedCardSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateIssuedCardSecurity$outboundSchema: z.ZodType<
  UpdateIssuedCardSecurity$Outbound,
  z.ZodTypeDef,
  UpdateIssuedCardSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIssuedCardSecurity$ {
  /** @deprecated use `UpdateIssuedCardSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateIssuedCardSecurity$inboundSchema;
  /** @deprecated use `UpdateIssuedCardSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateIssuedCardSecurity$outboundSchema;
  /** @deprecated use `UpdateIssuedCardSecurity$Outbound` instead. */
  export type Outbound = UpdateIssuedCardSecurity$Outbound;
}

export function updateIssuedCardSecurityToJSON(
  updateIssuedCardSecurity: UpdateIssuedCardSecurity,
): string {
  return JSON.stringify(
    UpdateIssuedCardSecurity$outboundSchema.parse(updateIssuedCardSecurity),
  );
}

export function updateIssuedCardSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIssuedCardSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIssuedCardSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIssuedCardSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateIssuedCardRequest$inboundSchema: z.ZodType<
  UpdateIssuedCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  issuedCardID: z.string(),
  UpdateIssuedCard: components.UpdateIssuedCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpdateIssuedCard": "updateIssuedCard",
  });
});

/** @internal */
export type UpdateIssuedCardRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  issuedCardID: string;
  UpdateIssuedCard: components.UpdateIssuedCard$Outbound;
};

/** @internal */
export const UpdateIssuedCardRequest$outboundSchema: z.ZodType<
  UpdateIssuedCardRequest$Outbound,
  z.ZodTypeDef,
  UpdateIssuedCardRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  issuedCardID: z.string(),
  updateIssuedCard: components.UpdateIssuedCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    updateIssuedCard: "UpdateIssuedCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIssuedCardRequest$ {
  /** @deprecated use `UpdateIssuedCardRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateIssuedCardRequest$inboundSchema;
  /** @deprecated use `UpdateIssuedCardRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateIssuedCardRequest$outboundSchema;
  /** @deprecated use `UpdateIssuedCardRequest$Outbound` instead. */
  export type Outbound = UpdateIssuedCardRequest$Outbound;
}

export function updateIssuedCardRequestToJSON(
  updateIssuedCardRequest: UpdateIssuedCardRequest,
): string {
  return JSON.stringify(
    UpdateIssuedCardRequest$outboundSchema.parse(updateIssuedCardRequest),
  );
}

export function updateIssuedCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIssuedCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIssuedCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIssuedCardRequest' from JSON`,
  );
}
