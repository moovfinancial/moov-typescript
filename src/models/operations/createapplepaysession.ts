/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateApplePaySessionSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CreateApplePaySessionRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * ID of the Moov account representing the merchant.
   */
  accountID: string;
  createApplePaySession: components.CreateApplePaySession;
};

/** @internal */
export const CreateApplePaySessionSecurity$inboundSchema: z.ZodType<
  CreateApplePaySessionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CreateApplePaySessionSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CreateApplePaySessionSecurity$outboundSchema: z.ZodType<
  CreateApplePaySessionSecurity$Outbound,
  z.ZodTypeDef,
  CreateApplePaySessionSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplePaySessionSecurity$ {
  /** @deprecated use `CreateApplePaySessionSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateApplePaySessionSecurity$inboundSchema;
  /** @deprecated use `CreateApplePaySessionSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateApplePaySessionSecurity$outboundSchema;
  /** @deprecated use `CreateApplePaySessionSecurity$Outbound` instead. */
  export type Outbound = CreateApplePaySessionSecurity$Outbound;
}

export function createApplePaySessionSecurityToJSON(
  createApplePaySessionSecurity: CreateApplePaySessionSecurity,
): string {
  return JSON.stringify(
    CreateApplePaySessionSecurity$outboundSchema.parse(
      createApplePaySessionSecurity,
    ),
  );
}

export function createApplePaySessionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplePaySessionSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplePaySessionSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplePaySessionSecurity' from JSON`,
  );
}

/** @internal */
export const CreateApplePaySessionRequest$inboundSchema: z.ZodType<
  CreateApplePaySessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  CreateApplePaySession: components.CreateApplePaySession$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CreateApplePaySession": "createApplePaySession",
  });
});

/** @internal */
export type CreateApplePaySessionRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  CreateApplePaySession: components.CreateApplePaySession$Outbound;
};

/** @internal */
export const CreateApplePaySessionRequest$outboundSchema: z.ZodType<
  CreateApplePaySessionRequest$Outbound,
  z.ZodTypeDef,
  CreateApplePaySessionRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  createApplePaySession: components.CreateApplePaySession$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    createApplePaySession: "CreateApplePaySession",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplePaySessionRequest$ {
  /** @deprecated use `CreateApplePaySessionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateApplePaySessionRequest$inboundSchema;
  /** @deprecated use `CreateApplePaySessionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateApplePaySessionRequest$outboundSchema;
  /** @deprecated use `CreateApplePaySessionRequest$Outbound` instead. */
  export type Outbound = CreateApplePaySessionRequest$Outbound;
}

export function createApplePaySessionRequestToJSON(
  createApplePaySessionRequest: CreateApplePaySessionRequest,
): string {
  return JSON.stringify(
    CreateApplePaySessionRequest$outboundSchema.parse(
      createApplePaySessionRequest,
    ),
  );
}

export function createApplePaySessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplePaySessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplePaySessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplePaySessionRequest' from JSON`,
  );
}
