/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateApplePaySessionGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateApplePaySessionRequest = {
  /**
   * ID of the Moov account representing the merchant.
   */
  accountID: string;
  createApplePaySession: components.CreateApplePaySession;
};

export type CreateApplePaySessionResponse = {
  headers: { [k: string]: Array<string> };
  result: string;
};

/** @internal */
export const CreateApplePaySessionGlobals$inboundSchema: z.ZodType<
  CreateApplePaySessionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type CreateApplePaySessionGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const CreateApplePaySessionGlobals$outboundSchema: z.ZodType<
  CreateApplePaySessionGlobals$Outbound,
  z.ZodTypeDef,
  CreateApplePaySessionGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplePaySessionGlobals$ {
  /** @deprecated use `CreateApplePaySessionGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateApplePaySessionGlobals$inboundSchema;
  /** @deprecated use `CreateApplePaySessionGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateApplePaySessionGlobals$outboundSchema;
  /** @deprecated use `CreateApplePaySessionGlobals$Outbound` instead. */
  export type Outbound = CreateApplePaySessionGlobals$Outbound;
}

export function createApplePaySessionGlobalsToJSON(
  createApplePaySessionGlobals: CreateApplePaySessionGlobals,
): string {
  return JSON.stringify(
    CreateApplePaySessionGlobals$outboundSchema.parse(
      createApplePaySessionGlobals,
    ),
  );
}

export function createApplePaySessionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplePaySessionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplePaySessionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplePaySessionGlobals' from JSON`,
  );
}

/** @internal */
export const CreateApplePaySessionRequest$inboundSchema: z.ZodType<
  CreateApplePaySessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  CreateApplePaySession: components.CreateApplePaySession$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateApplePaySession": "createApplePaySession",
  });
});

/** @internal */
export type CreateApplePaySessionRequest$Outbound = {
  accountID: string;
  CreateApplePaySession: components.CreateApplePaySession$Outbound;
};

/** @internal */
export const CreateApplePaySessionRequest$outboundSchema: z.ZodType<
  CreateApplePaySessionRequest$Outbound,
  z.ZodTypeDef,
  CreateApplePaySessionRequest
> = z.object({
  accountID: z.string(),
  createApplePaySession: components.CreateApplePaySession$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createApplePaySession: "CreateApplePaySession",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplePaySessionRequest$ {
  /** @deprecated use `CreateApplePaySessionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateApplePaySessionRequest$inboundSchema;
  /** @deprecated use `CreateApplePaySessionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateApplePaySessionRequest$outboundSchema;
  /** @deprecated use `CreateApplePaySessionRequest$Outbound` instead. */
  export type Outbound = CreateApplePaySessionRequest$Outbound;
}

export function createApplePaySessionRequestToJSON(
  createApplePaySessionRequest: CreateApplePaySessionRequest,
): string {
  return JSON.stringify(
    CreateApplePaySessionRequest$outboundSchema.parse(
      createApplePaySessionRequest,
    ),
  );
}

export function createApplePaySessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplePaySessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplePaySessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplePaySessionRequest' from JSON`,
  );
}

/** @internal */
export const CreateApplePaySessionResponse$inboundSchema: z.ZodType<
  CreateApplePaySessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateApplePaySessionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: string;
};

/** @internal */
export const CreateApplePaySessionResponse$outboundSchema: z.ZodType<
  CreateApplePaySessionResponse$Outbound,
  z.ZodTypeDef,
  CreateApplePaySessionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.string(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplePaySessionResponse$ {
  /** @deprecated use `CreateApplePaySessionResponse$inboundSchema` instead. */
  export const inboundSchema = CreateApplePaySessionResponse$inboundSchema;
  /** @deprecated use `CreateApplePaySessionResponse$outboundSchema` instead. */
  export const outboundSchema = CreateApplePaySessionResponse$outboundSchema;
  /** @deprecated use `CreateApplePaySessionResponse$Outbound` instead. */
  export type Outbound = CreateApplePaySessionResponse$Outbound;
}

export function createApplePaySessionResponseToJSON(
  createApplePaySessionResponse: CreateApplePaySessionResponse,
): string {
  return JSON.stringify(
    CreateApplePaySessionResponse$outboundSchema.parse(
      createApplePaySessionResponse,
    ),
  );
}

export function createApplePaySessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplePaySessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplePaySessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplePaySessionResponse' from JSON`,
  );
}
