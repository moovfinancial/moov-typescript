/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTransfersSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListTransfersRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Optional, comma-separated account IDs by which the response is filtered based on whether the account ID is the source or destination.
   */
  accountIDs?: Array<string> | undefined;
  /**
   * Optional parameter for filtering transfers by status.
   */
  status?: components.TransferStatus | undefined;
  /**
   * Optional date-time which inclusively filters all transfers created after this date-time.
   */
  startDateTime?: Date | undefined;
  /**
   * Optional date-time which exclusively filters all transfers created before this date-time.
   */
  endDateTime?: Date | undefined;
  /**
   * Optional ID to filter for transfers in the same group.
   */
  groupID?: string | undefined;
  /**
   * Optional parameter to only return refunded transfers.
   */
  refunded?: boolean | undefined;
  /**
   * Optional parameter to only return disputed transfers.
   */
  disputed?: boolean | undefined;
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
};

/** @internal */
export const ListTransfersSecurity$inboundSchema: z.ZodType<
  ListTransfersSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListTransfersSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListTransfersSecurity$outboundSchema: z.ZodType<
  ListTransfersSecurity$Outbound,
  z.ZodTypeDef,
  ListTransfersSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransfersSecurity$ {
  /** @deprecated use `ListTransfersSecurity$inboundSchema` instead. */
  export const inboundSchema = ListTransfersSecurity$inboundSchema;
  /** @deprecated use `ListTransfersSecurity$outboundSchema` instead. */
  export const outboundSchema = ListTransfersSecurity$outboundSchema;
  /** @deprecated use `ListTransfersSecurity$Outbound` instead. */
  export type Outbound = ListTransfersSecurity$Outbound;
}

export function listTransfersSecurityToJSON(
  listTransfersSecurity: ListTransfersSecurity,
): string {
  return JSON.stringify(
    ListTransfersSecurity$outboundSchema.parse(listTransfersSecurity),
  );
}

export function listTransfersSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListTransfersSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransfersSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransfersSecurity' from JSON`,
  );
}

/** @internal */
export const ListTransfersRequest$inboundSchema: z.ZodType<
  ListTransfersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountIDs: z.array(z.string()).optional(),
  status: components.TransferStatus$inboundSchema.optional(),
  startDateTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  endDateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  groupID: z.string().optional(),
  refunded: z.boolean().optional(),
  disputed: z.boolean().optional(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListTransfersRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountIDs?: Array<string> | undefined;
  status?: string | undefined;
  startDateTime?: string | undefined;
  endDateTime?: string | undefined;
  groupID?: string | undefined;
  refunded?: boolean | undefined;
  disputed?: boolean | undefined;
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
};

/** @internal */
export const ListTransfersRequest$outboundSchema: z.ZodType<
  ListTransfersRequest$Outbound,
  z.ZodTypeDef,
  ListTransfersRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountIDs: z.array(z.string()).optional(),
  status: components.TransferStatus$outboundSchema.optional(),
  startDateTime: z.date().transform(v => v.toISOString()).optional(),
  endDateTime: z.date().transform(v => v.toISOString()).optional(),
  groupID: z.string().optional(),
  refunded: z.boolean().optional(),
  disputed: z.boolean().optional(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransfersRequest$ {
  /** @deprecated use `ListTransfersRequest$inboundSchema` instead. */
  export const inboundSchema = ListTransfersRequest$inboundSchema;
  /** @deprecated use `ListTransfersRequest$outboundSchema` instead. */
  export const outboundSchema = ListTransfersRequest$outboundSchema;
  /** @deprecated use `ListTransfersRequest$Outbound` instead. */
  export type Outbound = ListTransfersRequest$Outbound;
}

export function listTransfersRequestToJSON(
  listTransfersRequest: ListTransfersRequest,
): string {
  return JSON.stringify(
    ListTransfersRequest$outboundSchema.parse(listTransfersRequest),
  );
}

export function listTransfersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTransfersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransfersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransfersRequest' from JSON`,
  );
}
