/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTicketGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateTicketRequest = {
  accountID: string;
  ticketID: string;
  updateTicket: components.UpdateTicket;
};

export type UpdateTicketResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Ticket;
};

/** @internal */
export const UpdateTicketGlobals$inboundSchema: z.ZodType<
  UpdateTicketGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateTicketGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateTicketGlobals$outboundSchema: z.ZodType<
  UpdateTicketGlobals$Outbound,
  z.ZodTypeDef,
  UpdateTicketGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTicketGlobals$ {
  /** @deprecated use `UpdateTicketGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateTicketGlobals$inboundSchema;
  /** @deprecated use `UpdateTicketGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateTicketGlobals$outboundSchema;
  /** @deprecated use `UpdateTicketGlobals$Outbound` instead. */
  export type Outbound = UpdateTicketGlobals$Outbound;
}

export function updateTicketGlobalsToJSON(
  updateTicketGlobals: UpdateTicketGlobals,
): string {
  return JSON.stringify(
    UpdateTicketGlobals$outboundSchema.parse(updateTicketGlobals),
  );
}

export function updateTicketGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTicketGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTicketGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTicketGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateTicketRequest$inboundSchema: z.ZodType<
  UpdateTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
  UpdateTicket: components.UpdateTicket$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateTicket": "updateTicket",
  });
});

/** @internal */
export type UpdateTicketRequest$Outbound = {
  accountID: string;
  ticketID: string;
  UpdateTicket: components.UpdateTicket$Outbound;
};

/** @internal */
export const UpdateTicketRequest$outboundSchema: z.ZodType<
  UpdateTicketRequest$Outbound,
  z.ZodTypeDef,
  UpdateTicketRequest
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
  updateTicket: components.UpdateTicket$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateTicket: "UpdateTicket",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTicketRequest$ {
  /** @deprecated use `UpdateTicketRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTicketRequest$inboundSchema;
  /** @deprecated use `UpdateTicketRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTicketRequest$outboundSchema;
  /** @deprecated use `UpdateTicketRequest$Outbound` instead. */
  export type Outbound = UpdateTicketRequest$Outbound;
}

export function updateTicketRequestToJSON(
  updateTicketRequest: UpdateTicketRequest,
): string {
  return JSON.stringify(
    UpdateTicketRequest$outboundSchema.parse(updateTicketRequest),
  );
}

export function updateTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTicketRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTicketResponse$inboundSchema: z.ZodType<
  UpdateTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Ticket$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateTicketResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Ticket$Outbound;
};

/** @internal */
export const UpdateTicketResponse$outboundSchema: z.ZodType<
  UpdateTicketResponse$Outbound,
  z.ZodTypeDef,
  UpdateTicketResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Ticket$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTicketResponse$ {
  /** @deprecated use `UpdateTicketResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTicketResponse$inboundSchema;
  /** @deprecated use `UpdateTicketResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTicketResponse$outboundSchema;
  /** @deprecated use `UpdateTicketResponse$Outbound` instead. */
  export type Outbound = UpdateTicketResponse$Outbound;
}

export function updateTicketResponseToJSON(
  updateTicketResponse: UpdateTicketResponse,
): string {
  return JSON.stringify(
    UpdateTicketResponse$outboundSchema.parse(updateTicketResponse),
  );
}

export function updateTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTicketResponse' from JSON`,
  );
}
