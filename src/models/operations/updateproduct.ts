/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateProductGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateProductRequest = {
  accountID: string;
  productID: string;
  productRequest: components.ProductRequest;
};

export type UpdateProductResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Product;
};

/** @internal */
export const UpdateProductGlobals$inboundSchema: z.ZodType<
  UpdateProductGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateProductGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateProductGlobals$outboundSchema: z.ZodType<
  UpdateProductGlobals$Outbound,
  z.ZodTypeDef,
  UpdateProductGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProductGlobals$ {
  /** @deprecated use `UpdateProductGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateProductGlobals$inboundSchema;
  /** @deprecated use `UpdateProductGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateProductGlobals$outboundSchema;
  /** @deprecated use `UpdateProductGlobals$Outbound` instead. */
  export type Outbound = UpdateProductGlobals$Outbound;
}

export function updateProductGlobalsToJSON(
  updateProductGlobals: UpdateProductGlobals,
): string {
  return JSON.stringify(
    UpdateProductGlobals$outboundSchema.parse(updateProductGlobals),
  );
}

export function updateProductGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProductGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProductGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProductGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateProductRequest$inboundSchema: z.ZodType<
  UpdateProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  productID: z.string(),
  ProductRequest: components.ProductRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ProductRequest": "productRequest",
  });
});

/** @internal */
export type UpdateProductRequest$Outbound = {
  accountID: string;
  productID: string;
  ProductRequest: components.ProductRequest$Outbound;
};

/** @internal */
export const UpdateProductRequest$outboundSchema: z.ZodType<
  UpdateProductRequest$Outbound,
  z.ZodTypeDef,
  UpdateProductRequest
> = z.object({
  accountID: z.string(),
  productID: z.string(),
  productRequest: components.ProductRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    productRequest: "ProductRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProductRequest$ {
  /** @deprecated use `UpdateProductRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateProductRequest$inboundSchema;
  /** @deprecated use `UpdateProductRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateProductRequest$outboundSchema;
  /** @deprecated use `UpdateProductRequest$Outbound` instead. */
  export type Outbound = UpdateProductRequest$Outbound;
}

export function updateProductRequestToJSON(
  updateProductRequest: UpdateProductRequest,
): string {
  return JSON.stringify(
    UpdateProductRequest$outboundSchema.parse(updateProductRequest),
  );
}

export function updateProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProductRequest' from JSON`,
  );
}

/** @internal */
export const UpdateProductResponse$inboundSchema: z.ZodType<
  UpdateProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Product$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateProductResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Product$Outbound;
};

/** @internal */
export const UpdateProductResponse$outboundSchema: z.ZodType<
  UpdateProductResponse$Outbound,
  z.ZodTypeDef,
  UpdateProductResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Product$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProductResponse$ {
  /** @deprecated use `UpdateProductResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateProductResponse$inboundSchema;
  /** @deprecated use `UpdateProductResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateProductResponse$outboundSchema;
  /** @deprecated use `UpdateProductResponse$Outbound` instead. */
  export type Outbound = UpdateProductResponse$Outbound;
}

export function updateProductResponseToJSON(
  updateProductResponse: UpdateProductResponse,
): string {
  return JSON.stringify(
    UpdateProductResponse$outboundSchema.parse(updateProductResponse),
  );
}

export function updateProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProductResponse' from JSON`,
  );
}
