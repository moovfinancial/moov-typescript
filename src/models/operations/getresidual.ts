/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetResidualGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetResidualRequest = {
  accountID: string;
  residualID: string;
};

export type GetResidualResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Residual;
};

/** @internal */
export const GetResidualGlobals$inboundSchema: z.ZodType<
  GetResidualGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetResidualGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetResidualGlobals$outboundSchema: z.ZodType<
  GetResidualGlobals$Outbound,
  z.ZodTypeDef,
  GetResidualGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResidualGlobals$ {
  /** @deprecated use `GetResidualGlobals$inboundSchema` instead. */
  export const inboundSchema = GetResidualGlobals$inboundSchema;
  /** @deprecated use `GetResidualGlobals$outboundSchema` instead. */
  export const outboundSchema = GetResidualGlobals$outboundSchema;
  /** @deprecated use `GetResidualGlobals$Outbound` instead. */
  export type Outbound = GetResidualGlobals$Outbound;
}

export function getResidualGlobalsToJSON(
  getResidualGlobals: GetResidualGlobals,
): string {
  return JSON.stringify(
    GetResidualGlobals$outboundSchema.parse(getResidualGlobals),
  );
}

export function getResidualGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetResidualGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResidualGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResidualGlobals' from JSON`,
  );
}

/** @internal */
export const GetResidualRequest$inboundSchema: z.ZodType<
  GetResidualRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  residualID: z.string(),
});

/** @internal */
export type GetResidualRequest$Outbound = {
  accountID: string;
  residualID: string;
};

/** @internal */
export const GetResidualRequest$outboundSchema: z.ZodType<
  GetResidualRequest$Outbound,
  z.ZodTypeDef,
  GetResidualRequest
> = z.object({
  accountID: z.string(),
  residualID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResidualRequest$ {
  /** @deprecated use `GetResidualRequest$inboundSchema` instead. */
  export const inboundSchema = GetResidualRequest$inboundSchema;
  /** @deprecated use `GetResidualRequest$outboundSchema` instead. */
  export const outboundSchema = GetResidualRequest$outboundSchema;
  /** @deprecated use `GetResidualRequest$Outbound` instead. */
  export type Outbound = GetResidualRequest$Outbound;
}

export function getResidualRequestToJSON(
  getResidualRequest: GetResidualRequest,
): string {
  return JSON.stringify(
    GetResidualRequest$outboundSchema.parse(getResidualRequest),
  );
}

export function getResidualRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResidualRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResidualRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResidualRequest' from JSON`,
  );
}

/** @internal */
export const GetResidualResponse$inboundSchema: z.ZodType<
  GetResidualResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.Residual$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetResidualResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Residual$Outbound;
};

/** @internal */
export const GetResidualResponse$outboundSchema: z.ZodType<
  GetResidualResponse$Outbound,
  z.ZodTypeDef,
  GetResidualResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Residual$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResidualResponse$ {
  /** @deprecated use `GetResidualResponse$inboundSchema` instead. */
  export const inboundSchema = GetResidualResponse$inboundSchema;
  /** @deprecated use `GetResidualResponse$outboundSchema` instead. */
  export const outboundSchema = GetResidualResponse$outboundSchema;
  /** @deprecated use `GetResidualResponse$Outbound` instead. */
  export type Outbound = GetResidualResponse$Outbound;
}

export function getResidualResponseToJSON(
  getResidualResponse: GetResidualResponse,
): string {
  return JSON.stringify(
    GetResidualResponse$outboundSchema.parse(getResidualResponse),
  );
}

export function getResidualResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetResidualResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResidualResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResidualResponse' from JSON`,
  );
}
