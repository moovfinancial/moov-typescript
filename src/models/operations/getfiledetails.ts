/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFileDetailsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetFileDetailsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  fileID: string;
};

/** @internal */
export const GetFileDetailsSecurity$inboundSchema: z.ZodType<
  GetFileDetailsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetFileDetailsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetFileDetailsSecurity$outboundSchema: z.ZodType<
  GetFileDetailsSecurity$Outbound,
  z.ZodTypeDef,
  GetFileDetailsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFileDetailsSecurity$ {
  /** @deprecated use `GetFileDetailsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetFileDetailsSecurity$inboundSchema;
  /** @deprecated use `GetFileDetailsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetFileDetailsSecurity$outboundSchema;
  /** @deprecated use `GetFileDetailsSecurity$Outbound` instead. */
  export type Outbound = GetFileDetailsSecurity$Outbound;
}

export function getFileDetailsSecurityToJSON(
  getFileDetailsSecurity: GetFileDetailsSecurity,
): string {
  return JSON.stringify(
    GetFileDetailsSecurity$outboundSchema.parse(getFileDetailsSecurity),
  );
}

export function getFileDetailsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetFileDetailsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFileDetailsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFileDetailsSecurity' from JSON`,
  );
}

/** @internal */
export const GetFileDetailsRequest$inboundSchema: z.ZodType<
  GetFileDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  fileID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetFileDetailsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  fileID: string;
};

/** @internal */
export const GetFileDetailsRequest$outboundSchema: z.ZodType<
  GetFileDetailsRequest$Outbound,
  z.ZodTypeDef,
  GetFileDetailsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  fileID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFileDetailsRequest$ {
  /** @deprecated use `GetFileDetailsRequest$inboundSchema` instead. */
  export const inboundSchema = GetFileDetailsRequest$inboundSchema;
  /** @deprecated use `GetFileDetailsRequest$outboundSchema` instead. */
  export const outboundSchema = GetFileDetailsRequest$outboundSchema;
  /** @deprecated use `GetFileDetailsRequest$Outbound` instead. */
  export type Outbound = GetFileDetailsRequest$Outbound;
}

export function getFileDetailsRequestToJSON(
  getFileDetailsRequest: GetFileDetailsRequest,
): string {
  return JSON.stringify(
    GetFileDetailsRequest$outboundSchema.parse(getFileDetailsRequest),
  );
}

export function getFileDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFileDetailsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFileDetailsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFileDetailsRequest' from JSON`,
  );
}
