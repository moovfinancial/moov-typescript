/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestEndToEndTokenSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type TestEndToEndTokenRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  e2EEToken: components.E2EEToken;
};

/** @internal */
export const TestEndToEndTokenSecurity$inboundSchema: z.ZodType<
  TestEndToEndTokenSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type TestEndToEndTokenSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const TestEndToEndTokenSecurity$outboundSchema: z.ZodType<
  TestEndToEndTokenSecurity$Outbound,
  z.ZodTypeDef,
  TestEndToEndTokenSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestEndToEndTokenSecurity$ {
  /** @deprecated use `TestEndToEndTokenSecurity$inboundSchema` instead. */
  export const inboundSchema = TestEndToEndTokenSecurity$inboundSchema;
  /** @deprecated use `TestEndToEndTokenSecurity$outboundSchema` instead. */
  export const outboundSchema = TestEndToEndTokenSecurity$outboundSchema;
  /** @deprecated use `TestEndToEndTokenSecurity$Outbound` instead. */
  export type Outbound = TestEndToEndTokenSecurity$Outbound;
}

export function testEndToEndTokenSecurityToJSON(
  testEndToEndTokenSecurity: TestEndToEndTokenSecurity,
): string {
  return JSON.stringify(
    TestEndToEndTokenSecurity$outboundSchema.parse(testEndToEndTokenSecurity),
  );
}

export function testEndToEndTokenSecurityFromJSON(
  jsonString: string,
): SafeParseResult<TestEndToEndTokenSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestEndToEndTokenSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestEndToEndTokenSecurity' from JSON`,
  );
}

/** @internal */
export const TestEndToEndTokenRequest$inboundSchema: z.ZodType<
  TestEndToEndTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  E2EEToken: components.E2EEToken$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "E2EEToken": "e2EEToken",
  });
});

/** @internal */
export type TestEndToEndTokenRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  E2EEToken: components.E2EEToken$Outbound;
};

/** @internal */
export const TestEndToEndTokenRequest$outboundSchema: z.ZodType<
  TestEndToEndTokenRequest$Outbound,
  z.ZodTypeDef,
  TestEndToEndTokenRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  e2EEToken: components.E2EEToken$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    e2EEToken: "E2EEToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestEndToEndTokenRequest$ {
  /** @deprecated use `TestEndToEndTokenRequest$inboundSchema` instead. */
  export const inboundSchema = TestEndToEndTokenRequest$inboundSchema;
  /** @deprecated use `TestEndToEndTokenRequest$outboundSchema` instead. */
  export const outboundSchema = TestEndToEndTokenRequest$outboundSchema;
  /** @deprecated use `TestEndToEndTokenRequest$Outbound` instead. */
  export type Outbound = TestEndToEndTokenRequest$Outbound;
}

export function testEndToEndTokenRequestToJSON(
  testEndToEndTokenRequest: TestEndToEndTokenRequest,
): string {
  return JSON.stringify(
    TestEndToEndTokenRequest$outboundSchema.parse(testEndToEndTokenRequest),
  );
}

export function testEndToEndTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestEndToEndTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestEndToEndTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestEndToEndTokenRequest' from JSON`,
  );
}
