/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestEndToEndTokenGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type TestEndToEndTokenResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const TestEndToEndTokenGlobals$inboundSchema: z.ZodType<
  TestEndToEndTokenGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type TestEndToEndTokenGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const TestEndToEndTokenGlobals$outboundSchema: z.ZodType<
  TestEndToEndTokenGlobals$Outbound,
  z.ZodTypeDef,
  TestEndToEndTokenGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestEndToEndTokenGlobals$ {
  /** @deprecated use `TestEndToEndTokenGlobals$inboundSchema` instead. */
  export const inboundSchema = TestEndToEndTokenGlobals$inboundSchema;
  /** @deprecated use `TestEndToEndTokenGlobals$outboundSchema` instead. */
  export const outboundSchema = TestEndToEndTokenGlobals$outboundSchema;
  /** @deprecated use `TestEndToEndTokenGlobals$Outbound` instead. */
  export type Outbound = TestEndToEndTokenGlobals$Outbound;
}

export function testEndToEndTokenGlobalsToJSON(
  testEndToEndTokenGlobals: TestEndToEndTokenGlobals,
): string {
  return JSON.stringify(
    TestEndToEndTokenGlobals$outboundSchema.parse(testEndToEndTokenGlobals),
  );
}

export function testEndToEndTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<TestEndToEndTokenGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestEndToEndTokenGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestEndToEndTokenGlobals' from JSON`,
  );
}

/** @internal */
export const TestEndToEndTokenResponse$inboundSchema: z.ZodType<
  TestEndToEndTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type TestEndToEndTokenResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const TestEndToEndTokenResponse$outboundSchema: z.ZodType<
  TestEndToEndTokenResponse$Outbound,
  z.ZodTypeDef,
  TestEndToEndTokenResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestEndToEndTokenResponse$ {
  /** @deprecated use `TestEndToEndTokenResponse$inboundSchema` instead. */
  export const inboundSchema = TestEndToEndTokenResponse$inboundSchema;
  /** @deprecated use `TestEndToEndTokenResponse$outboundSchema` instead. */
  export const outboundSchema = TestEndToEndTokenResponse$outboundSchema;
  /** @deprecated use `TestEndToEndTokenResponse$Outbound` instead. */
  export type Outbound = TestEndToEndTokenResponse$Outbound;
}

export function testEndToEndTokenResponseToJSON(
  testEndToEndTokenResponse: TestEndToEndTokenResponse,
): string {
  return JSON.stringify(
    TestEndToEndTokenResponse$outboundSchema.parse(testEndToEndTokenResponse),
  );
}

export function testEndToEndTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<TestEndToEndTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestEndToEndTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestEndToEndTokenResponse' from JSON`,
  );
}
