/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReverseTransferSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ReverseTransferRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Prevents duplicate reversals from being created.
   */
  xIdempotencyKey: string;
  /**
   * The Moov account ID.
   */
  accountID: string;
  /**
   * The transfer ID to reverse.
   */
  transferID: string;
  createReversal?: components.CreateReversal | undefined;
};

/** @internal */
export const ReverseTransferSecurity$inboundSchema: z.ZodType<
  ReverseTransferSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ReverseTransferSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ReverseTransferSecurity$outboundSchema: z.ZodType<
  ReverseTransferSecurity$Outbound,
  z.ZodTypeDef,
  ReverseTransferSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReverseTransferSecurity$ {
  /** @deprecated use `ReverseTransferSecurity$inboundSchema` instead. */
  export const inboundSchema = ReverseTransferSecurity$inboundSchema;
  /** @deprecated use `ReverseTransferSecurity$outboundSchema` instead. */
  export const outboundSchema = ReverseTransferSecurity$outboundSchema;
  /** @deprecated use `ReverseTransferSecurity$Outbound` instead. */
  export type Outbound = ReverseTransferSecurity$Outbound;
}

export function reverseTransferSecurityToJSON(
  reverseTransferSecurity: ReverseTransferSecurity,
): string {
  return JSON.stringify(
    ReverseTransferSecurity$outboundSchema.parse(reverseTransferSecurity),
  );
}

export function reverseTransferSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ReverseTransferSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReverseTransferSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReverseTransferSecurity' from JSON`,
  );
}

/** @internal */
export const ReverseTransferRequest$inboundSchema: z.ZodType<
  ReverseTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  "x-idempotency-key": z.string(),
  accountID: z.string(),
  transferID: z.string(),
  CreateReversal: components.CreateReversal$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "x-idempotency-key": "xIdempotencyKey",
    "CreateReversal": "createReversal",
  });
});

/** @internal */
export type ReverseTransferRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  "x-idempotency-key": string;
  accountID: string;
  transferID: string;
  CreateReversal?: components.CreateReversal$Outbound | undefined;
};

/** @internal */
export const ReverseTransferRequest$outboundSchema: z.ZodType<
  ReverseTransferRequest$Outbound,
  z.ZodTypeDef,
  ReverseTransferRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  xIdempotencyKey: z.string(),
  accountID: z.string(),
  transferID: z.string(),
  createReversal: components.CreateReversal$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    xIdempotencyKey: "x-idempotency-key",
    createReversal: "CreateReversal",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReverseTransferRequest$ {
  /** @deprecated use `ReverseTransferRequest$inboundSchema` instead. */
  export const inboundSchema = ReverseTransferRequest$inboundSchema;
  /** @deprecated use `ReverseTransferRequest$outboundSchema` instead. */
  export const outboundSchema = ReverseTransferRequest$outboundSchema;
  /** @deprecated use `ReverseTransferRequest$Outbound` instead. */
  export type Outbound = ReverseTransferRequest$Outbound;
}

export function reverseTransferRequestToJSON(
  reverseTransferRequest: ReverseTransferRequest,
): string {
  return JSON.stringify(
    ReverseTransferRequest$outboundSchema.parse(reverseTransferRequest),
  );
}

export function reverseTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReverseTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReverseTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReverseTransferRequest' from JSON`,
  );
}
