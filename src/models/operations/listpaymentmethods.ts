/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPaymentMethodsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListPaymentMethodsRequest = {
  accountID: string;
  /**
   * Optional parameter to filter the account's payment methods by source ID.
   *
   * @remarks
   *
   * A source ID can be a [walletID](https://docs.moov.io/api/sources/wallets/list/), [cardID](https://docs.moov.io/api/sources/cards/list/),
   * or [bankAccountID](https://docs.moov.io/api/sources/bank-accounts/list/).
   */
  sourceID?: string | undefined;
  /**
   * Optional parameter to filter the account's payment methods by payment method type.
   */
  paymentMethodType?: components.PaymentMethodType | undefined;
};

export type ListPaymentMethodsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.PaymentMethod>;
};

/** @internal */
export const ListPaymentMethodsGlobals$inboundSchema: z.ZodType<
  ListPaymentMethodsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListPaymentMethodsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListPaymentMethodsGlobals$outboundSchema: z.ZodType<
  ListPaymentMethodsGlobals$Outbound,
  z.ZodTypeDef,
  ListPaymentMethodsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentMethodsGlobals$ {
  /** @deprecated use `ListPaymentMethodsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListPaymentMethodsGlobals$inboundSchema;
  /** @deprecated use `ListPaymentMethodsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListPaymentMethodsGlobals$outboundSchema;
  /** @deprecated use `ListPaymentMethodsGlobals$Outbound` instead. */
  export type Outbound = ListPaymentMethodsGlobals$Outbound;
}

export function listPaymentMethodsGlobalsToJSON(
  listPaymentMethodsGlobals: ListPaymentMethodsGlobals,
): string {
  return JSON.stringify(
    ListPaymentMethodsGlobals$outboundSchema.parse(listPaymentMethodsGlobals),
  );
}

export function listPaymentMethodsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentMethodsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentMethodsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentMethodsGlobals' from JSON`,
  );
}

/** @internal */
export const ListPaymentMethodsRequest$inboundSchema: z.ZodType<
  ListPaymentMethodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  sourceID: z.string().optional(),
  paymentMethodType: components.PaymentMethodType$inboundSchema.optional(),
});

/** @internal */
export type ListPaymentMethodsRequest$Outbound = {
  accountID: string;
  sourceID?: string | undefined;
  paymentMethodType?: string | undefined;
};

/** @internal */
export const ListPaymentMethodsRequest$outboundSchema: z.ZodType<
  ListPaymentMethodsRequest$Outbound,
  z.ZodTypeDef,
  ListPaymentMethodsRequest
> = z.object({
  accountID: z.string(),
  sourceID: z.string().optional(),
  paymentMethodType: components.PaymentMethodType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentMethodsRequest$ {
  /** @deprecated use `ListPaymentMethodsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaymentMethodsRequest$inboundSchema;
  /** @deprecated use `ListPaymentMethodsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaymentMethodsRequest$outboundSchema;
  /** @deprecated use `ListPaymentMethodsRequest$Outbound` instead. */
  export type Outbound = ListPaymentMethodsRequest$Outbound;
}

export function listPaymentMethodsRequestToJSON(
  listPaymentMethodsRequest: ListPaymentMethodsRequest,
): string {
  return JSON.stringify(
    ListPaymentMethodsRequest$outboundSchema.parse(listPaymentMethodsRequest),
  );
}

export function listPaymentMethodsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentMethodsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentMethodsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentMethodsRequest' from JSON`,
  );
}

/** @internal */
export const ListPaymentMethodsResponse$inboundSchema: z.ZodType<
  ListPaymentMethodsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.PaymentMethod$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListPaymentMethodsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.PaymentMethod$Outbound>;
};

/** @internal */
export const ListPaymentMethodsResponse$outboundSchema: z.ZodType<
  ListPaymentMethodsResponse$Outbound,
  z.ZodTypeDef,
  ListPaymentMethodsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.PaymentMethod$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentMethodsResponse$ {
  /** @deprecated use `ListPaymentMethodsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPaymentMethodsResponse$inboundSchema;
  /** @deprecated use `ListPaymentMethodsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPaymentMethodsResponse$outboundSchema;
  /** @deprecated use `ListPaymentMethodsResponse$Outbound` instead. */
  export type Outbound = ListPaymentMethodsResponse$Outbound;
}

export function listPaymentMethodsResponseToJSON(
  listPaymentMethodsResponse: ListPaymentMethodsResponse,
): string {
  return JSON.stringify(
    ListPaymentMethodsResponse$outboundSchema.parse(listPaymentMethodsResponse),
  );
}

export function listPaymentMethodsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentMethodsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentMethodsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentMethodsResponse' from JSON`,
  );
}
