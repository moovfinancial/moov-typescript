/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPaymentMethodsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListPaymentMethodsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  /**
   * Optional parameter to filter the account's payment methods by source ID. A source ID can be a [walletID](https://docs.moov.io/api/sources/wallets/list/), [cardID](https://docs.moov.io/api/sources/cards/list/), or [bankAccountID](https://docs.moov.io/api/sources/bank-accounts/list/).
   */
  sourceID?: string | undefined;
  /**
   * Optional parameter to filter the account's payment methods by payment method type.
   */
  paymentMethodType?: components.PaymentMethodType | undefined;
};

/** @internal */
export const ListPaymentMethodsSecurity$inboundSchema: z.ZodType<
  ListPaymentMethodsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListPaymentMethodsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListPaymentMethodsSecurity$outboundSchema: z.ZodType<
  ListPaymentMethodsSecurity$Outbound,
  z.ZodTypeDef,
  ListPaymentMethodsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentMethodsSecurity$ {
  /** @deprecated use `ListPaymentMethodsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListPaymentMethodsSecurity$inboundSchema;
  /** @deprecated use `ListPaymentMethodsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListPaymentMethodsSecurity$outboundSchema;
  /** @deprecated use `ListPaymentMethodsSecurity$Outbound` instead. */
  export type Outbound = ListPaymentMethodsSecurity$Outbound;
}

export function listPaymentMethodsSecurityToJSON(
  listPaymentMethodsSecurity: ListPaymentMethodsSecurity,
): string {
  return JSON.stringify(
    ListPaymentMethodsSecurity$outboundSchema.parse(listPaymentMethodsSecurity),
  );
}

export function listPaymentMethodsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentMethodsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentMethodsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentMethodsSecurity' from JSON`,
  );
}

/** @internal */
export const ListPaymentMethodsRequest$inboundSchema: z.ZodType<
  ListPaymentMethodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  sourceID: z.string().optional(),
  paymentMethodType: components.PaymentMethodType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListPaymentMethodsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  sourceID?: string | undefined;
  paymentMethodType?: string | undefined;
};

/** @internal */
export const ListPaymentMethodsRequest$outboundSchema: z.ZodType<
  ListPaymentMethodsRequest$Outbound,
  z.ZodTypeDef,
  ListPaymentMethodsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  sourceID: z.string().optional(),
  paymentMethodType: components.PaymentMethodType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentMethodsRequest$ {
  /** @deprecated use `ListPaymentMethodsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaymentMethodsRequest$inboundSchema;
  /** @deprecated use `ListPaymentMethodsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaymentMethodsRequest$outboundSchema;
  /** @deprecated use `ListPaymentMethodsRequest$Outbound` instead. */
  export type Outbound = ListPaymentMethodsRequest$Outbound;
}

export function listPaymentMethodsRequestToJSON(
  listPaymentMethodsRequest: ListPaymentMethodsRequest,
): string {
  return JSON.stringify(
    ListPaymentMethodsRequest$outboundSchema.parse(listPaymentMethodsRequest),
  );
}

export function listPaymentMethodsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentMethodsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentMethodsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentMethodsRequest' from JSON`,
  );
}
