/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTerminalApplicationVersionGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateTerminalApplicationVersionRequest = {
  terminalApplicationID: string;
  terminalApplicationVersion: components.TerminalApplicationVersion;
};

export type CreateTerminalApplicationVersionResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TerminalApplicationVersion;
};

/** @internal */
export const CreateTerminalApplicationVersionGlobals$inboundSchema: z.ZodType<
  CreateTerminalApplicationVersionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type CreateTerminalApplicationVersionGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const CreateTerminalApplicationVersionGlobals$outboundSchema: z.ZodType<
  CreateTerminalApplicationVersionGlobals$Outbound,
  z.ZodTypeDef,
  CreateTerminalApplicationVersionGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTerminalApplicationVersionGlobals$ {
  /** @deprecated use `CreateTerminalApplicationVersionGlobals$inboundSchema` instead. */
  export const inboundSchema =
    CreateTerminalApplicationVersionGlobals$inboundSchema;
  /** @deprecated use `CreateTerminalApplicationVersionGlobals$outboundSchema` instead. */
  export const outboundSchema =
    CreateTerminalApplicationVersionGlobals$outboundSchema;
  /** @deprecated use `CreateTerminalApplicationVersionGlobals$Outbound` instead. */
  export type Outbound = CreateTerminalApplicationVersionGlobals$Outbound;
}

export function createTerminalApplicationVersionGlobalsToJSON(
  createTerminalApplicationVersionGlobals:
    CreateTerminalApplicationVersionGlobals,
): string {
  return JSON.stringify(
    CreateTerminalApplicationVersionGlobals$outboundSchema.parse(
      createTerminalApplicationVersionGlobals,
    ),
  );
}

export function createTerminalApplicationVersionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTerminalApplicationVersionGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTerminalApplicationVersionGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTerminalApplicationVersionGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTerminalApplicationVersionRequest$inboundSchema: z.ZodType<
  CreateTerminalApplicationVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  terminalApplicationID: z.string(),
  TerminalApplicationVersion:
    components.TerminalApplicationVersion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "TerminalApplicationVersion": "terminalApplicationVersion",
  });
});

/** @internal */
export type CreateTerminalApplicationVersionRequest$Outbound = {
  terminalApplicationID: string;
  TerminalApplicationVersion: components.TerminalApplicationVersion$Outbound;
};

/** @internal */
export const CreateTerminalApplicationVersionRequest$outboundSchema: z.ZodType<
  CreateTerminalApplicationVersionRequest$Outbound,
  z.ZodTypeDef,
  CreateTerminalApplicationVersionRequest
> = z.object({
  terminalApplicationID: z.string(),
  terminalApplicationVersion:
    components.TerminalApplicationVersion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    terminalApplicationVersion: "TerminalApplicationVersion",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTerminalApplicationVersionRequest$ {
  /** @deprecated use `CreateTerminalApplicationVersionRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateTerminalApplicationVersionRequest$inboundSchema;
  /** @deprecated use `CreateTerminalApplicationVersionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateTerminalApplicationVersionRequest$outboundSchema;
  /** @deprecated use `CreateTerminalApplicationVersionRequest$Outbound` instead. */
  export type Outbound = CreateTerminalApplicationVersionRequest$Outbound;
}

export function createTerminalApplicationVersionRequestToJSON(
  createTerminalApplicationVersionRequest:
    CreateTerminalApplicationVersionRequest,
): string {
  return JSON.stringify(
    CreateTerminalApplicationVersionRequest$outboundSchema.parse(
      createTerminalApplicationVersionRequest,
    ),
  );
}

export function createTerminalApplicationVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTerminalApplicationVersionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTerminalApplicationVersionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTerminalApplicationVersionRequest' from JSON`,
  );
}

/** @internal */
export const CreateTerminalApplicationVersionResponse$inboundSchema: z.ZodType<
  CreateTerminalApplicationVersionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.TerminalApplicationVersion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateTerminalApplicationVersionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TerminalApplicationVersion$Outbound;
};

/** @internal */
export const CreateTerminalApplicationVersionResponse$outboundSchema: z.ZodType<
  CreateTerminalApplicationVersionResponse$Outbound,
  z.ZodTypeDef,
  CreateTerminalApplicationVersionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TerminalApplicationVersion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTerminalApplicationVersionResponse$ {
  /** @deprecated use `CreateTerminalApplicationVersionResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateTerminalApplicationVersionResponse$inboundSchema;
  /** @deprecated use `CreateTerminalApplicationVersionResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateTerminalApplicationVersionResponse$outboundSchema;
  /** @deprecated use `CreateTerminalApplicationVersionResponse$Outbound` instead. */
  export type Outbound = CreateTerminalApplicationVersionResponse$Outbound;
}

export function createTerminalApplicationVersionResponseToJSON(
  createTerminalApplicationVersionResponse:
    CreateTerminalApplicationVersionResponse,
): string {
  return JSON.stringify(
    CreateTerminalApplicationVersionResponse$outboundSchema.parse(
      createTerminalApplicationVersionResponse,
    ),
  );
}

export function createTerminalApplicationVersionResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTerminalApplicationVersionResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTerminalApplicationVersionResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTerminalApplicationVersionResponse' from JSON`,
  );
}
