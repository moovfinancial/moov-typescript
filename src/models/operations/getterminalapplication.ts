/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTerminalApplicationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetTerminalApplicationRequest = {
  terminalApplicationID: string;
};

export type GetTerminalApplicationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TerminalApplication;
};

/** @internal */
export const GetTerminalApplicationGlobals$inboundSchema: z.ZodType<
  GetTerminalApplicationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetTerminalApplicationGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetTerminalApplicationGlobals$outboundSchema: z.ZodType<
  GetTerminalApplicationGlobals$Outbound,
  z.ZodTypeDef,
  GetTerminalApplicationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTerminalApplicationGlobals$ {
  /** @deprecated use `GetTerminalApplicationGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTerminalApplicationGlobals$inboundSchema;
  /** @deprecated use `GetTerminalApplicationGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTerminalApplicationGlobals$outboundSchema;
  /** @deprecated use `GetTerminalApplicationGlobals$Outbound` instead. */
  export type Outbound = GetTerminalApplicationGlobals$Outbound;
}

export function getTerminalApplicationGlobalsToJSON(
  getTerminalApplicationGlobals: GetTerminalApplicationGlobals,
): string {
  return JSON.stringify(
    GetTerminalApplicationGlobals$outboundSchema.parse(
      getTerminalApplicationGlobals,
    ),
  );
}

export function getTerminalApplicationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTerminalApplicationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTerminalApplicationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTerminalApplicationGlobals' from JSON`,
  );
}

/** @internal */
export const GetTerminalApplicationRequest$inboundSchema: z.ZodType<
  GetTerminalApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  terminalApplicationID: z.string(),
});

/** @internal */
export type GetTerminalApplicationRequest$Outbound = {
  terminalApplicationID: string;
};

/** @internal */
export const GetTerminalApplicationRequest$outboundSchema: z.ZodType<
  GetTerminalApplicationRequest$Outbound,
  z.ZodTypeDef,
  GetTerminalApplicationRequest
> = z.object({
  terminalApplicationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTerminalApplicationRequest$ {
  /** @deprecated use `GetTerminalApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = GetTerminalApplicationRequest$inboundSchema;
  /** @deprecated use `GetTerminalApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = GetTerminalApplicationRequest$outboundSchema;
  /** @deprecated use `GetTerminalApplicationRequest$Outbound` instead. */
  export type Outbound = GetTerminalApplicationRequest$Outbound;
}

export function getTerminalApplicationRequestToJSON(
  getTerminalApplicationRequest: GetTerminalApplicationRequest,
): string {
  return JSON.stringify(
    GetTerminalApplicationRequest$outboundSchema.parse(
      getTerminalApplicationRequest,
    ),
  );
}

export function getTerminalApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTerminalApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTerminalApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTerminalApplicationRequest' from JSON`,
  );
}

/** @internal */
export const GetTerminalApplicationResponse$inboundSchema: z.ZodType<
  GetTerminalApplicationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.TerminalApplication$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetTerminalApplicationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TerminalApplication$Outbound;
};

/** @internal */
export const GetTerminalApplicationResponse$outboundSchema: z.ZodType<
  GetTerminalApplicationResponse$Outbound,
  z.ZodTypeDef,
  GetTerminalApplicationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TerminalApplication$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTerminalApplicationResponse$ {
  /** @deprecated use `GetTerminalApplicationResponse$inboundSchema` instead. */
  export const inboundSchema = GetTerminalApplicationResponse$inboundSchema;
  /** @deprecated use `GetTerminalApplicationResponse$outboundSchema` instead. */
  export const outboundSchema = GetTerminalApplicationResponse$outboundSchema;
  /** @deprecated use `GetTerminalApplicationResponse$Outbound` instead. */
  export type Outbound = GetTerminalApplicationResponse$Outbound;
}

export function getTerminalApplicationResponseToJSON(
  getTerminalApplicationResponse: GetTerminalApplicationResponse,
): string {
  return JSON.stringify(
    GetTerminalApplicationResponse$outboundSchema.parse(
      getTerminalApplicationResponse,
    ),
  );
}

export function getTerminalApplicationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTerminalApplicationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTerminalApplicationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTerminalApplicationResponse' from JSON`,
  );
}
