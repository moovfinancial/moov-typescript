/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOnboardingInviteGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetOnboardingInviteRequest = {
  code: string;
};

export type GetOnboardingInviteResponse = {
  headers: { [k: string]: Array<string> };
  result: components.OnboardingInvite;
};

/** @internal */
export const GetOnboardingInviteGlobals$inboundSchema: z.ZodType<
  GetOnboardingInviteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetOnboardingInviteGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetOnboardingInviteGlobals$outboundSchema: z.ZodType<
  GetOnboardingInviteGlobals$Outbound,
  z.ZodTypeDef,
  GetOnboardingInviteGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOnboardingInviteGlobals$ {
  /** @deprecated use `GetOnboardingInviteGlobals$inboundSchema` instead. */
  export const inboundSchema = GetOnboardingInviteGlobals$inboundSchema;
  /** @deprecated use `GetOnboardingInviteGlobals$outboundSchema` instead. */
  export const outboundSchema = GetOnboardingInviteGlobals$outboundSchema;
  /** @deprecated use `GetOnboardingInviteGlobals$Outbound` instead. */
  export type Outbound = GetOnboardingInviteGlobals$Outbound;
}

export function getOnboardingInviteGlobalsToJSON(
  getOnboardingInviteGlobals: GetOnboardingInviteGlobals,
): string {
  return JSON.stringify(
    GetOnboardingInviteGlobals$outboundSchema.parse(getOnboardingInviteGlobals),
  );
}

export function getOnboardingInviteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetOnboardingInviteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOnboardingInviteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOnboardingInviteGlobals' from JSON`,
  );
}

/** @internal */
export const GetOnboardingInviteRequest$inboundSchema: z.ZodType<
  GetOnboardingInviteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
});

/** @internal */
export type GetOnboardingInviteRequest$Outbound = {
  code: string;
};

/** @internal */
export const GetOnboardingInviteRequest$outboundSchema: z.ZodType<
  GetOnboardingInviteRequest$Outbound,
  z.ZodTypeDef,
  GetOnboardingInviteRequest
> = z.object({
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOnboardingInviteRequest$ {
  /** @deprecated use `GetOnboardingInviteRequest$inboundSchema` instead. */
  export const inboundSchema = GetOnboardingInviteRequest$inboundSchema;
  /** @deprecated use `GetOnboardingInviteRequest$outboundSchema` instead. */
  export const outboundSchema = GetOnboardingInviteRequest$outboundSchema;
  /** @deprecated use `GetOnboardingInviteRequest$Outbound` instead. */
  export type Outbound = GetOnboardingInviteRequest$Outbound;
}

export function getOnboardingInviteRequestToJSON(
  getOnboardingInviteRequest: GetOnboardingInviteRequest,
): string {
  return JSON.stringify(
    GetOnboardingInviteRequest$outboundSchema.parse(getOnboardingInviteRequest),
  );
}

export function getOnboardingInviteRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOnboardingInviteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOnboardingInviteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOnboardingInviteRequest' from JSON`,
  );
}

/** @internal */
export const GetOnboardingInviteResponse$inboundSchema: z.ZodType<
  GetOnboardingInviteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.OnboardingInvite$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetOnboardingInviteResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.OnboardingInvite$Outbound;
};

/** @internal */
export const GetOnboardingInviteResponse$outboundSchema: z.ZodType<
  GetOnboardingInviteResponse$Outbound,
  z.ZodTypeDef,
  GetOnboardingInviteResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.OnboardingInvite$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOnboardingInviteResponse$ {
  /** @deprecated use `GetOnboardingInviteResponse$inboundSchema` instead. */
  export const inboundSchema = GetOnboardingInviteResponse$inboundSchema;
  /** @deprecated use `GetOnboardingInviteResponse$outboundSchema` instead. */
  export const outboundSchema = GetOnboardingInviteResponse$outboundSchema;
  /** @deprecated use `GetOnboardingInviteResponse$Outbound` instead. */
  export type Outbound = GetOnboardingInviteResponse$Outbound;
}

export function getOnboardingInviteResponseToJSON(
  getOnboardingInviteResponse: GetOnboardingInviteResponse,
): string {
  return JSON.stringify(
    GetOnboardingInviteResponse$outboundSchema.parse(
      getOnboardingInviteResponse,
    ),
  );
}

export function getOnboardingInviteResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOnboardingInviteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOnboardingInviteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOnboardingInviteResponse' from JSON`,
  );
}
