/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestCardGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type RequestCardRequest = {
  /**
   * The Moov business account for which the card is to be issued.
   */
  accountID: string;
  requestCard: components.RequestCard;
};

export type RequestCardResponse = {
  headers: { [k: string]: Array<string> };
  result: components.IssuedCard;
};

/** @internal */
export const RequestCardGlobals$inboundSchema: z.ZodType<
  RequestCardGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type RequestCardGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const RequestCardGlobals$outboundSchema: z.ZodType<
  RequestCardGlobals$Outbound,
  z.ZodTypeDef,
  RequestCardGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCardGlobals$ {
  /** @deprecated use `RequestCardGlobals$inboundSchema` instead. */
  export const inboundSchema = RequestCardGlobals$inboundSchema;
  /** @deprecated use `RequestCardGlobals$outboundSchema` instead. */
  export const outboundSchema = RequestCardGlobals$outboundSchema;
  /** @deprecated use `RequestCardGlobals$Outbound` instead. */
  export type Outbound = RequestCardGlobals$Outbound;
}

export function requestCardGlobalsToJSON(
  requestCardGlobals: RequestCardGlobals,
): string {
  return JSON.stringify(
    RequestCardGlobals$outboundSchema.parse(requestCardGlobals),
  );
}

export function requestCardGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RequestCardGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCardGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCardGlobals' from JSON`,
  );
}

/** @internal */
export const RequestCardRequest$inboundSchema: z.ZodType<
  RequestCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  RequestCard: components.RequestCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "RequestCard": "requestCard",
  });
});

/** @internal */
export type RequestCardRequest$Outbound = {
  accountID: string;
  RequestCard: components.RequestCard$Outbound;
};

/** @internal */
export const RequestCardRequest$outboundSchema: z.ZodType<
  RequestCardRequest$Outbound,
  z.ZodTypeDef,
  RequestCardRequest
> = z.object({
  accountID: z.string(),
  requestCard: components.RequestCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    requestCard: "RequestCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCardRequest$ {
  /** @deprecated use `RequestCardRequest$inboundSchema` instead. */
  export const inboundSchema = RequestCardRequest$inboundSchema;
  /** @deprecated use `RequestCardRequest$outboundSchema` instead. */
  export const outboundSchema = RequestCardRequest$outboundSchema;
  /** @deprecated use `RequestCardRequest$Outbound` instead. */
  export type Outbound = RequestCardRequest$Outbound;
}

export function requestCardRequestToJSON(
  requestCardRequest: RequestCardRequest,
): string {
  return JSON.stringify(
    RequestCardRequest$outboundSchema.parse(requestCardRequest),
  );
}

export function requestCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCardRequest' from JSON`,
  );
}

/** @internal */
export const RequestCardResponse$inboundSchema: z.ZodType<
  RequestCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.IssuedCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type RequestCardResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.IssuedCard$Outbound;
};

/** @internal */
export const RequestCardResponse$outboundSchema: z.ZodType<
  RequestCardResponse$Outbound,
  z.ZodTypeDef,
  RequestCardResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.IssuedCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCardResponse$ {
  /** @deprecated use `RequestCardResponse$inboundSchema` instead. */
  export const inboundSchema = RequestCardResponse$inboundSchema;
  /** @deprecated use `RequestCardResponse$outboundSchema` instead. */
  export const outboundSchema = RequestCardResponse$outboundSchema;
  /** @deprecated use `RequestCardResponse$Outbound` instead. */
  export type Outbound = RequestCardResponse$Outbound;
}

export function requestCardResponseToJSON(
  requestCardResponse: RequestCardResponse,
): string {
  return JSON.stringify(
    RequestCardResponse$outboundSchema.parse(requestCardResponse),
  );
}

export function requestCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<RequestCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCardResponse' from JSON`,
  );
}
