/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestCardSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type RequestCardRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * The Moov business account for which the card is to be issued.
   */
  accountID: string;
  requestCard: components.RequestCard;
};

/** @internal */
export const RequestCardSecurity$inboundSchema: z.ZodType<
  RequestCardSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type RequestCardSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const RequestCardSecurity$outboundSchema: z.ZodType<
  RequestCardSecurity$Outbound,
  z.ZodTypeDef,
  RequestCardSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCardSecurity$ {
  /** @deprecated use `RequestCardSecurity$inboundSchema` instead. */
  export const inboundSchema = RequestCardSecurity$inboundSchema;
  /** @deprecated use `RequestCardSecurity$outboundSchema` instead. */
  export const outboundSchema = RequestCardSecurity$outboundSchema;
  /** @deprecated use `RequestCardSecurity$Outbound` instead. */
  export type Outbound = RequestCardSecurity$Outbound;
}

export function requestCardSecurityToJSON(
  requestCardSecurity: RequestCardSecurity,
): string {
  return JSON.stringify(
    RequestCardSecurity$outboundSchema.parse(requestCardSecurity),
  );
}

export function requestCardSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RequestCardSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCardSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCardSecurity' from JSON`,
  );
}

/** @internal */
export const RequestCardRequest$inboundSchema: z.ZodType<
  RequestCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  RequestCard: components.RequestCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "RequestCard": "requestCard",
  });
});

/** @internal */
export type RequestCardRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  RequestCard: components.RequestCard$Outbound;
};

/** @internal */
export const RequestCardRequest$outboundSchema: z.ZodType<
  RequestCardRequest$Outbound,
  z.ZodTypeDef,
  RequestCardRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  requestCard: components.RequestCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    requestCard: "RequestCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCardRequest$ {
  /** @deprecated use `RequestCardRequest$inboundSchema` instead. */
  export const inboundSchema = RequestCardRequest$inboundSchema;
  /** @deprecated use `RequestCardRequest$outboundSchema` instead. */
  export const outboundSchema = RequestCardRequest$outboundSchema;
  /** @deprecated use `RequestCardRequest$Outbound` instead. */
  export type Outbound = RequestCardRequest$Outbound;
}

export function requestCardRequestToJSON(
  requestCardRequest: RequestCardRequest,
): string {
  return JSON.stringify(
    RequestCardRequest$outboundSchema.parse(requestCardRequest),
  );
}

export function requestCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCardRequest' from JSON`,
  );
}
