/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCardsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListCardsRequest = {
  accountID: string;
};

export type ListCardsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Card>;
};

/** @internal */
export const ListCardsGlobals$inboundSchema: z.ZodType<
  ListCardsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListCardsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListCardsGlobals$outboundSchema: z.ZodType<
  ListCardsGlobals$Outbound,
  z.ZodTypeDef,
  ListCardsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCardsGlobals$ {
  /** @deprecated use `ListCardsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListCardsGlobals$inboundSchema;
  /** @deprecated use `ListCardsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListCardsGlobals$outboundSchema;
  /** @deprecated use `ListCardsGlobals$Outbound` instead. */
  export type Outbound = ListCardsGlobals$Outbound;
}

export function listCardsGlobalsToJSON(
  listCardsGlobals: ListCardsGlobals,
): string {
  return JSON.stringify(
    ListCardsGlobals$outboundSchema.parse(listCardsGlobals),
  );
}

export function listCardsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListCardsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCardsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCardsGlobals' from JSON`,
  );
}

/** @internal */
export const ListCardsRequest$inboundSchema: z.ZodType<
  ListCardsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type ListCardsRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const ListCardsRequest$outboundSchema: z.ZodType<
  ListCardsRequest$Outbound,
  z.ZodTypeDef,
  ListCardsRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCardsRequest$ {
  /** @deprecated use `ListCardsRequest$inboundSchema` instead. */
  export const inboundSchema = ListCardsRequest$inboundSchema;
  /** @deprecated use `ListCardsRequest$outboundSchema` instead. */
  export const outboundSchema = ListCardsRequest$outboundSchema;
  /** @deprecated use `ListCardsRequest$Outbound` instead. */
  export type Outbound = ListCardsRequest$Outbound;
}

export function listCardsRequestToJSON(
  listCardsRequest: ListCardsRequest,
): string {
  return JSON.stringify(
    ListCardsRequest$outboundSchema.parse(listCardsRequest),
  );
}

export function listCardsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCardsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCardsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCardsRequest' from JSON`,
  );
}

/** @internal */
export const ListCardsResponse$inboundSchema: z.ZodType<
  ListCardsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.array(components.Card$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListCardsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Card$Outbound>;
};

/** @internal */
export const ListCardsResponse$outboundSchema: z.ZodType<
  ListCardsResponse$Outbound,
  z.ZodTypeDef,
  ListCardsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Card$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCardsResponse$ {
  /** @deprecated use `ListCardsResponse$inboundSchema` instead. */
  export const inboundSchema = ListCardsResponse$inboundSchema;
  /** @deprecated use `ListCardsResponse$outboundSchema` instead. */
  export const outboundSchema = ListCardsResponse$outboundSchema;
  /** @deprecated use `ListCardsResponse$Outbound` instead. */
  export type Outbound = ListCardsResponse$Outbound;
}

export function listCardsResponseToJSON(
  listCardsResponse: ListCardsResponse,
): string {
  return JSON.stringify(
    ListCardsResponse$outboundSchema.parse(listCardsResponse),
  );
}

export function listCardsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCardsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCardsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCardsResponse' from JSON`,
  );
}
