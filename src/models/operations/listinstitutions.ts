/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListInstitutionsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListInstitutionsRequest = {
  /**
   * Name of the financial institution. Either `name` or `routingNumber` is required.
   */
  name?: string | undefined;
  /**
   * Routing number for a financial institution. Either `routingNumber` or `name` is required.
   */
  routingNumber?: string | undefined;
  /**
   * The state where a financial institution is based.
   */
  state?: string | undefined;
  /**
   * Maximum results returned by a search.
   */
  limit?: number | undefined;
};

export type ListInstitutionsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.FinancialInstitutions;
};

/** @internal */
export const ListInstitutionsGlobals$inboundSchema: z.ZodType<
  ListInstitutionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListInstitutionsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListInstitutionsGlobals$outboundSchema: z.ZodType<
  ListInstitutionsGlobals$Outbound,
  z.ZodTypeDef,
  ListInstitutionsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstitutionsGlobals$ {
  /** @deprecated use `ListInstitutionsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListInstitutionsGlobals$inboundSchema;
  /** @deprecated use `ListInstitutionsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListInstitutionsGlobals$outboundSchema;
  /** @deprecated use `ListInstitutionsGlobals$Outbound` instead. */
  export type Outbound = ListInstitutionsGlobals$Outbound;
}

export function listInstitutionsGlobalsToJSON(
  listInstitutionsGlobals: ListInstitutionsGlobals,
): string {
  return JSON.stringify(
    ListInstitutionsGlobals$outboundSchema.parse(listInstitutionsGlobals),
  );
}

export function listInstitutionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListInstitutionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstitutionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstitutionsGlobals' from JSON`,
  );
}

/** @internal */
export const ListInstitutionsRequest$inboundSchema: z.ZodType<
  ListInstitutionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  routingNumber: z.string().optional(),
  state: z.string().optional(),
  limit: z.number().int().optional(),
});

/** @internal */
export type ListInstitutionsRequest$Outbound = {
  name?: string | undefined;
  routingNumber?: string | undefined;
  state?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const ListInstitutionsRequest$outboundSchema: z.ZodType<
  ListInstitutionsRequest$Outbound,
  z.ZodTypeDef,
  ListInstitutionsRequest
> = z.object({
  name: z.string().optional(),
  routingNumber: z.string().optional(),
  state: z.string().optional(),
  limit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstitutionsRequest$ {
  /** @deprecated use `ListInstitutionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInstitutionsRequest$inboundSchema;
  /** @deprecated use `ListInstitutionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInstitutionsRequest$outboundSchema;
  /** @deprecated use `ListInstitutionsRequest$Outbound` instead. */
  export type Outbound = ListInstitutionsRequest$Outbound;
}

export function listInstitutionsRequestToJSON(
  listInstitutionsRequest: ListInstitutionsRequest,
): string {
  return JSON.stringify(
    ListInstitutionsRequest$outboundSchema.parse(listInstitutionsRequest),
  );
}

export function listInstitutionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInstitutionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstitutionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstitutionsRequest' from JSON`,
  );
}

/** @internal */
export const ListInstitutionsResponse$inboundSchema: z.ZodType<
  ListInstitutionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.FinancialInstitutions$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListInstitutionsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.FinancialInstitutions$Outbound;
};

/** @internal */
export const ListInstitutionsResponse$outboundSchema: z.ZodType<
  ListInstitutionsResponse$Outbound,
  z.ZodTypeDef,
  ListInstitutionsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.FinancialInstitutions$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstitutionsResponse$ {
  /** @deprecated use `ListInstitutionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListInstitutionsResponse$inboundSchema;
  /** @deprecated use `ListInstitutionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListInstitutionsResponse$outboundSchema;
  /** @deprecated use `ListInstitutionsResponse$Outbound` instead. */
  export type Outbound = ListInstitutionsResponse$Outbound;
}

export function listInstitutionsResponseToJSON(
  listInstitutionsResponse: ListInstitutionsResponse,
): string {
  return JSON.stringify(
    ListInstitutionsResponse$outboundSchema.parse(listInstitutionsResponse),
  );
}

export function listInstitutionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInstitutionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstitutionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstitutionsResponse' from JSON`,
  );
}
