/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListInstitutionsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListInstitutionsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Name of the financial institution. Either `name` or `routingNumber` is required.
   */
  name?: string | undefined;
  /**
   * Routing number for a financial institution. Either `routingNumber` or `name` is required.
   */
  routingNumber?: string | undefined;
  /**
   * The state where a financial institution is based.
   */
  state?: string | undefined;
  /**
   * Maximum results returned by a search.
   */
  limit?: number | undefined;
};

/** @internal */
export const ListInstitutionsSecurity$inboundSchema: z.ZodType<
  ListInstitutionsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListInstitutionsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListInstitutionsSecurity$outboundSchema: z.ZodType<
  ListInstitutionsSecurity$Outbound,
  z.ZodTypeDef,
  ListInstitutionsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstitutionsSecurity$ {
  /** @deprecated use `ListInstitutionsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListInstitutionsSecurity$inboundSchema;
  /** @deprecated use `ListInstitutionsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListInstitutionsSecurity$outboundSchema;
  /** @deprecated use `ListInstitutionsSecurity$Outbound` instead. */
  export type Outbound = ListInstitutionsSecurity$Outbound;
}

export function listInstitutionsSecurityToJSON(
  listInstitutionsSecurity: ListInstitutionsSecurity,
): string {
  return JSON.stringify(
    ListInstitutionsSecurity$outboundSchema.parse(listInstitutionsSecurity),
  );
}

export function listInstitutionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListInstitutionsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstitutionsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstitutionsSecurity' from JSON`,
  );
}

/** @internal */
export const ListInstitutionsRequest$inboundSchema: z.ZodType<
  ListInstitutionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  name: z.string().optional(),
  routingNumber: z.string().optional(),
  state: z.string().optional(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListInstitutionsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  name?: string | undefined;
  routingNumber?: string | undefined;
  state?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const ListInstitutionsRequest$outboundSchema: z.ZodType<
  ListInstitutionsRequest$Outbound,
  z.ZodTypeDef,
  ListInstitutionsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  name: z.string().optional(),
  routingNumber: z.string().optional(),
  state: z.string().optional(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstitutionsRequest$ {
  /** @deprecated use `ListInstitutionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInstitutionsRequest$inboundSchema;
  /** @deprecated use `ListInstitutionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInstitutionsRequest$outboundSchema;
  /** @deprecated use `ListInstitutionsRequest$Outbound` instead. */
  export type Outbound = ListInstitutionsRequest$Outbound;
}

export function listInstitutionsRequestToJSON(
  listInstitutionsRequest: ListInstitutionsRequest,
): string {
  return JSON.stringify(
    ListInstitutionsRequest$outboundSchema.parse(listInstitutionsRequest),
  );
}

export function listInstitutionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInstitutionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstitutionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstitutionsRequest' from JSON`,
  );
}
