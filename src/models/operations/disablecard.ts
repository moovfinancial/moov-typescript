/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DisableCardGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type DisableCardRequest = {
  accountID: string;
  cardID: string;
};

export type DisableCardResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableCardGlobals$inboundSchema: z.ZodType<
  DisableCardGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type DisableCardGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const DisableCardGlobals$outboundSchema: z.ZodType<
  DisableCardGlobals$Outbound,
  z.ZodTypeDef,
  DisableCardGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableCardGlobals$ {
  /** @deprecated use `DisableCardGlobals$inboundSchema` instead. */
  export const inboundSchema = DisableCardGlobals$inboundSchema;
  /** @deprecated use `DisableCardGlobals$outboundSchema` instead. */
  export const outboundSchema = DisableCardGlobals$outboundSchema;
  /** @deprecated use `DisableCardGlobals$Outbound` instead. */
  export type Outbound = DisableCardGlobals$Outbound;
}

export function disableCardGlobalsToJSON(
  disableCardGlobals: DisableCardGlobals,
): string {
  return JSON.stringify(
    DisableCardGlobals$outboundSchema.parse(disableCardGlobals),
  );
}

export function disableCardGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DisableCardGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableCardGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableCardGlobals' from JSON`,
  );
}

/** @internal */
export const DisableCardRequest$inboundSchema: z.ZodType<
  DisableCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  cardID: z.string(),
});

/** @internal */
export type DisableCardRequest$Outbound = {
  accountID: string;
  cardID: string;
};

/** @internal */
export const DisableCardRequest$outboundSchema: z.ZodType<
  DisableCardRequest$Outbound,
  z.ZodTypeDef,
  DisableCardRequest
> = z.object({
  accountID: z.string(),
  cardID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableCardRequest$ {
  /** @deprecated use `DisableCardRequest$inboundSchema` instead. */
  export const inboundSchema = DisableCardRequest$inboundSchema;
  /** @deprecated use `DisableCardRequest$outboundSchema` instead. */
  export const outboundSchema = DisableCardRequest$outboundSchema;
  /** @deprecated use `DisableCardRequest$Outbound` instead. */
  export type Outbound = DisableCardRequest$Outbound;
}

export function disableCardRequestToJSON(
  disableCardRequest: DisableCardRequest,
): string {
  return JSON.stringify(
    DisableCardRequest$outboundSchema.parse(disableCardRequest),
  );
}

export function disableCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<DisableCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableCardRequest' from JSON`,
  );
}

/** @internal */
export const DisableCardResponse$inboundSchema: z.ZodType<
  DisableCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type DisableCardResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableCardResponse$outboundSchema: z.ZodType<
  DisableCardResponse$Outbound,
  z.ZodTypeDef,
  DisableCardResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableCardResponse$ {
  /** @deprecated use `DisableCardResponse$inboundSchema` instead. */
  export const inboundSchema = DisableCardResponse$inboundSchema;
  /** @deprecated use `DisableCardResponse$outboundSchema` instead. */
  export const outboundSchema = DisableCardResponse$outboundSchema;
  /** @deprecated use `DisableCardResponse$Outbound` instead. */
  export type Outbound = DisableCardResponse$Outbound;
}

export function disableCardResponseToJSON(
  disableCardResponse: DisableCardResponse,
): string {
  return JSON.stringify(
    DisableCardResponse$outboundSchema.parse(disableCardResponse),
  );
}

export function disableCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<DisableCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableCardResponse' from JSON`,
  );
}
