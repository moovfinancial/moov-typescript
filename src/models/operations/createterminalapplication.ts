/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTerminalApplicationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateTerminalApplicationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TerminalApplication;
};

/** @internal */
export const CreateTerminalApplicationGlobals$inboundSchema: z.ZodType<
  CreateTerminalApplicationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateTerminalApplicationGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateTerminalApplicationGlobals$outboundSchema: z.ZodType<
  CreateTerminalApplicationGlobals$Outbound,
  z.ZodTypeDef,
  CreateTerminalApplicationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTerminalApplicationGlobals$ {
  /** @deprecated use `CreateTerminalApplicationGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTerminalApplicationGlobals$inboundSchema;
  /** @deprecated use `CreateTerminalApplicationGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTerminalApplicationGlobals$outboundSchema;
  /** @deprecated use `CreateTerminalApplicationGlobals$Outbound` instead. */
  export type Outbound = CreateTerminalApplicationGlobals$Outbound;
}

export function createTerminalApplicationGlobalsToJSON(
  createTerminalApplicationGlobals: CreateTerminalApplicationGlobals,
): string {
  return JSON.stringify(
    CreateTerminalApplicationGlobals$outboundSchema.parse(
      createTerminalApplicationGlobals,
    ),
  );
}

export function createTerminalApplicationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTerminalApplicationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTerminalApplicationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTerminalApplicationGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTerminalApplicationResponse$inboundSchema: z.ZodType<
  CreateTerminalApplicationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.TerminalApplication$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateTerminalApplicationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TerminalApplication$Outbound;
};

/** @internal */
export const CreateTerminalApplicationResponse$outboundSchema: z.ZodType<
  CreateTerminalApplicationResponse$Outbound,
  z.ZodTypeDef,
  CreateTerminalApplicationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TerminalApplication$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTerminalApplicationResponse$ {
  /** @deprecated use `CreateTerminalApplicationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTerminalApplicationResponse$inboundSchema;
  /** @deprecated use `CreateTerminalApplicationResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateTerminalApplicationResponse$outboundSchema;
  /** @deprecated use `CreateTerminalApplicationResponse$Outbound` instead. */
  export type Outbound = CreateTerminalApplicationResponse$Outbound;
}

export function createTerminalApplicationResponseToJSON(
  createTerminalApplicationResponse: CreateTerminalApplicationResponse,
): string {
  return JSON.stringify(
    CreateTerminalApplicationResponse$outboundSchema.parse(
      createTerminalApplicationResponse,
    ),
  );
}

export function createTerminalApplicationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTerminalApplicationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTerminalApplicationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTerminalApplicationResponse' from JSON`,
  );
}
