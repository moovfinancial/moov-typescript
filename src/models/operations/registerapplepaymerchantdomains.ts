/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegisterApplePayMerchantDomainsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type RegisterApplePayMerchantDomainsRequest = {
  /**
   * ID of the Moov account representing the merchant.
   */
  accountID: string;
  registerApplePayMerchantDomains: components.RegisterApplePayMerchantDomains;
};

export type RegisterApplePayMerchantDomainsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ApplePayMerchantDomains;
};

/** @internal */
export const RegisterApplePayMerchantDomainsGlobals$inboundSchema: z.ZodType<
  RegisterApplePayMerchantDomainsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type RegisterApplePayMerchantDomainsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const RegisterApplePayMerchantDomainsGlobals$outboundSchema: z.ZodType<
  RegisterApplePayMerchantDomainsGlobals$Outbound,
  z.ZodTypeDef,
  RegisterApplePayMerchantDomainsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterApplePayMerchantDomainsGlobals$ {
  /** @deprecated use `RegisterApplePayMerchantDomainsGlobals$inboundSchema` instead. */
  export const inboundSchema =
    RegisterApplePayMerchantDomainsGlobals$inboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomainsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    RegisterApplePayMerchantDomainsGlobals$outboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomainsGlobals$Outbound` instead. */
  export type Outbound = RegisterApplePayMerchantDomainsGlobals$Outbound;
}

export function registerApplePayMerchantDomainsGlobalsToJSON(
  registerApplePayMerchantDomainsGlobals:
    RegisterApplePayMerchantDomainsGlobals,
): string {
  return JSON.stringify(
    RegisterApplePayMerchantDomainsGlobals$outboundSchema.parse(
      registerApplePayMerchantDomainsGlobals,
    ),
  );
}

export function registerApplePayMerchantDomainsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RegisterApplePayMerchantDomainsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RegisterApplePayMerchantDomainsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterApplePayMerchantDomainsGlobals' from JSON`,
  );
}

/** @internal */
export const RegisterApplePayMerchantDomainsRequest$inboundSchema: z.ZodType<
  RegisterApplePayMerchantDomainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  RegisterApplePayMerchantDomains:
    components.RegisterApplePayMerchantDomains$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "RegisterApplePayMerchantDomains": "registerApplePayMerchantDomains",
  });
});

/** @internal */
export type RegisterApplePayMerchantDomainsRequest$Outbound = {
  accountID: string;
  RegisterApplePayMerchantDomains:
    components.RegisterApplePayMerchantDomains$Outbound;
};

/** @internal */
export const RegisterApplePayMerchantDomainsRequest$outboundSchema: z.ZodType<
  RegisterApplePayMerchantDomainsRequest$Outbound,
  z.ZodTypeDef,
  RegisterApplePayMerchantDomainsRequest
> = z.object({
  accountID: z.string(),
  registerApplePayMerchantDomains:
    components.RegisterApplePayMerchantDomains$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    registerApplePayMerchantDomains: "RegisterApplePayMerchantDomains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterApplePayMerchantDomainsRequest$ {
  /** @deprecated use `RegisterApplePayMerchantDomainsRequest$inboundSchema` instead. */
  export const inboundSchema =
    RegisterApplePayMerchantDomainsRequest$inboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomainsRequest$outboundSchema` instead. */
  export const outboundSchema =
    RegisterApplePayMerchantDomainsRequest$outboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomainsRequest$Outbound` instead. */
  export type Outbound = RegisterApplePayMerchantDomainsRequest$Outbound;
}

export function registerApplePayMerchantDomainsRequestToJSON(
  registerApplePayMerchantDomainsRequest:
    RegisterApplePayMerchantDomainsRequest,
): string {
  return JSON.stringify(
    RegisterApplePayMerchantDomainsRequest$outboundSchema.parse(
      registerApplePayMerchantDomainsRequest,
    ),
  );
}

export function registerApplePayMerchantDomainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegisterApplePayMerchantDomainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RegisterApplePayMerchantDomainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterApplePayMerchantDomainsRequest' from JSON`,
  );
}

/** @internal */
export const RegisterApplePayMerchantDomainsResponse$inboundSchema: z.ZodType<
  RegisterApplePayMerchantDomainsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.ApplePayMerchantDomains$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type RegisterApplePayMerchantDomainsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ApplePayMerchantDomains$Outbound;
};

/** @internal */
export const RegisterApplePayMerchantDomainsResponse$outboundSchema: z.ZodType<
  RegisterApplePayMerchantDomainsResponse$Outbound,
  z.ZodTypeDef,
  RegisterApplePayMerchantDomainsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ApplePayMerchantDomains$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterApplePayMerchantDomainsResponse$ {
  /** @deprecated use `RegisterApplePayMerchantDomainsResponse$inboundSchema` instead. */
  export const inboundSchema =
    RegisterApplePayMerchantDomainsResponse$inboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomainsResponse$outboundSchema` instead. */
  export const outboundSchema =
    RegisterApplePayMerchantDomainsResponse$outboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomainsResponse$Outbound` instead. */
  export type Outbound = RegisterApplePayMerchantDomainsResponse$Outbound;
}

export function registerApplePayMerchantDomainsResponseToJSON(
  registerApplePayMerchantDomainsResponse:
    RegisterApplePayMerchantDomainsResponse,
): string {
  return JSON.stringify(
    RegisterApplePayMerchantDomainsResponse$outboundSchema.parse(
      registerApplePayMerchantDomainsResponse,
    ),
  );
}

export function registerApplePayMerchantDomainsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  RegisterApplePayMerchantDomainsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RegisterApplePayMerchantDomainsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RegisterApplePayMerchantDomainsResponse' from JSON`,
  );
}
