/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelScheduleGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CancelScheduleRequest = {
  accountID: string;
  scheduleID: string;
};

export type CancelScheduleResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CancelScheduleGlobals$inboundSchema: z.ZodType<
  CancelScheduleGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CancelScheduleGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CancelScheduleGlobals$outboundSchema: z.ZodType<
  CancelScheduleGlobals$Outbound,
  z.ZodTypeDef,
  CancelScheduleGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelScheduleGlobals$ {
  /** @deprecated use `CancelScheduleGlobals$inboundSchema` instead. */
  export const inboundSchema = CancelScheduleGlobals$inboundSchema;
  /** @deprecated use `CancelScheduleGlobals$outboundSchema` instead. */
  export const outboundSchema = CancelScheduleGlobals$outboundSchema;
  /** @deprecated use `CancelScheduleGlobals$Outbound` instead. */
  export type Outbound = CancelScheduleGlobals$Outbound;
}

export function cancelScheduleGlobalsToJSON(
  cancelScheduleGlobals: CancelScheduleGlobals,
): string {
  return JSON.stringify(
    CancelScheduleGlobals$outboundSchema.parse(cancelScheduleGlobals),
  );
}

export function cancelScheduleGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CancelScheduleGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelScheduleGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelScheduleGlobals' from JSON`,
  );
}

/** @internal */
export const CancelScheduleRequest$inboundSchema: z.ZodType<
  CancelScheduleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
});

/** @internal */
export type CancelScheduleRequest$Outbound = {
  accountID: string;
  scheduleID: string;
};

/** @internal */
export const CancelScheduleRequest$outboundSchema: z.ZodType<
  CancelScheduleRequest$Outbound,
  z.ZodTypeDef,
  CancelScheduleRequest
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelScheduleRequest$ {
  /** @deprecated use `CancelScheduleRequest$inboundSchema` instead. */
  export const inboundSchema = CancelScheduleRequest$inboundSchema;
  /** @deprecated use `CancelScheduleRequest$outboundSchema` instead. */
  export const outboundSchema = CancelScheduleRequest$outboundSchema;
  /** @deprecated use `CancelScheduleRequest$Outbound` instead. */
  export type Outbound = CancelScheduleRequest$Outbound;
}

export function cancelScheduleRequestToJSON(
  cancelScheduleRequest: CancelScheduleRequest,
): string {
  return JSON.stringify(
    CancelScheduleRequest$outboundSchema.parse(cancelScheduleRequest),
  );
}

export function cancelScheduleRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelScheduleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelScheduleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelScheduleRequest' from JSON`,
  );
}

/** @internal */
export const CancelScheduleResponse$inboundSchema: z.ZodType<
  CancelScheduleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CancelScheduleResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CancelScheduleResponse$outboundSchema: z.ZodType<
  CancelScheduleResponse$Outbound,
  z.ZodTypeDef,
  CancelScheduleResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelScheduleResponse$ {
  /** @deprecated use `CancelScheduleResponse$inboundSchema` instead. */
  export const inboundSchema = CancelScheduleResponse$inboundSchema;
  /** @deprecated use `CancelScheduleResponse$outboundSchema` instead. */
  export const outboundSchema = CancelScheduleResponse$outboundSchema;
  /** @deprecated use `CancelScheduleResponse$Outbound` instead. */
  export type Outbound = CancelScheduleResponse$Outbound;
}

export function cancelScheduleResponseToJSON(
  cancelScheduleResponse: CancelScheduleResponse,
): string {
  return JSON.stringify(
    CancelScheduleResponse$outboundSchema.parse(cancelScheduleResponse),
  );
}

export function cancelScheduleResponseFromJSON(
  jsonString: string,
): SafeParseResult<CancelScheduleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelScheduleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelScheduleResponse' from JSON`,
  );
}
