/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAdjustmentGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetAdjustmentRequest = {
  accountID: string;
  adjustmentID: string;
};

export type GetAdjustmentResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Adjustment;
};

/** @internal */
export const GetAdjustmentGlobals$inboundSchema: z.ZodType<
  GetAdjustmentGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetAdjustmentGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetAdjustmentGlobals$outboundSchema: z.ZodType<
  GetAdjustmentGlobals$Outbound,
  z.ZodTypeDef,
  GetAdjustmentGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdjustmentGlobals$ {
  /** @deprecated use `GetAdjustmentGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAdjustmentGlobals$inboundSchema;
  /** @deprecated use `GetAdjustmentGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAdjustmentGlobals$outboundSchema;
  /** @deprecated use `GetAdjustmentGlobals$Outbound` instead. */
  export type Outbound = GetAdjustmentGlobals$Outbound;
}

export function getAdjustmentGlobalsToJSON(
  getAdjustmentGlobals: GetAdjustmentGlobals,
): string {
  return JSON.stringify(
    GetAdjustmentGlobals$outboundSchema.parse(getAdjustmentGlobals),
  );
}

export function getAdjustmentGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAdjustmentGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAdjustmentGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAdjustmentGlobals' from JSON`,
  );
}

/** @internal */
export const GetAdjustmentRequest$inboundSchema: z.ZodType<
  GetAdjustmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  adjustmentID: z.string(),
});

/** @internal */
export type GetAdjustmentRequest$Outbound = {
  accountID: string;
  adjustmentID: string;
};

/** @internal */
export const GetAdjustmentRequest$outboundSchema: z.ZodType<
  GetAdjustmentRequest$Outbound,
  z.ZodTypeDef,
  GetAdjustmentRequest
> = z.object({
  accountID: z.string(),
  adjustmentID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdjustmentRequest$ {
  /** @deprecated use `GetAdjustmentRequest$inboundSchema` instead. */
  export const inboundSchema = GetAdjustmentRequest$inboundSchema;
  /** @deprecated use `GetAdjustmentRequest$outboundSchema` instead. */
  export const outboundSchema = GetAdjustmentRequest$outboundSchema;
  /** @deprecated use `GetAdjustmentRequest$Outbound` instead. */
  export type Outbound = GetAdjustmentRequest$Outbound;
}

export function getAdjustmentRequestToJSON(
  getAdjustmentRequest: GetAdjustmentRequest,
): string {
  return JSON.stringify(
    GetAdjustmentRequest$outboundSchema.parse(getAdjustmentRequest),
  );
}

export function getAdjustmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAdjustmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAdjustmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAdjustmentRequest' from JSON`,
  );
}

/** @internal */
export const GetAdjustmentResponse$inboundSchema: z.ZodType<
  GetAdjustmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Adjustment$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetAdjustmentResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Adjustment$Outbound;
};

/** @internal */
export const GetAdjustmentResponse$outboundSchema: z.ZodType<
  GetAdjustmentResponse$Outbound,
  z.ZodTypeDef,
  GetAdjustmentResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Adjustment$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdjustmentResponse$ {
  /** @deprecated use `GetAdjustmentResponse$inboundSchema` instead. */
  export const inboundSchema = GetAdjustmentResponse$inboundSchema;
  /** @deprecated use `GetAdjustmentResponse$outboundSchema` instead. */
  export const outboundSchema = GetAdjustmentResponse$outboundSchema;
  /** @deprecated use `GetAdjustmentResponse$Outbound` instead. */
  export type Outbound = GetAdjustmentResponse$Outbound;
}

export function getAdjustmentResponseToJSON(
  getAdjustmentResponse: GetAdjustmentResponse,
): string {
  return JSON.stringify(
    GetAdjustmentResponse$outboundSchema.parse(getAdjustmentResponse),
  );
}

export function getAdjustmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAdjustmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAdjustmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAdjustmentResponse' from JSON`,
  );
}
