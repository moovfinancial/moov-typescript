/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAdjustmentSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetAdjustmentRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  adjustmentID: string;
};

/** @internal */
export const GetAdjustmentSecurity$inboundSchema: z.ZodType<
  GetAdjustmentSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetAdjustmentSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetAdjustmentSecurity$outboundSchema: z.ZodType<
  GetAdjustmentSecurity$Outbound,
  z.ZodTypeDef,
  GetAdjustmentSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdjustmentSecurity$ {
  /** @deprecated use `GetAdjustmentSecurity$inboundSchema` instead. */
  export const inboundSchema = GetAdjustmentSecurity$inboundSchema;
  /** @deprecated use `GetAdjustmentSecurity$outboundSchema` instead. */
  export const outboundSchema = GetAdjustmentSecurity$outboundSchema;
  /** @deprecated use `GetAdjustmentSecurity$Outbound` instead. */
  export type Outbound = GetAdjustmentSecurity$Outbound;
}

export function getAdjustmentSecurityToJSON(
  getAdjustmentSecurity: GetAdjustmentSecurity,
): string {
  return JSON.stringify(
    GetAdjustmentSecurity$outboundSchema.parse(getAdjustmentSecurity),
  );
}

export function getAdjustmentSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetAdjustmentSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAdjustmentSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAdjustmentSecurity' from JSON`,
  );
}

/** @internal */
export const GetAdjustmentRequest$inboundSchema: z.ZodType<
  GetAdjustmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  adjustmentID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetAdjustmentRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  adjustmentID: string;
};

/** @internal */
export const GetAdjustmentRequest$outboundSchema: z.ZodType<
  GetAdjustmentRequest$Outbound,
  z.ZodTypeDef,
  GetAdjustmentRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  adjustmentID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdjustmentRequest$ {
  /** @deprecated use `GetAdjustmentRequest$inboundSchema` instead. */
  export const inboundSchema = GetAdjustmentRequest$inboundSchema;
  /** @deprecated use `GetAdjustmentRequest$outboundSchema` instead. */
  export const outboundSchema = GetAdjustmentRequest$outboundSchema;
  /** @deprecated use `GetAdjustmentRequest$Outbound` instead. */
  export type Outbound = GetAdjustmentRequest$Outbound;
}

export function getAdjustmentRequestToJSON(
  getAdjustmentRequest: GetAdjustmentRequest,
): string {
  return JSON.stringify(
    GetAdjustmentRequest$outboundSchema.parse(getAdjustmentRequest),
  );
}

export function getAdjustmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAdjustmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAdjustmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAdjustmentRequest' from JSON`,
  );
}
