/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkBankAccountSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type LinkBankAccountRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Optional header to wait for certain events, such as the creation of a payment method, to occur before returning a response.
   *
   * @remarks
   *
   * When this header is set to `payment-method`, the response will include any payment methods that were created for the newly
   * linked card in the `paymentMethods` field. Otherwise, the `paymentMethods` field will be omitted from the response.
   */
  xWaitFor?: components.BankAccountWaitFor | undefined;
  accountID: string;
  linkBankAccount: components.LinkBankAccount;
};

/** @internal */
export const LinkBankAccountSecurity$inboundSchema: z.ZodType<
  LinkBankAccountSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type LinkBankAccountSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const LinkBankAccountSecurity$outboundSchema: z.ZodType<
  LinkBankAccountSecurity$Outbound,
  z.ZodTypeDef,
  LinkBankAccountSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkBankAccountSecurity$ {
  /** @deprecated use `LinkBankAccountSecurity$inboundSchema` instead. */
  export const inboundSchema = LinkBankAccountSecurity$inboundSchema;
  /** @deprecated use `LinkBankAccountSecurity$outboundSchema` instead. */
  export const outboundSchema = LinkBankAccountSecurity$outboundSchema;
  /** @deprecated use `LinkBankAccountSecurity$Outbound` instead. */
  export type Outbound = LinkBankAccountSecurity$Outbound;
}

export function linkBankAccountSecurityToJSON(
  linkBankAccountSecurity: LinkBankAccountSecurity,
): string {
  return JSON.stringify(
    LinkBankAccountSecurity$outboundSchema.parse(linkBankAccountSecurity),
  );
}

export function linkBankAccountSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LinkBankAccountSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkBankAccountSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkBankAccountSecurity' from JSON`,
  );
}

/** @internal */
export const LinkBankAccountRequest$inboundSchema: z.ZodType<
  LinkBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  "x-wait-for": components.BankAccountWaitFor$inboundSchema.optional(),
  accountID: z.string(),
  LinkBankAccount: components.LinkBankAccount$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "x-wait-for": "xWaitFor",
    "LinkBankAccount": "linkBankAccount",
  });
});

/** @internal */
export type LinkBankAccountRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  "x-wait-for"?: string | undefined;
  accountID: string;
  LinkBankAccount: components.LinkBankAccount$Outbound;
};

/** @internal */
export const LinkBankAccountRequest$outboundSchema: z.ZodType<
  LinkBankAccountRequest$Outbound,
  z.ZodTypeDef,
  LinkBankAccountRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  xWaitFor: components.BankAccountWaitFor$outboundSchema.optional(),
  accountID: z.string(),
  linkBankAccount: components.LinkBankAccount$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    xWaitFor: "x-wait-for",
    linkBankAccount: "LinkBankAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkBankAccountRequest$ {
  /** @deprecated use `LinkBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = LinkBankAccountRequest$inboundSchema;
  /** @deprecated use `LinkBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = LinkBankAccountRequest$outboundSchema;
  /** @deprecated use `LinkBankAccountRequest$Outbound` instead. */
  export type Outbound = LinkBankAccountRequest$Outbound;
}

export function linkBankAccountRequestToJSON(
  linkBankAccountRequest: LinkBankAccountRequest,
): string {
  return JSON.stringify(
    LinkBankAccountRequest$outboundSchema.parse(linkBankAccountRequest),
  );
}

export function linkBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<LinkBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkBankAccountRequest' from JSON`,
  );
}
