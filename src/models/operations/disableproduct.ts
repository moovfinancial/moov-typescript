/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DisableProductGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type DisableProductRequest = {
  accountID: string;
  productID: string;
};

export type DisableProductResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableProductGlobals$inboundSchema: z.ZodType<
  DisableProductGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type DisableProductGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const DisableProductGlobals$outboundSchema: z.ZodType<
  DisableProductGlobals$Outbound,
  z.ZodTypeDef,
  DisableProductGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableProductGlobals$ {
  /** @deprecated use `DisableProductGlobals$inboundSchema` instead. */
  export const inboundSchema = DisableProductGlobals$inboundSchema;
  /** @deprecated use `DisableProductGlobals$outboundSchema` instead. */
  export const outboundSchema = DisableProductGlobals$outboundSchema;
  /** @deprecated use `DisableProductGlobals$Outbound` instead. */
  export type Outbound = DisableProductGlobals$Outbound;
}

export function disableProductGlobalsToJSON(
  disableProductGlobals: DisableProductGlobals,
): string {
  return JSON.stringify(
    DisableProductGlobals$outboundSchema.parse(disableProductGlobals),
  );
}

export function disableProductGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DisableProductGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableProductGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableProductGlobals' from JSON`,
  );
}

/** @internal */
export const DisableProductRequest$inboundSchema: z.ZodType<
  DisableProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  productID: z.string(),
});

/** @internal */
export type DisableProductRequest$Outbound = {
  accountID: string;
  productID: string;
};

/** @internal */
export const DisableProductRequest$outboundSchema: z.ZodType<
  DisableProductRequest$Outbound,
  z.ZodTypeDef,
  DisableProductRequest
> = z.object({
  accountID: z.string(),
  productID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableProductRequest$ {
  /** @deprecated use `DisableProductRequest$inboundSchema` instead. */
  export const inboundSchema = DisableProductRequest$inboundSchema;
  /** @deprecated use `DisableProductRequest$outboundSchema` instead. */
  export const outboundSchema = DisableProductRequest$outboundSchema;
  /** @deprecated use `DisableProductRequest$Outbound` instead. */
  export type Outbound = DisableProductRequest$Outbound;
}

export function disableProductRequestToJSON(
  disableProductRequest: DisableProductRequest,
): string {
  return JSON.stringify(
    DisableProductRequest$outboundSchema.parse(disableProductRequest),
  );
}

export function disableProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<DisableProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableProductRequest' from JSON`,
  );
}

/** @internal */
export const DisableProductResponse$inboundSchema: z.ZodType<
  DisableProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type DisableProductResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableProductResponse$outboundSchema: z.ZodType<
  DisableProductResponse$Outbound,
  z.ZodTypeDef,
  DisableProductResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableProductResponse$ {
  /** @deprecated use `DisableProductResponse$inboundSchema` instead. */
  export const inboundSchema = DisableProductResponse$inboundSchema;
  /** @deprecated use `DisableProductResponse$outboundSchema` instead. */
  export const outboundSchema = DisableProductResponse$outboundSchema;
  /** @deprecated use `DisableProductResponse$Outbound` instead. */
  export type Outbound = DisableProductResponse$Outbound;
}

export function disableProductResponseToJSON(
  disableProductResponse: DisableProductResponse,
): string {
  return JSON.stringify(
    DisableProductResponse$outboundSchema.parse(disableProductResponse),
  );
}

export function disableProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<DisableProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableProductResponse' from JSON`,
  );
}
