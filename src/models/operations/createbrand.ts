/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBrandGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateBrandRequest = {
  accountID: string;
  brand: components.Brand;
};

export type CreateBrandResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Brand;
};

/** @internal */
export const CreateBrandGlobals$inboundSchema: z.ZodType<
  CreateBrandGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateBrandGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateBrandGlobals$outboundSchema: z.ZodType<
  CreateBrandGlobals$Outbound,
  z.ZodTypeDef,
  CreateBrandGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBrandGlobals$ {
  /** @deprecated use `CreateBrandGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateBrandGlobals$inboundSchema;
  /** @deprecated use `CreateBrandGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateBrandGlobals$outboundSchema;
  /** @deprecated use `CreateBrandGlobals$Outbound` instead. */
  export type Outbound = CreateBrandGlobals$Outbound;
}

export function createBrandGlobalsToJSON(
  createBrandGlobals: CreateBrandGlobals,
): string {
  return JSON.stringify(
    CreateBrandGlobals$outboundSchema.parse(createBrandGlobals),
  );
}

export function createBrandGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateBrandGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBrandGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBrandGlobals' from JSON`,
  );
}

/** @internal */
export const CreateBrandRequest$inboundSchema: z.ZodType<
  CreateBrandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  Brand: components.Brand$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Brand": "brand",
  });
});

/** @internal */
export type CreateBrandRequest$Outbound = {
  accountID: string;
  Brand: components.Brand$Outbound;
};

/** @internal */
export const CreateBrandRequest$outboundSchema: z.ZodType<
  CreateBrandRequest$Outbound,
  z.ZodTypeDef,
  CreateBrandRequest
> = z.object({
  accountID: z.string(),
  brand: components.Brand$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    brand: "Brand",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBrandRequest$ {
  /** @deprecated use `CreateBrandRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBrandRequest$inboundSchema;
  /** @deprecated use `CreateBrandRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBrandRequest$outboundSchema;
  /** @deprecated use `CreateBrandRequest$Outbound` instead. */
  export type Outbound = CreateBrandRequest$Outbound;
}

export function createBrandRequestToJSON(
  createBrandRequest: CreateBrandRequest,
): string {
  return JSON.stringify(
    CreateBrandRequest$outboundSchema.parse(createBrandRequest),
  );
}

export function createBrandRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBrandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBrandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBrandRequest' from JSON`,
  );
}

/** @internal */
export const CreateBrandResponse$inboundSchema: z.ZodType<
  CreateBrandResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Brand$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateBrandResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Brand$Outbound;
};

/** @internal */
export const CreateBrandResponse$outboundSchema: z.ZodType<
  CreateBrandResponse$Outbound,
  z.ZodTypeDef,
  CreateBrandResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Brand$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBrandResponse$ {
  /** @deprecated use `CreateBrandResponse$inboundSchema` instead. */
  export const inboundSchema = CreateBrandResponse$inboundSchema;
  /** @deprecated use `CreateBrandResponse$outboundSchema` instead. */
  export const outboundSchema = CreateBrandResponse$outboundSchema;
  /** @deprecated use `CreateBrandResponse$Outbound` instead. */
  export type Outbound = CreateBrandResponse$Outbound;
}

export function createBrandResponseToJSON(
  createBrandResponse: CreateBrandResponse,
): string {
  return JSON.stringify(
    CreateBrandResponse$outboundSchema.parse(createBrandResponse),
  );
}

export function createBrandResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateBrandResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBrandResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBrandResponse' from JSON`,
  );
}
