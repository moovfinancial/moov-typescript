/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListImageMetadataGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListImageMetadataRequest = {
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
};

export type ListImageMetadataResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.ImageMetadata>;
};

/** @internal */
export const ListImageMetadataGlobals$inboundSchema: z.ZodType<
  ListImageMetadataGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListImageMetadataGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListImageMetadataGlobals$outboundSchema: z.ZodType<
  ListImageMetadataGlobals$Outbound,
  z.ZodTypeDef,
  ListImageMetadataGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListImageMetadataGlobals$ {
  /** @deprecated use `ListImageMetadataGlobals$inboundSchema` instead. */
  export const inboundSchema = ListImageMetadataGlobals$inboundSchema;
  /** @deprecated use `ListImageMetadataGlobals$outboundSchema` instead. */
  export const outboundSchema = ListImageMetadataGlobals$outboundSchema;
  /** @deprecated use `ListImageMetadataGlobals$Outbound` instead. */
  export type Outbound = ListImageMetadataGlobals$Outbound;
}

export function listImageMetadataGlobalsToJSON(
  listImageMetadataGlobals: ListImageMetadataGlobals,
): string {
  return JSON.stringify(
    ListImageMetadataGlobals$outboundSchema.parse(listImageMetadataGlobals),
  );
}

export function listImageMetadataGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListImageMetadataGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListImageMetadataGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListImageMetadataGlobals' from JSON`,
  );
}

/** @internal */
export const ListImageMetadataRequest$inboundSchema: z.ZodType<
  ListImageMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type ListImageMetadataRequest$Outbound = {
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
};

/** @internal */
export const ListImageMetadataRequest$outboundSchema: z.ZodType<
  ListImageMetadataRequest$Outbound,
  z.ZodTypeDef,
  ListImageMetadataRequest
> = z.object({
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListImageMetadataRequest$ {
  /** @deprecated use `ListImageMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = ListImageMetadataRequest$inboundSchema;
  /** @deprecated use `ListImageMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = ListImageMetadataRequest$outboundSchema;
  /** @deprecated use `ListImageMetadataRequest$Outbound` instead. */
  export type Outbound = ListImageMetadataRequest$Outbound;
}

export function listImageMetadataRequestToJSON(
  listImageMetadataRequest: ListImageMetadataRequest,
): string {
  return JSON.stringify(
    ListImageMetadataRequest$outboundSchema.parse(listImageMetadataRequest),
  );
}

export function listImageMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListImageMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListImageMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListImageMetadataRequest' from JSON`,
  );
}

/** @internal */
export const ListImageMetadataResponse$inboundSchema: z.ZodType<
  ListImageMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.ImageMetadata$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListImageMetadataResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.ImageMetadata$Outbound>;
};

/** @internal */
export const ListImageMetadataResponse$outboundSchema: z.ZodType<
  ListImageMetadataResponse$Outbound,
  z.ZodTypeDef,
  ListImageMetadataResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.ImageMetadata$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListImageMetadataResponse$ {
  /** @deprecated use `ListImageMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = ListImageMetadataResponse$inboundSchema;
  /** @deprecated use `ListImageMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = ListImageMetadataResponse$outboundSchema;
  /** @deprecated use `ListImageMetadataResponse$Outbound` instead. */
  export type Outbound = ListImageMetadataResponse$Outbound;
}

export function listImageMetadataResponseToJSON(
  listImageMetadataResponse: ListImageMetadataResponse,
): string {
  return JSON.stringify(
    ListImageMetadataResponse$outboundSchema.parse(listImageMetadataResponse),
  );
}

export function listImageMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListImageMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListImageMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListImageMetadataResponse' from JSON`,
  );
}
