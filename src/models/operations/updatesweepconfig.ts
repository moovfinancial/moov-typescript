/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSweepConfigGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateSweepConfigRequest = {
  accountID: string;
  sweepConfigID: string;
  patchSweepConfig: components.PatchSweepConfig;
};

export type UpdateSweepConfigResponse = {
  headers: { [k: string]: Array<string> };
  result: components.SweepConfig;
};

/** @internal */
export const UpdateSweepConfigGlobals$inboundSchema: z.ZodType<
  UpdateSweepConfigGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateSweepConfigGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UpdateSweepConfigGlobals$outboundSchema: z.ZodType<
  UpdateSweepConfigGlobals$Outbound,
  z.ZodTypeDef,
  UpdateSweepConfigGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSweepConfigGlobals$ {
  /** @deprecated use `UpdateSweepConfigGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateSweepConfigGlobals$inboundSchema;
  /** @deprecated use `UpdateSweepConfigGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateSweepConfigGlobals$outboundSchema;
  /** @deprecated use `UpdateSweepConfigGlobals$Outbound` instead. */
  export type Outbound = UpdateSweepConfigGlobals$Outbound;
}

export function updateSweepConfigGlobalsToJSON(
  updateSweepConfigGlobals: UpdateSweepConfigGlobals,
): string {
  return JSON.stringify(
    UpdateSweepConfigGlobals$outboundSchema.parse(updateSweepConfigGlobals),
  );
}

export function updateSweepConfigGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSweepConfigGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSweepConfigGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSweepConfigGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateSweepConfigRequest$inboundSchema: z.ZodType<
  UpdateSweepConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  sweepConfigID: z.string(),
  PatchSweepConfig: components.PatchSweepConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PatchSweepConfig": "patchSweepConfig",
  });
});

/** @internal */
export type UpdateSweepConfigRequest$Outbound = {
  accountID: string;
  sweepConfigID: string;
  PatchSweepConfig: components.PatchSweepConfig$Outbound;
};

/** @internal */
export const UpdateSweepConfigRequest$outboundSchema: z.ZodType<
  UpdateSweepConfigRequest$Outbound,
  z.ZodTypeDef,
  UpdateSweepConfigRequest
> = z.object({
  accountID: z.string(),
  sweepConfigID: z.string(),
  patchSweepConfig: components.PatchSweepConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    patchSweepConfig: "PatchSweepConfig",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSweepConfigRequest$ {
  /** @deprecated use `UpdateSweepConfigRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSweepConfigRequest$inboundSchema;
  /** @deprecated use `UpdateSweepConfigRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSweepConfigRequest$outboundSchema;
  /** @deprecated use `UpdateSweepConfigRequest$Outbound` instead. */
  export type Outbound = UpdateSweepConfigRequest$Outbound;
}

export function updateSweepConfigRequestToJSON(
  updateSweepConfigRequest: UpdateSweepConfigRequest,
): string {
  return JSON.stringify(
    UpdateSweepConfigRequest$outboundSchema.parse(updateSweepConfigRequest),
  );
}

export function updateSweepConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSweepConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSweepConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSweepConfigRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSweepConfigResponse$inboundSchema: z.ZodType<
  UpdateSweepConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.SweepConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateSweepConfigResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.SweepConfig$Outbound;
};

/** @internal */
export const UpdateSweepConfigResponse$outboundSchema: z.ZodType<
  UpdateSweepConfigResponse$Outbound,
  z.ZodTypeDef,
  UpdateSweepConfigResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.SweepConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSweepConfigResponse$ {
  /** @deprecated use `UpdateSweepConfigResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSweepConfigResponse$inboundSchema;
  /** @deprecated use `UpdateSweepConfigResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSweepConfigResponse$outboundSchema;
  /** @deprecated use `UpdateSweepConfigResponse$Outbound` instead. */
  export type Outbound = UpdateSweepConfigResponse$Outbound;
}

export function updateSweepConfigResponseToJSON(
  updateSweepConfigResponse: UpdateSweepConfigResponse,
): string {
  return JSON.stringify(
    UpdateSweepConfigResponse$outboundSchema.parse(updateSweepConfigResponse),
  );
}

export function updateSweepConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSweepConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSweepConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSweepConfigResponse' from JSON`,
  );
}
