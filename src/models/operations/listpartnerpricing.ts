/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPartnerPricingGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListPartnerPricingRequest = {
  accountID: string;
  /**
   * A comma-separated list of plan IDs to filter the results by.
   */
  planIDs?: Array<string> | undefined;
};

export type ListPartnerPricingResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.PartnerPricing>;
};

/** @internal */
export const ListPartnerPricingGlobals$inboundSchema: z.ZodType<
  ListPartnerPricingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListPartnerPricingGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListPartnerPricingGlobals$outboundSchema: z.ZodType<
  ListPartnerPricingGlobals$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingGlobals$ {
  /** @deprecated use `ListPartnerPricingGlobals$inboundSchema` instead. */
  export const inboundSchema = ListPartnerPricingGlobals$inboundSchema;
  /** @deprecated use `ListPartnerPricingGlobals$outboundSchema` instead. */
  export const outboundSchema = ListPartnerPricingGlobals$outboundSchema;
  /** @deprecated use `ListPartnerPricingGlobals$Outbound` instead. */
  export type Outbound = ListPartnerPricingGlobals$Outbound;
}

export function listPartnerPricingGlobalsToJSON(
  listPartnerPricingGlobals: ListPartnerPricingGlobals,
): string {
  return JSON.stringify(
    ListPartnerPricingGlobals$outboundSchema.parse(listPartnerPricingGlobals),
  );
}

export function listPartnerPricingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnerPricingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingGlobals' from JSON`,
  );
}

/** @internal */
export const ListPartnerPricingRequest$inboundSchema: z.ZodType<
  ListPartnerPricingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  planIDs: z.array(z.string()).optional(),
});

/** @internal */
export type ListPartnerPricingRequest$Outbound = {
  accountID: string;
  planIDs?: Array<string> | undefined;
};

/** @internal */
export const ListPartnerPricingRequest$outboundSchema: z.ZodType<
  ListPartnerPricingRequest$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingRequest
> = z.object({
  accountID: z.string(),
  planIDs: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingRequest$ {
  /** @deprecated use `ListPartnerPricingRequest$inboundSchema` instead. */
  export const inboundSchema = ListPartnerPricingRequest$inboundSchema;
  /** @deprecated use `ListPartnerPricingRequest$outboundSchema` instead. */
  export const outboundSchema = ListPartnerPricingRequest$outboundSchema;
  /** @deprecated use `ListPartnerPricingRequest$Outbound` instead. */
  export type Outbound = ListPartnerPricingRequest$Outbound;
}

export function listPartnerPricingRequestToJSON(
  listPartnerPricingRequest: ListPartnerPricingRequest,
): string {
  return JSON.stringify(
    ListPartnerPricingRequest$outboundSchema.parse(listPartnerPricingRequest),
  );
}

export function listPartnerPricingRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnerPricingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingRequest' from JSON`,
  );
}

/** @internal */
export const ListPartnerPricingResponse$inboundSchema: z.ZodType<
  ListPartnerPricingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.PartnerPricing$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListPartnerPricingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.PartnerPricing$Outbound>;
};

/** @internal */
export const ListPartnerPricingResponse$outboundSchema: z.ZodType<
  ListPartnerPricingResponse$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.PartnerPricing$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingResponse$ {
  /** @deprecated use `ListPartnerPricingResponse$inboundSchema` instead. */
  export const inboundSchema = ListPartnerPricingResponse$inboundSchema;
  /** @deprecated use `ListPartnerPricingResponse$outboundSchema` instead. */
  export const outboundSchema = ListPartnerPricingResponse$outboundSchema;
  /** @deprecated use `ListPartnerPricingResponse$Outbound` instead. */
  export type Outbound = ListPartnerPricingResponse$Outbound;
}

export function listPartnerPricingResponseToJSON(
  listPartnerPricingResponse: ListPartnerPricingResponse,
): string {
  return JSON.stringify(
    ListPartnerPricingResponse$outboundSchema.parse(listPartnerPricingResponse),
  );
}

export function listPartnerPricingResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnerPricingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingResponse' from JSON`,
  );
}
