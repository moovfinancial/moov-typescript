/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPartnerPricingSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListPartnerPricingRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  /**
   * A comma-separated list of plan IDs to filter the results by.
   */
  planIDs?: Array<string> | undefined;
};

/** @internal */
export const ListPartnerPricingSecurity$inboundSchema: z.ZodType<
  ListPartnerPricingSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListPartnerPricingSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListPartnerPricingSecurity$outboundSchema: z.ZodType<
  ListPartnerPricingSecurity$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingSecurity$ {
  /** @deprecated use `ListPartnerPricingSecurity$inboundSchema` instead. */
  export const inboundSchema = ListPartnerPricingSecurity$inboundSchema;
  /** @deprecated use `ListPartnerPricingSecurity$outboundSchema` instead. */
  export const outboundSchema = ListPartnerPricingSecurity$outboundSchema;
  /** @deprecated use `ListPartnerPricingSecurity$Outbound` instead. */
  export type Outbound = ListPartnerPricingSecurity$Outbound;
}

export function listPartnerPricingSecurityToJSON(
  listPartnerPricingSecurity: ListPartnerPricingSecurity,
): string {
  return JSON.stringify(
    ListPartnerPricingSecurity$outboundSchema.parse(listPartnerPricingSecurity),
  );
}

export function listPartnerPricingSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnerPricingSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingSecurity' from JSON`,
  );
}

/** @internal */
export const ListPartnerPricingRequest$inboundSchema: z.ZodType<
  ListPartnerPricingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  planIDs: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListPartnerPricingRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  planIDs?: Array<string> | undefined;
};

/** @internal */
export const ListPartnerPricingRequest$outboundSchema: z.ZodType<
  ListPartnerPricingRequest$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  planIDs: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingRequest$ {
  /** @deprecated use `ListPartnerPricingRequest$inboundSchema` instead. */
  export const inboundSchema = ListPartnerPricingRequest$inboundSchema;
  /** @deprecated use `ListPartnerPricingRequest$outboundSchema` instead. */
  export const outboundSchema = ListPartnerPricingRequest$outboundSchema;
  /** @deprecated use `ListPartnerPricingRequest$Outbound` instead. */
  export type Outbound = ListPartnerPricingRequest$Outbound;
}

export function listPartnerPricingRequestToJSON(
  listPartnerPricingRequest: ListPartnerPricingRequest,
): string {
  return JSON.stringify(
    ListPartnerPricingRequest$outboundSchema.parse(listPartnerPricingRequest),
  );
}

export function listPartnerPricingRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnerPricingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingRequest' from JSON`,
  );
}
