/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadFileSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UploadFileRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  fileUploadRequestMultiPart: components.FileUploadRequestMultiPart;
};

/** @internal */
export const UploadFileSecurity$inboundSchema: z.ZodType<
  UploadFileSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UploadFileSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UploadFileSecurity$outboundSchema: z.ZodType<
  UploadFileSecurity$Outbound,
  z.ZodTypeDef,
  UploadFileSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFileSecurity$ {
  /** @deprecated use `UploadFileSecurity$inboundSchema` instead. */
  export const inboundSchema = UploadFileSecurity$inboundSchema;
  /** @deprecated use `UploadFileSecurity$outboundSchema` instead. */
  export const outboundSchema = UploadFileSecurity$outboundSchema;
  /** @deprecated use `UploadFileSecurity$Outbound` instead. */
  export type Outbound = UploadFileSecurity$Outbound;
}

export function uploadFileSecurityToJSON(
  uploadFileSecurity: UploadFileSecurity,
): string {
  return JSON.stringify(
    UploadFileSecurity$outboundSchema.parse(uploadFileSecurity),
  );
}

export function uploadFileSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UploadFileSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFileSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFileSecurity' from JSON`,
  );
}

/** @internal */
export const UploadFileRequest$inboundSchema: z.ZodType<
  UploadFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  FileUploadRequestMultiPart:
    components.FileUploadRequestMultiPart$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "FileUploadRequestMultiPart": "fileUploadRequestMultiPart",
  });
});

/** @internal */
export type UploadFileRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  FileUploadRequestMultiPart: components.FileUploadRequestMultiPart$Outbound;
};

/** @internal */
export const UploadFileRequest$outboundSchema: z.ZodType<
  UploadFileRequest$Outbound,
  z.ZodTypeDef,
  UploadFileRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  fileUploadRequestMultiPart:
    components.FileUploadRequestMultiPart$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    fileUploadRequestMultiPart: "FileUploadRequestMultiPart",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFileRequest$ {
  /** @deprecated use `UploadFileRequest$inboundSchema` instead. */
  export const inboundSchema = UploadFileRequest$inboundSchema;
  /** @deprecated use `UploadFileRequest$outboundSchema` instead. */
  export const outboundSchema = UploadFileRequest$outboundSchema;
  /** @deprecated use `UploadFileRequest$Outbound` instead. */
  export type Outbound = UploadFileRequest$Outbound;
}

export function uploadFileRequestToJSON(
  uploadFileRequest: UploadFileRequest,
): string {
  return JSON.stringify(
    UploadFileRequest$outboundSchema.parse(uploadFileRequest),
  );
}

export function uploadFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFileRequest' from JSON`,
  );
}
