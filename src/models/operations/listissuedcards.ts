/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIssuedCardsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListIssuedCardsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * The Moov business account for which the cards have been issued.
   */
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
  /**
   * Optional, comma-separated states to filter the Moov list issued cards response. For example `active,pending-verification`
   */
  states?: Array<components.IssuedCardState> | undefined;
};

/** @internal */
export const ListIssuedCardsSecurity$inboundSchema: z.ZodType<
  ListIssuedCardsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListIssuedCardsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListIssuedCardsSecurity$outboundSchema: z.ZodType<
  ListIssuedCardsSecurity$Outbound,
  z.ZodTypeDef,
  ListIssuedCardsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardsSecurity$ {
  /** @deprecated use `ListIssuedCardsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListIssuedCardsSecurity$inboundSchema;
  /** @deprecated use `ListIssuedCardsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListIssuedCardsSecurity$outboundSchema;
  /** @deprecated use `ListIssuedCardsSecurity$Outbound` instead. */
  export type Outbound = ListIssuedCardsSecurity$Outbound;
}

export function listIssuedCardsSecurityToJSON(
  listIssuedCardsSecurity: ListIssuedCardsSecurity,
): string {
  return JSON.stringify(
    ListIssuedCardsSecurity$outboundSchema.parse(listIssuedCardsSecurity),
  );
}

export function listIssuedCardsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListIssuedCardsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIssuedCardsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIssuedCardsSecurity' from JSON`,
  );
}

/** @internal */
export const ListIssuedCardsRequest$inboundSchema: z.ZodType<
  ListIssuedCardsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  states: z.array(components.IssuedCardState$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListIssuedCardsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
  states?: Array<string> | undefined;
};

/** @internal */
export const ListIssuedCardsRequest$outboundSchema: z.ZodType<
  ListIssuedCardsRequest$Outbound,
  z.ZodTypeDef,
  ListIssuedCardsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  states: z.array(components.IssuedCardState$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardsRequest$ {
  /** @deprecated use `ListIssuedCardsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIssuedCardsRequest$inboundSchema;
  /** @deprecated use `ListIssuedCardsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIssuedCardsRequest$outboundSchema;
  /** @deprecated use `ListIssuedCardsRequest$Outbound` instead. */
  export type Outbound = ListIssuedCardsRequest$Outbound;
}

export function listIssuedCardsRequestToJSON(
  listIssuedCardsRequest: ListIssuedCardsRequest,
): string {
  return JSON.stringify(
    ListIssuedCardsRequest$outboundSchema.parse(listIssuedCardsRequest),
  );
}

export function listIssuedCardsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIssuedCardsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIssuedCardsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIssuedCardsRequest' from JSON`,
  );
}
