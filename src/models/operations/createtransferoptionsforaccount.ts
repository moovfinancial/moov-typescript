/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransferOptionsForAccountGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateTransferOptionsForAccountRequest = {
  /**
   * The partner's Moov account ID.
   */
  accountID: string;
  createTransferOptions: components.CreateTransferOptions;
};

export type CreateTransferOptionsForAccountResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TransferOptions;
};

/** @internal */
export const CreateTransferOptionsForAccountGlobals$inboundSchema: z.ZodType<
  CreateTransferOptionsForAccountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateTransferOptionsForAccountGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateTransferOptionsForAccountGlobals$outboundSchema: z.ZodType<
  CreateTransferOptionsForAccountGlobals$Outbound,
  z.ZodTypeDef,
  CreateTransferOptionsForAccountGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferOptionsForAccountGlobals$ {
  /** @deprecated use `CreateTransferOptionsForAccountGlobals$inboundSchema` instead. */
  export const inboundSchema =
    CreateTransferOptionsForAccountGlobals$inboundSchema;
  /** @deprecated use `CreateTransferOptionsForAccountGlobals$outboundSchema` instead. */
  export const outboundSchema =
    CreateTransferOptionsForAccountGlobals$outboundSchema;
  /** @deprecated use `CreateTransferOptionsForAccountGlobals$Outbound` instead. */
  export type Outbound = CreateTransferOptionsForAccountGlobals$Outbound;
}

export function createTransferOptionsForAccountGlobalsToJSON(
  createTransferOptionsForAccountGlobals:
    CreateTransferOptionsForAccountGlobals,
): string {
  return JSON.stringify(
    CreateTransferOptionsForAccountGlobals$outboundSchema.parse(
      createTransferOptionsForAccountGlobals,
    ),
  );
}

export function createTransferOptionsForAccountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferOptionsForAccountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTransferOptionsForAccountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferOptionsForAccountGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTransferOptionsForAccountRequest$inboundSchema: z.ZodType<
  CreateTransferOptionsForAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  CreateTransferOptions: components.CreateTransferOptions$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateTransferOptions": "createTransferOptions",
  });
});

/** @internal */
export type CreateTransferOptionsForAccountRequest$Outbound = {
  accountID: string;
  CreateTransferOptions: components.CreateTransferOptions$Outbound;
};

/** @internal */
export const CreateTransferOptionsForAccountRequest$outboundSchema: z.ZodType<
  CreateTransferOptionsForAccountRequest$Outbound,
  z.ZodTypeDef,
  CreateTransferOptionsForAccountRequest
> = z.object({
  accountID: z.string(),
  createTransferOptions: components.CreateTransferOptions$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createTransferOptions: "CreateTransferOptions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferOptionsForAccountRequest$ {
  /** @deprecated use `CreateTransferOptionsForAccountRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateTransferOptionsForAccountRequest$inboundSchema;
  /** @deprecated use `CreateTransferOptionsForAccountRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateTransferOptionsForAccountRequest$outboundSchema;
  /** @deprecated use `CreateTransferOptionsForAccountRequest$Outbound` instead. */
  export type Outbound = CreateTransferOptionsForAccountRequest$Outbound;
}

export function createTransferOptionsForAccountRequestToJSON(
  createTransferOptionsForAccountRequest:
    CreateTransferOptionsForAccountRequest,
): string {
  return JSON.stringify(
    CreateTransferOptionsForAccountRequest$outboundSchema.parse(
      createTransferOptionsForAccountRequest,
    ),
  );
}

export function createTransferOptionsForAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferOptionsForAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTransferOptionsForAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferOptionsForAccountRequest' from JSON`,
  );
}

/** @internal */
export const CreateTransferOptionsForAccountResponse$inboundSchema: z.ZodType<
  CreateTransferOptionsForAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.TransferOptions$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateTransferOptionsForAccountResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TransferOptions$Outbound;
};

/** @internal */
export const CreateTransferOptionsForAccountResponse$outboundSchema: z.ZodType<
  CreateTransferOptionsForAccountResponse$Outbound,
  z.ZodTypeDef,
  CreateTransferOptionsForAccountResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TransferOptions$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferOptionsForAccountResponse$ {
  /** @deprecated use `CreateTransferOptionsForAccountResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateTransferOptionsForAccountResponse$inboundSchema;
  /** @deprecated use `CreateTransferOptionsForAccountResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateTransferOptionsForAccountResponse$outboundSchema;
  /** @deprecated use `CreateTransferOptionsForAccountResponse$Outbound` instead. */
  export type Outbound = CreateTransferOptionsForAccountResponse$Outbound;
}

export function createTransferOptionsForAccountResponseToJSON(
  createTransferOptionsForAccountResponse:
    CreateTransferOptionsForAccountResponse,
): string {
  return JSON.stringify(
    CreateTransferOptionsForAccountResponse$outboundSchema.parse(
      createTransferOptionsForAccountResponse,
    ),
  );
}

export function createTransferOptionsForAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTransferOptionsForAccountResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTransferOptionsForAccountResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTransferOptionsForAccountResponse' from JSON`,
  );
}
