/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DisableBankAccountGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type DisableBankAccountRequest = {
  accountID: string;
  bankAccountID: string;
};

export type DisableBankAccountResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableBankAccountGlobals$inboundSchema: z.ZodType<
  DisableBankAccountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type DisableBankAccountGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const DisableBankAccountGlobals$outboundSchema: z.ZodType<
  DisableBankAccountGlobals$Outbound,
  z.ZodTypeDef,
  DisableBankAccountGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableBankAccountGlobals$ {
  /** @deprecated use `DisableBankAccountGlobals$inboundSchema` instead. */
  export const inboundSchema = DisableBankAccountGlobals$inboundSchema;
  /** @deprecated use `DisableBankAccountGlobals$outboundSchema` instead. */
  export const outboundSchema = DisableBankAccountGlobals$outboundSchema;
  /** @deprecated use `DisableBankAccountGlobals$Outbound` instead. */
  export type Outbound = DisableBankAccountGlobals$Outbound;
}

export function disableBankAccountGlobalsToJSON(
  disableBankAccountGlobals: DisableBankAccountGlobals,
): string {
  return JSON.stringify(
    DisableBankAccountGlobals$outboundSchema.parse(disableBankAccountGlobals),
  );
}

export function disableBankAccountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DisableBankAccountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableBankAccountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableBankAccountGlobals' from JSON`,
  );
}

/** @internal */
export const DisableBankAccountRequest$inboundSchema: z.ZodType<
  DisableBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
});

/** @internal */
export type DisableBankAccountRequest$Outbound = {
  accountID: string;
  bankAccountID: string;
};

/** @internal */
export const DisableBankAccountRequest$outboundSchema: z.ZodType<
  DisableBankAccountRequest$Outbound,
  z.ZodTypeDef,
  DisableBankAccountRequest
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableBankAccountRequest$ {
  /** @deprecated use `DisableBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = DisableBankAccountRequest$inboundSchema;
  /** @deprecated use `DisableBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = DisableBankAccountRequest$outboundSchema;
  /** @deprecated use `DisableBankAccountRequest$Outbound` instead. */
  export type Outbound = DisableBankAccountRequest$Outbound;
}

export function disableBankAccountRequestToJSON(
  disableBankAccountRequest: DisableBankAccountRequest,
): string {
  return JSON.stringify(
    DisableBankAccountRequest$outboundSchema.parse(disableBankAccountRequest),
  );
}

export function disableBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<DisableBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableBankAccountRequest' from JSON`,
  );
}

/** @internal */
export const DisableBankAccountResponse$inboundSchema: z.ZodType<
  DisableBankAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type DisableBankAccountResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DisableBankAccountResponse$outboundSchema: z.ZodType<
  DisableBankAccountResponse$Outbound,
  z.ZodTypeDef,
  DisableBankAccountResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableBankAccountResponse$ {
  /** @deprecated use `DisableBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema = DisableBankAccountResponse$inboundSchema;
  /** @deprecated use `DisableBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema = DisableBankAccountResponse$outboundSchema;
  /** @deprecated use `DisableBankAccountResponse$Outbound` instead. */
  export type Outbound = DisableBankAccountResponse$Outbound;
}

export function disableBankAccountResponseToJSON(
  disableBankAccountResponse: DisableBankAccountResponse,
): string {
  return JSON.stringify(
    DisableBankAccountResponse$outboundSchema.parse(disableBankAccountResponse),
  );
}

export function disableBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<DisableBankAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableBankAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableBankAccountResponse' from JSON`,
  );
}
