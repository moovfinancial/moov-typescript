/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFeesFetchGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListFeesFetchRequest = {
  accountID: string;
  listFeesFetchRequest?: components.ListFeesFetchRequest | undefined;
};

export type ListFeesFetchResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.IncurredFee>;
};

/** @internal */
export const ListFeesFetchGlobals$inboundSchema: z.ZodType<
  ListFeesFetchGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListFeesFetchGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListFeesFetchGlobals$outboundSchema: z.ZodType<
  ListFeesFetchGlobals$Outbound,
  z.ZodTypeDef,
  ListFeesFetchGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFeesFetchGlobals$ {
  /** @deprecated use `ListFeesFetchGlobals$inboundSchema` instead. */
  export const inboundSchema = ListFeesFetchGlobals$inboundSchema;
  /** @deprecated use `ListFeesFetchGlobals$outboundSchema` instead. */
  export const outboundSchema = ListFeesFetchGlobals$outboundSchema;
  /** @deprecated use `ListFeesFetchGlobals$Outbound` instead. */
  export type Outbound = ListFeesFetchGlobals$Outbound;
}

export function listFeesFetchGlobalsToJSON(
  listFeesFetchGlobals: ListFeesFetchGlobals,
): string {
  return JSON.stringify(
    ListFeesFetchGlobals$outboundSchema.parse(listFeesFetchGlobals),
  );
}

export function listFeesFetchGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListFeesFetchGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFeesFetchGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFeesFetchGlobals' from JSON`,
  );
}

/** @internal */
export const ListFeesFetchRequest$inboundSchema: z.ZodType<
  ListFeesFetchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  ListFeesFetchRequest: components.ListFeesFetchRequest$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ListFeesFetchRequest": "listFeesFetchRequest",
  });
});

/** @internal */
export type ListFeesFetchRequest$Outbound = {
  accountID: string;
  ListFeesFetchRequest?: components.ListFeesFetchRequest$Outbound | undefined;
};

/** @internal */
export const ListFeesFetchRequest$outboundSchema: z.ZodType<
  ListFeesFetchRequest$Outbound,
  z.ZodTypeDef,
  ListFeesFetchRequest
> = z.object({
  accountID: z.string(),
  listFeesFetchRequest: components.ListFeesFetchRequest$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    listFeesFetchRequest: "ListFeesFetchRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFeesFetchRequest$ {
  /** @deprecated use `ListFeesFetchRequest$inboundSchema` instead. */
  export const inboundSchema = ListFeesFetchRequest$inboundSchema;
  /** @deprecated use `ListFeesFetchRequest$outboundSchema` instead. */
  export const outboundSchema = ListFeesFetchRequest$outboundSchema;
  /** @deprecated use `ListFeesFetchRequest$Outbound` instead. */
  export type Outbound = ListFeesFetchRequest$Outbound;
}

export function listFeesFetchRequestToJSON(
  listFeesFetchRequest: ListFeesFetchRequest,
): string {
  return JSON.stringify(
    ListFeesFetchRequest$outboundSchema.parse(listFeesFetchRequest),
  );
}

export function listFeesFetchRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFeesFetchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFeesFetchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFeesFetchRequest' from JSON`,
  );
}

/** @internal */
export const ListFeesFetchResponse$inboundSchema: z.ZodType<
  ListFeesFetchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.IncurredFee$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListFeesFetchResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.IncurredFee$Outbound>;
};

/** @internal */
export const ListFeesFetchResponse$outboundSchema: z.ZodType<
  ListFeesFetchResponse$Outbound,
  z.ZodTypeDef,
  ListFeesFetchResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.IncurredFee$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFeesFetchResponse$ {
  /** @deprecated use `ListFeesFetchResponse$inboundSchema` instead. */
  export const inboundSchema = ListFeesFetchResponse$inboundSchema;
  /** @deprecated use `ListFeesFetchResponse$outboundSchema` instead. */
  export const outboundSchema = ListFeesFetchResponse$outboundSchema;
  /** @deprecated use `ListFeesFetchResponse$Outbound` instead. */
  export type Outbound = ListFeesFetchResponse$Outbound;
}

export function listFeesFetchResponseToJSON(
  listFeesFetchResponse: ListFeesFetchResponse,
): string {
  return JSON.stringify(
    ListFeesFetchResponse$outboundSchema.parse(listFeesFetchResponse),
  );
}

export function listFeesFetchResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListFeesFetchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFeesFetchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFeesFetchResponse' from JSON`,
  );
}
