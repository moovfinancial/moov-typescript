/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTermsOfServiceTokenGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetTermsOfServiceTokenRequest = {
  /**
   * Indicates the domain from which the request originated. Required if referer header is not present.
   */
  origin?: string | undefined;
  /**
   * Specifies the URL of the resource from which the request originated. Required if origin header is not present.
   */
  referer?: string | undefined;
};

export type GetTermsOfServiceTokenResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TermsOfServiceToken;
};

/** @internal */
export const GetTermsOfServiceTokenGlobals$inboundSchema: z.ZodType<
  GetTermsOfServiceTokenGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetTermsOfServiceTokenGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetTermsOfServiceTokenGlobals$outboundSchema: z.ZodType<
  GetTermsOfServiceTokenGlobals$Outbound,
  z.ZodTypeDef,
  GetTermsOfServiceTokenGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTermsOfServiceTokenGlobals$ {
  /** @deprecated use `GetTermsOfServiceTokenGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTermsOfServiceTokenGlobals$inboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTermsOfServiceTokenGlobals$outboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenGlobals$Outbound` instead. */
  export type Outbound = GetTermsOfServiceTokenGlobals$Outbound;
}

export function getTermsOfServiceTokenGlobalsToJSON(
  getTermsOfServiceTokenGlobals: GetTermsOfServiceTokenGlobals,
): string {
  return JSON.stringify(
    GetTermsOfServiceTokenGlobals$outboundSchema.parse(
      getTermsOfServiceTokenGlobals,
    ),
  );
}

export function getTermsOfServiceTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTermsOfServiceTokenGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTermsOfServiceTokenGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTermsOfServiceTokenGlobals' from JSON`,
  );
}

/** @internal */
export const GetTermsOfServiceTokenRequest$inboundSchema: z.ZodType<
  GetTermsOfServiceTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  origin: z.string().optional(),
  referer: z.string().optional(),
});

/** @internal */
export type GetTermsOfServiceTokenRequest$Outbound = {
  origin?: string | undefined;
  referer?: string | undefined;
};

/** @internal */
export const GetTermsOfServiceTokenRequest$outboundSchema: z.ZodType<
  GetTermsOfServiceTokenRequest$Outbound,
  z.ZodTypeDef,
  GetTermsOfServiceTokenRequest
> = z.object({
  origin: z.string().optional(),
  referer: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTermsOfServiceTokenRequest$ {
  /** @deprecated use `GetTermsOfServiceTokenRequest$inboundSchema` instead. */
  export const inboundSchema = GetTermsOfServiceTokenRequest$inboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenRequest$outboundSchema` instead. */
  export const outboundSchema = GetTermsOfServiceTokenRequest$outboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenRequest$Outbound` instead. */
  export type Outbound = GetTermsOfServiceTokenRequest$Outbound;
}

export function getTermsOfServiceTokenRequestToJSON(
  getTermsOfServiceTokenRequest: GetTermsOfServiceTokenRequest,
): string {
  return JSON.stringify(
    GetTermsOfServiceTokenRequest$outboundSchema.parse(
      getTermsOfServiceTokenRequest,
    ),
  );
}

export function getTermsOfServiceTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTermsOfServiceTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTermsOfServiceTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTermsOfServiceTokenRequest' from JSON`,
  );
}

/** @internal */
export const GetTermsOfServiceTokenResponse$inboundSchema: z.ZodType<
  GetTermsOfServiceTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.TermsOfServiceToken$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetTermsOfServiceTokenResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TermsOfServiceToken$Outbound;
};

/** @internal */
export const GetTermsOfServiceTokenResponse$outboundSchema: z.ZodType<
  GetTermsOfServiceTokenResponse$Outbound,
  z.ZodTypeDef,
  GetTermsOfServiceTokenResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TermsOfServiceToken$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTermsOfServiceTokenResponse$ {
  /** @deprecated use `GetTermsOfServiceTokenResponse$inboundSchema` instead. */
  export const inboundSchema = GetTermsOfServiceTokenResponse$inboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenResponse$outboundSchema` instead. */
  export const outboundSchema = GetTermsOfServiceTokenResponse$outboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenResponse$Outbound` instead. */
  export type Outbound = GetTermsOfServiceTokenResponse$Outbound;
}

export function getTermsOfServiceTokenResponseToJSON(
  getTermsOfServiceTokenResponse: GetTermsOfServiceTokenResponse,
): string {
  return JSON.stringify(
    GetTermsOfServiceTokenResponse$outboundSchema.parse(
      getTermsOfServiceTokenResponse,
    ),
  );
}

export function getTermsOfServiceTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTermsOfServiceTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTermsOfServiceTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTermsOfServiceTokenResponse' from JSON`,
  );
}
