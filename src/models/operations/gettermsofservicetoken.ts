/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTermsOfServiceTokenRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Indicates the domain from which the request originated. Required if referer header is not present.
   */
  origin?: string | undefined;
  /**
   * Specifies the URL of the resource from which the request originated. Required if origin header is not present.
   */
  referer?: string | undefined;
};

/** @internal */
export const GetTermsOfServiceTokenRequest$inboundSchema: z.ZodType<
  GetTermsOfServiceTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  origin: z.string().optional(),
  referer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetTermsOfServiceTokenRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  origin?: string | undefined;
  referer?: string | undefined;
};

/** @internal */
export const GetTermsOfServiceTokenRequest$outboundSchema: z.ZodType<
  GetTermsOfServiceTokenRequest$Outbound,
  z.ZodTypeDef,
  GetTermsOfServiceTokenRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  origin: z.string().optional(),
  referer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTermsOfServiceTokenRequest$ {
  /** @deprecated use `GetTermsOfServiceTokenRequest$inboundSchema` instead. */
  export const inboundSchema = GetTermsOfServiceTokenRequest$inboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenRequest$outboundSchema` instead. */
  export const outboundSchema = GetTermsOfServiceTokenRequest$outboundSchema;
  /** @deprecated use `GetTermsOfServiceTokenRequest$Outbound` instead. */
  export type Outbound = GetTermsOfServiceTokenRequest$Outbound;
}

export function getTermsOfServiceTokenRequestToJSON(
  getTermsOfServiceTokenRequest: GetTermsOfServiceTokenRequest,
): string {
  return JSON.stringify(
    GetTermsOfServiceTokenRequest$outboundSchema.parse(
      getTermsOfServiceTokenRequest,
    ),
  );
}

export function getTermsOfServiceTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTermsOfServiceTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTermsOfServiceTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTermsOfServiceTokenRequest' from JSON`,
  );
}
