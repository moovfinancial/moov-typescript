/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTerminalConfigurationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetTerminalConfigurationRequest = {
  accountID: string;
  terminalApplicationID: string;
};

export type GetTerminalConfigurationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TerminalConfiguration;
};

/** @internal */
export const GetTerminalConfigurationGlobals$inboundSchema: z.ZodType<
  GetTerminalConfigurationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetTerminalConfigurationGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetTerminalConfigurationGlobals$outboundSchema: z.ZodType<
  GetTerminalConfigurationGlobals$Outbound,
  z.ZodTypeDef,
  GetTerminalConfigurationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTerminalConfigurationGlobals$ {
  /** @deprecated use `GetTerminalConfigurationGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTerminalConfigurationGlobals$inboundSchema;
  /** @deprecated use `GetTerminalConfigurationGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTerminalConfigurationGlobals$outboundSchema;
  /** @deprecated use `GetTerminalConfigurationGlobals$Outbound` instead. */
  export type Outbound = GetTerminalConfigurationGlobals$Outbound;
}

export function getTerminalConfigurationGlobalsToJSON(
  getTerminalConfigurationGlobals: GetTerminalConfigurationGlobals,
): string {
  return JSON.stringify(
    GetTerminalConfigurationGlobals$outboundSchema.parse(
      getTerminalConfigurationGlobals,
    ),
  );
}

export function getTerminalConfigurationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTerminalConfigurationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTerminalConfigurationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTerminalConfigurationGlobals' from JSON`,
  );
}

/** @internal */
export const GetTerminalConfigurationRequest$inboundSchema: z.ZodType<
  GetTerminalConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  terminalApplicationID: z.string(),
});

/** @internal */
export type GetTerminalConfigurationRequest$Outbound = {
  accountID: string;
  terminalApplicationID: string;
};

/** @internal */
export const GetTerminalConfigurationRequest$outboundSchema: z.ZodType<
  GetTerminalConfigurationRequest$Outbound,
  z.ZodTypeDef,
  GetTerminalConfigurationRequest
> = z.object({
  accountID: z.string(),
  terminalApplicationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTerminalConfigurationRequest$ {
  /** @deprecated use `GetTerminalConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema = GetTerminalConfigurationRequest$inboundSchema;
  /** @deprecated use `GetTerminalConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema = GetTerminalConfigurationRequest$outboundSchema;
  /** @deprecated use `GetTerminalConfigurationRequest$Outbound` instead. */
  export type Outbound = GetTerminalConfigurationRequest$Outbound;
}

export function getTerminalConfigurationRequestToJSON(
  getTerminalConfigurationRequest: GetTerminalConfigurationRequest,
): string {
  return JSON.stringify(
    GetTerminalConfigurationRequest$outboundSchema.parse(
      getTerminalConfigurationRequest,
    ),
  );
}

export function getTerminalConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTerminalConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTerminalConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTerminalConfigurationRequest' from JSON`,
  );
}

/** @internal */
export const GetTerminalConfigurationResponse$inboundSchema: z.ZodType<
  GetTerminalConfigurationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.TerminalConfiguration$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetTerminalConfigurationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TerminalConfiguration$Outbound;
};

/** @internal */
export const GetTerminalConfigurationResponse$outboundSchema: z.ZodType<
  GetTerminalConfigurationResponse$Outbound,
  z.ZodTypeDef,
  GetTerminalConfigurationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TerminalConfiguration$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTerminalConfigurationResponse$ {
  /** @deprecated use `GetTerminalConfigurationResponse$inboundSchema` instead. */
  export const inboundSchema = GetTerminalConfigurationResponse$inboundSchema;
  /** @deprecated use `GetTerminalConfigurationResponse$outboundSchema` instead. */
  export const outboundSchema = GetTerminalConfigurationResponse$outboundSchema;
  /** @deprecated use `GetTerminalConfigurationResponse$Outbound` instead. */
  export type Outbound = GetTerminalConfigurationResponse$Outbound;
}

export function getTerminalConfigurationResponseToJSON(
  getTerminalConfigurationResponse: GetTerminalConfigurationResponse,
): string {
  return JSON.stringify(
    GetTerminalConfigurationResponse$outboundSchema.parse(
      getTerminalConfigurationResponse,
    ),
  );
}

export function getTerminalConfigurationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTerminalConfigurationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTerminalConfigurationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTerminalConfigurationResponse' from JSON`,
  );
}
