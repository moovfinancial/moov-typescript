/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTerminalApplicationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type DeleteTerminalApplicationRequest = {
  terminalApplicationID: string;
};

export type DeleteTerminalApplicationResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteTerminalApplicationGlobals$inboundSchema: z.ZodType<
  DeleteTerminalApplicationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type DeleteTerminalApplicationGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const DeleteTerminalApplicationGlobals$outboundSchema: z.ZodType<
  DeleteTerminalApplicationGlobals$Outbound,
  z.ZodTypeDef,
  DeleteTerminalApplicationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTerminalApplicationGlobals$ {
  /** @deprecated use `DeleteTerminalApplicationGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteTerminalApplicationGlobals$inboundSchema;
  /** @deprecated use `DeleteTerminalApplicationGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteTerminalApplicationGlobals$outboundSchema;
  /** @deprecated use `DeleteTerminalApplicationGlobals$Outbound` instead. */
  export type Outbound = DeleteTerminalApplicationGlobals$Outbound;
}

export function deleteTerminalApplicationGlobalsToJSON(
  deleteTerminalApplicationGlobals: DeleteTerminalApplicationGlobals,
): string {
  return JSON.stringify(
    DeleteTerminalApplicationGlobals$outboundSchema.parse(
      deleteTerminalApplicationGlobals,
    ),
  );
}

export function deleteTerminalApplicationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTerminalApplicationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTerminalApplicationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTerminalApplicationGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteTerminalApplicationRequest$inboundSchema: z.ZodType<
  DeleteTerminalApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  terminalApplicationID: z.string(),
});

/** @internal */
export type DeleteTerminalApplicationRequest$Outbound = {
  terminalApplicationID: string;
};

/** @internal */
export const DeleteTerminalApplicationRequest$outboundSchema: z.ZodType<
  DeleteTerminalApplicationRequest$Outbound,
  z.ZodTypeDef,
  DeleteTerminalApplicationRequest
> = z.object({
  terminalApplicationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTerminalApplicationRequest$ {
  /** @deprecated use `DeleteTerminalApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTerminalApplicationRequest$inboundSchema;
  /** @deprecated use `DeleteTerminalApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTerminalApplicationRequest$outboundSchema;
  /** @deprecated use `DeleteTerminalApplicationRequest$Outbound` instead. */
  export type Outbound = DeleteTerminalApplicationRequest$Outbound;
}

export function deleteTerminalApplicationRequestToJSON(
  deleteTerminalApplicationRequest: DeleteTerminalApplicationRequest,
): string {
  return JSON.stringify(
    DeleteTerminalApplicationRequest$outboundSchema.parse(
      deleteTerminalApplicationRequest,
    ),
  );
}

export function deleteTerminalApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTerminalApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTerminalApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTerminalApplicationRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTerminalApplicationResponse$inboundSchema: z.ZodType<
  DeleteTerminalApplicationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type DeleteTerminalApplicationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteTerminalApplicationResponse$outboundSchema: z.ZodType<
  DeleteTerminalApplicationResponse$Outbound,
  z.ZodTypeDef,
  DeleteTerminalApplicationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTerminalApplicationResponse$ {
  /** @deprecated use `DeleteTerminalApplicationResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteTerminalApplicationResponse$inboundSchema;
  /** @deprecated use `DeleteTerminalApplicationResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteTerminalApplicationResponse$outboundSchema;
  /** @deprecated use `DeleteTerminalApplicationResponse$Outbound` instead. */
  export type Outbound = DeleteTerminalApplicationResponse$Outbound;
}

export function deleteTerminalApplicationResponseToJSON(
  deleteTerminalApplicationResponse: DeleteTerminalApplicationResponse,
): string {
  return JSON.stringify(
    DeleteTerminalApplicationResponse$outboundSchema.parse(
      deleteTerminalApplicationResponse,
    ),
  );
}

export function deleteTerminalApplicationResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTerminalApplicationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTerminalApplicationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTerminalApplicationResponse' from JSON`,
  );
}
