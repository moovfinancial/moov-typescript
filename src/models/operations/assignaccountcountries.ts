/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssignAccountCountriesSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type AssignAccountCountriesRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  accountCountries: components.AccountCountries;
};

/** @internal */
export const AssignAccountCountriesSecurity$inboundSchema: z.ZodType<
  AssignAccountCountriesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type AssignAccountCountriesSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const AssignAccountCountriesSecurity$outboundSchema: z.ZodType<
  AssignAccountCountriesSecurity$Outbound,
  z.ZodTypeDef,
  AssignAccountCountriesSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignAccountCountriesSecurity$ {
  /** @deprecated use `AssignAccountCountriesSecurity$inboundSchema` instead. */
  export const inboundSchema = AssignAccountCountriesSecurity$inboundSchema;
  /** @deprecated use `AssignAccountCountriesSecurity$outboundSchema` instead. */
  export const outboundSchema = AssignAccountCountriesSecurity$outboundSchema;
  /** @deprecated use `AssignAccountCountriesSecurity$Outbound` instead. */
  export type Outbound = AssignAccountCountriesSecurity$Outbound;
}

export function assignAccountCountriesSecurityToJSON(
  assignAccountCountriesSecurity: AssignAccountCountriesSecurity,
): string {
  return JSON.stringify(
    AssignAccountCountriesSecurity$outboundSchema.parse(
      assignAccountCountriesSecurity,
    ),
  );
}

export function assignAccountCountriesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AssignAccountCountriesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignAccountCountriesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignAccountCountriesSecurity' from JSON`,
  );
}

/** @internal */
export const AssignAccountCountriesRequest$inboundSchema: z.ZodType<
  AssignAccountCountriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  AccountCountries: components.AccountCountries$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "AccountCountries": "accountCountries",
  });
});

/** @internal */
export type AssignAccountCountriesRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  AccountCountries: components.AccountCountries$Outbound;
};

/** @internal */
export const AssignAccountCountriesRequest$outboundSchema: z.ZodType<
  AssignAccountCountriesRequest$Outbound,
  z.ZodTypeDef,
  AssignAccountCountriesRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  accountCountries: components.AccountCountries$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    accountCountries: "AccountCountries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignAccountCountriesRequest$ {
  /** @deprecated use `AssignAccountCountriesRequest$inboundSchema` instead. */
  export const inboundSchema = AssignAccountCountriesRequest$inboundSchema;
  /** @deprecated use `AssignAccountCountriesRequest$outboundSchema` instead. */
  export const outboundSchema = AssignAccountCountriesRequest$outboundSchema;
  /** @deprecated use `AssignAccountCountriesRequest$Outbound` instead. */
  export type Outbound = AssignAccountCountriesRequest$Outbound;
}

export function assignAccountCountriesRequestToJSON(
  assignAccountCountriesRequest: AssignAccountCountriesRequest,
): string {
  return JSON.stringify(
    AssignAccountCountriesRequest$outboundSchema.parse(
      assignAccountCountriesRequest,
    ),
  );
}

export function assignAccountCountriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<AssignAccountCountriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignAccountCountriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignAccountCountriesRequest' from JSON`,
  );
}
