/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssignAccountCountriesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type AssignAccountCountriesRequest = {
  accountID: string;
  accountCountries: components.AccountCountries;
};

export type AssignAccountCountriesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.AccountCountries;
};

/** @internal */
export const AssignAccountCountriesGlobals$inboundSchema: z.ZodType<
  AssignAccountCountriesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type AssignAccountCountriesGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const AssignAccountCountriesGlobals$outboundSchema: z.ZodType<
  AssignAccountCountriesGlobals$Outbound,
  z.ZodTypeDef,
  AssignAccountCountriesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignAccountCountriesGlobals$ {
  /** @deprecated use `AssignAccountCountriesGlobals$inboundSchema` instead. */
  export const inboundSchema = AssignAccountCountriesGlobals$inboundSchema;
  /** @deprecated use `AssignAccountCountriesGlobals$outboundSchema` instead. */
  export const outboundSchema = AssignAccountCountriesGlobals$outboundSchema;
  /** @deprecated use `AssignAccountCountriesGlobals$Outbound` instead. */
  export type Outbound = AssignAccountCountriesGlobals$Outbound;
}

export function assignAccountCountriesGlobalsToJSON(
  assignAccountCountriesGlobals: AssignAccountCountriesGlobals,
): string {
  return JSON.stringify(
    AssignAccountCountriesGlobals$outboundSchema.parse(
      assignAccountCountriesGlobals,
    ),
  );
}

export function assignAccountCountriesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AssignAccountCountriesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignAccountCountriesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignAccountCountriesGlobals' from JSON`,
  );
}

/** @internal */
export const AssignAccountCountriesRequest$inboundSchema: z.ZodType<
  AssignAccountCountriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  AccountCountries: components.AccountCountries$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AccountCountries": "accountCountries",
  });
});

/** @internal */
export type AssignAccountCountriesRequest$Outbound = {
  accountID: string;
  AccountCountries: components.AccountCountries$Outbound;
};

/** @internal */
export const AssignAccountCountriesRequest$outboundSchema: z.ZodType<
  AssignAccountCountriesRequest$Outbound,
  z.ZodTypeDef,
  AssignAccountCountriesRequest
> = z.object({
  accountID: z.string(),
  accountCountries: components.AccountCountries$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountCountries: "AccountCountries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignAccountCountriesRequest$ {
  /** @deprecated use `AssignAccountCountriesRequest$inboundSchema` instead. */
  export const inboundSchema = AssignAccountCountriesRequest$inboundSchema;
  /** @deprecated use `AssignAccountCountriesRequest$outboundSchema` instead. */
  export const outboundSchema = AssignAccountCountriesRequest$outboundSchema;
  /** @deprecated use `AssignAccountCountriesRequest$Outbound` instead. */
  export type Outbound = AssignAccountCountriesRequest$Outbound;
}

export function assignAccountCountriesRequestToJSON(
  assignAccountCountriesRequest: AssignAccountCountriesRequest,
): string {
  return JSON.stringify(
    AssignAccountCountriesRequest$outboundSchema.parse(
      assignAccountCountriesRequest,
    ),
  );
}

export function assignAccountCountriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<AssignAccountCountriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignAccountCountriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignAccountCountriesRequest' from JSON`,
  );
}

/** @internal */
export const AssignAccountCountriesResponse$inboundSchema: z.ZodType<
  AssignAccountCountriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.AccountCountries$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type AssignAccountCountriesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.AccountCountries$Outbound;
};

/** @internal */
export const AssignAccountCountriesResponse$outboundSchema: z.ZodType<
  AssignAccountCountriesResponse$Outbound,
  z.ZodTypeDef,
  AssignAccountCountriesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.AccountCountries$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignAccountCountriesResponse$ {
  /** @deprecated use `AssignAccountCountriesResponse$inboundSchema` instead. */
  export const inboundSchema = AssignAccountCountriesResponse$inboundSchema;
  /** @deprecated use `AssignAccountCountriesResponse$outboundSchema` instead. */
  export const outboundSchema = AssignAccountCountriesResponse$outboundSchema;
  /** @deprecated use `AssignAccountCountriesResponse$Outbound` instead. */
  export type Outbound = AssignAccountCountriesResponse$Outbound;
}

export function assignAccountCountriesResponseToJSON(
  assignAccountCountriesResponse: AssignAccountCountriesResponse,
): string {
  return JSON.stringify(
    AssignAccountCountriesResponse$outboundSchema.parse(
      assignAccountCountriesResponse,
    ),
  );
}

export function assignAccountCountriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<AssignAccountCountriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignAccountCountriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignAccountCountriesResponse' from JSON`,
  );
}
