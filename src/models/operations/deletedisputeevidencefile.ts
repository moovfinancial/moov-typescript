/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDisputeEvidenceFileGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type DeleteDisputeEvidenceFileRequest = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

export type DeleteDisputeEvidenceFileResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteDisputeEvidenceFileGlobals$inboundSchema: z.ZodType<
  DeleteDisputeEvidenceFileGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type DeleteDisputeEvidenceFileGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const DeleteDisputeEvidenceFileGlobals$outboundSchema: z.ZodType<
  DeleteDisputeEvidenceFileGlobals$Outbound,
  z.ZodTypeDef,
  DeleteDisputeEvidenceFileGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDisputeEvidenceFileGlobals$ {
  /** @deprecated use `DeleteDisputeEvidenceFileGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteDisputeEvidenceFileGlobals$inboundSchema;
  /** @deprecated use `DeleteDisputeEvidenceFileGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteDisputeEvidenceFileGlobals$outboundSchema;
  /** @deprecated use `DeleteDisputeEvidenceFileGlobals$Outbound` instead. */
  export type Outbound = DeleteDisputeEvidenceFileGlobals$Outbound;
}

export function deleteDisputeEvidenceFileGlobalsToJSON(
  deleteDisputeEvidenceFileGlobals: DeleteDisputeEvidenceFileGlobals,
): string {
  return JSON.stringify(
    DeleteDisputeEvidenceFileGlobals$outboundSchema.parse(
      deleteDisputeEvidenceFileGlobals,
    ),
  );
}

export function deleteDisputeEvidenceFileGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDisputeEvidenceFileGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDisputeEvidenceFileGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDisputeEvidenceFileGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteDisputeEvidenceFileRequest$inboundSchema: z.ZodType<
  DeleteDisputeEvidenceFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
});

/** @internal */
export type DeleteDisputeEvidenceFileRequest$Outbound = {
  accountID: string;
  disputeID: string;
  evidenceID: string;
};

/** @internal */
export const DeleteDisputeEvidenceFileRequest$outboundSchema: z.ZodType<
  DeleteDisputeEvidenceFileRequest$Outbound,
  z.ZodTypeDef,
  DeleteDisputeEvidenceFileRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  evidenceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDisputeEvidenceFileRequest$ {
  /** @deprecated use `DeleteDisputeEvidenceFileRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDisputeEvidenceFileRequest$inboundSchema;
  /** @deprecated use `DeleteDisputeEvidenceFileRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDisputeEvidenceFileRequest$outboundSchema;
  /** @deprecated use `DeleteDisputeEvidenceFileRequest$Outbound` instead. */
  export type Outbound = DeleteDisputeEvidenceFileRequest$Outbound;
}

export function deleteDisputeEvidenceFileRequestToJSON(
  deleteDisputeEvidenceFileRequest: DeleteDisputeEvidenceFileRequest,
): string {
  return JSON.stringify(
    DeleteDisputeEvidenceFileRequest$outboundSchema.parse(
      deleteDisputeEvidenceFileRequest,
    ),
  );
}

export function deleteDisputeEvidenceFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDisputeEvidenceFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDisputeEvidenceFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDisputeEvidenceFileRequest' from JSON`,
  );
}

/** @internal */
export const DeleteDisputeEvidenceFileResponse$inboundSchema: z.ZodType<
  DeleteDisputeEvidenceFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type DeleteDisputeEvidenceFileResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteDisputeEvidenceFileResponse$outboundSchema: z.ZodType<
  DeleteDisputeEvidenceFileResponse$Outbound,
  z.ZodTypeDef,
  DeleteDisputeEvidenceFileResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDisputeEvidenceFileResponse$ {
  /** @deprecated use `DeleteDisputeEvidenceFileResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteDisputeEvidenceFileResponse$inboundSchema;
  /** @deprecated use `DeleteDisputeEvidenceFileResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteDisputeEvidenceFileResponse$outboundSchema;
  /** @deprecated use `DeleteDisputeEvidenceFileResponse$Outbound` instead. */
  export type Outbound = DeleteDisputeEvidenceFileResponse$Outbound;
}

export function deleteDisputeEvidenceFileResponseToJSON(
  deleteDisputeEvidenceFileResponse: DeleteDisputeEvidenceFileResponse,
): string {
  return JSON.stringify(
    DeleteDisputeEvidenceFileResponse$outboundSchema.parse(
      deleteDisputeEvidenceFileResponse,
    ),
  );
}

export function deleteDisputeEvidenceFileResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDisputeEvidenceFileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDisputeEvidenceFileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDisputeEvidenceFileResponse' from JSON`,
  );
}
