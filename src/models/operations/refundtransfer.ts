/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RefundTransferSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type RefundTransferRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Prevents duplicate refunds from being created.
   */
  xIdempotencyKey: string;
  /**
   * Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
   *
   * @remarks
   * asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
   */
  xWaitFor?: components.TransferWaitFor | undefined;
  /**
   * The merchant's Moov account ID.
   */
  accountID: string;
  /**
   * Identifier for the transfer.
   */
  transferID: string;
  createRefund?: components.CreateRefund | undefined;
};

export type RefundTransferResponse =
  | components.CardAcquiringRefund
  | components.CreateRefundResponse;

/** @internal */
export const RefundTransferSecurity$inboundSchema: z.ZodType<
  RefundTransferSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type RefundTransferSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const RefundTransferSecurity$outboundSchema: z.ZodType<
  RefundTransferSecurity$Outbound,
  z.ZodTypeDef,
  RefundTransferSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundTransferSecurity$ {
  /** @deprecated use `RefundTransferSecurity$inboundSchema` instead. */
  export const inboundSchema = RefundTransferSecurity$inboundSchema;
  /** @deprecated use `RefundTransferSecurity$outboundSchema` instead. */
  export const outboundSchema = RefundTransferSecurity$outboundSchema;
  /** @deprecated use `RefundTransferSecurity$Outbound` instead. */
  export type Outbound = RefundTransferSecurity$Outbound;
}

export function refundTransferSecurityToJSON(
  refundTransferSecurity: RefundTransferSecurity,
): string {
  return JSON.stringify(
    RefundTransferSecurity$outboundSchema.parse(refundTransferSecurity),
  );
}

export function refundTransferSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RefundTransferSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundTransferSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundTransferSecurity' from JSON`,
  );
}

/** @internal */
export const RefundTransferRequest$inboundSchema: z.ZodType<
  RefundTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  "x-idempotency-key": z.string(),
  "x-wait-for": components.TransferWaitFor$inboundSchema.optional(),
  accountID: z.string(),
  transferID: z.string(),
  CreateRefund: components.CreateRefund$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "x-idempotency-key": "xIdempotencyKey",
    "x-wait-for": "xWaitFor",
    "CreateRefund": "createRefund",
  });
});

/** @internal */
export type RefundTransferRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  "x-idempotency-key": string;
  "x-wait-for"?: string | undefined;
  accountID: string;
  transferID: string;
  CreateRefund?: components.CreateRefund$Outbound | undefined;
};

/** @internal */
export const RefundTransferRequest$outboundSchema: z.ZodType<
  RefundTransferRequest$Outbound,
  z.ZodTypeDef,
  RefundTransferRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  xIdempotencyKey: z.string(),
  xWaitFor: components.TransferWaitFor$outboundSchema.optional(),
  accountID: z.string(),
  transferID: z.string(),
  createRefund: components.CreateRefund$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    xIdempotencyKey: "x-idempotency-key",
    xWaitFor: "x-wait-for",
    createRefund: "CreateRefund",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundTransferRequest$ {
  /** @deprecated use `RefundTransferRequest$inboundSchema` instead. */
  export const inboundSchema = RefundTransferRequest$inboundSchema;
  /** @deprecated use `RefundTransferRequest$outboundSchema` instead. */
  export const outboundSchema = RefundTransferRequest$outboundSchema;
  /** @deprecated use `RefundTransferRequest$Outbound` instead. */
  export type Outbound = RefundTransferRequest$Outbound;
}

export function refundTransferRequestToJSON(
  refundTransferRequest: RefundTransferRequest,
): string {
  return JSON.stringify(
    RefundTransferRequest$outboundSchema.parse(refundTransferRequest),
  );
}

export function refundTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<RefundTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundTransferRequest' from JSON`,
  );
}

/** @internal */
export const RefundTransferResponse$inboundSchema: z.ZodType<
  RefundTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CardAcquiringRefund$inboundSchema,
  components.CreateRefundResponse$inboundSchema,
]);

/** @internal */
export type RefundTransferResponse$Outbound =
  | components.CardAcquiringRefund$Outbound
  | components.CreateRefundResponse$Outbound;

/** @internal */
export const RefundTransferResponse$outboundSchema: z.ZodType<
  RefundTransferResponse$Outbound,
  z.ZodTypeDef,
  RefundTransferResponse
> = z.union([
  components.CardAcquiringRefund$outboundSchema,
  components.CreateRefundResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundTransferResponse$ {
  /** @deprecated use `RefundTransferResponse$inboundSchema` instead. */
  export const inboundSchema = RefundTransferResponse$inboundSchema;
  /** @deprecated use `RefundTransferResponse$outboundSchema` instead. */
  export const outboundSchema = RefundTransferResponse$outboundSchema;
  /** @deprecated use `RefundTransferResponse$Outbound` instead. */
  export type Outbound = RefundTransferResponse$Outbound;
}

export function refundTransferResponseToJSON(
  refundTransferResponse: RefundTransferResponse,
): string {
  return JSON.stringify(
    RefundTransferResponse$outboundSchema.parse(refundTransferResponse),
  );
}

export function refundTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<RefundTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundTransferResponse' from JSON`,
  );
}
