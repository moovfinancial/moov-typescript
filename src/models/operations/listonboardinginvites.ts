/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListOnboardingInvitesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListOnboardingInvitesRequest = {};

export type ListOnboardingInvitesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.OnboardingInvite>;
};

/** @internal */
export const ListOnboardingInvitesGlobals$inboundSchema: z.ZodType<
  ListOnboardingInvitesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListOnboardingInvitesGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListOnboardingInvitesGlobals$outboundSchema: z.ZodType<
  ListOnboardingInvitesGlobals$Outbound,
  z.ZodTypeDef,
  ListOnboardingInvitesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOnboardingInvitesGlobals$ {
  /** @deprecated use `ListOnboardingInvitesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListOnboardingInvitesGlobals$inboundSchema;
  /** @deprecated use `ListOnboardingInvitesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListOnboardingInvitesGlobals$outboundSchema;
  /** @deprecated use `ListOnboardingInvitesGlobals$Outbound` instead. */
  export type Outbound = ListOnboardingInvitesGlobals$Outbound;
}

export function listOnboardingInvitesGlobalsToJSON(
  listOnboardingInvitesGlobals: ListOnboardingInvitesGlobals,
): string {
  return JSON.stringify(
    ListOnboardingInvitesGlobals$outboundSchema.parse(
      listOnboardingInvitesGlobals,
    ),
  );
}

export function listOnboardingInvitesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListOnboardingInvitesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOnboardingInvitesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOnboardingInvitesGlobals' from JSON`,
  );
}

/** @internal */
export const ListOnboardingInvitesRequest$inboundSchema: z.ZodType<
  ListOnboardingInvitesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListOnboardingInvitesRequest$Outbound = {};

/** @internal */
export const ListOnboardingInvitesRequest$outboundSchema: z.ZodType<
  ListOnboardingInvitesRequest$Outbound,
  z.ZodTypeDef,
  ListOnboardingInvitesRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOnboardingInvitesRequest$ {
  /** @deprecated use `ListOnboardingInvitesRequest$inboundSchema` instead. */
  export const inboundSchema = ListOnboardingInvitesRequest$inboundSchema;
  /** @deprecated use `ListOnboardingInvitesRequest$outboundSchema` instead. */
  export const outboundSchema = ListOnboardingInvitesRequest$outboundSchema;
  /** @deprecated use `ListOnboardingInvitesRequest$Outbound` instead. */
  export type Outbound = ListOnboardingInvitesRequest$Outbound;
}

export function listOnboardingInvitesRequestToJSON(
  listOnboardingInvitesRequest: ListOnboardingInvitesRequest,
): string {
  return JSON.stringify(
    ListOnboardingInvitesRequest$outboundSchema.parse(
      listOnboardingInvitesRequest,
    ),
  );
}

export function listOnboardingInvitesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOnboardingInvitesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOnboardingInvitesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOnboardingInvitesRequest' from JSON`,
  );
}

/** @internal */
export const ListOnboardingInvitesResponse$inboundSchema: z.ZodType<
  ListOnboardingInvitesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.array(components.OnboardingInvite$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListOnboardingInvitesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.OnboardingInvite$Outbound>;
};

/** @internal */
export const ListOnboardingInvitesResponse$outboundSchema: z.ZodType<
  ListOnboardingInvitesResponse$Outbound,
  z.ZodTypeDef,
  ListOnboardingInvitesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.OnboardingInvite$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOnboardingInvitesResponse$ {
  /** @deprecated use `ListOnboardingInvitesResponse$inboundSchema` instead. */
  export const inboundSchema = ListOnboardingInvitesResponse$inboundSchema;
  /** @deprecated use `ListOnboardingInvitesResponse$outboundSchema` instead. */
  export const outboundSchema = ListOnboardingInvitesResponse$outboundSchema;
  /** @deprecated use `ListOnboardingInvitesResponse$Outbound` instead. */
  export type Outbound = ListOnboardingInvitesResponse$Outbound;
}

export function listOnboardingInvitesResponseToJSON(
  listOnboardingInvitesResponse: ListOnboardingInvitesResponse,
): string {
  return JSON.stringify(
    ListOnboardingInvitesResponse$outboundSchema.parse(
      listOnboardingInvitesResponse,
    ),
  );
}

export function listOnboardingInvitesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListOnboardingInvitesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOnboardingInvitesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOnboardingInvitesResponse' from JSON`,
  );
}
