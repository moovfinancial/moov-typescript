/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompleteMicroDepositsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CompleteMicroDepositsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  bankAccountID: string;
  completeMicroDeposits: components.CompleteMicroDeposits;
};

/** @internal */
export const CompleteMicroDepositsSecurity$inboundSchema: z.ZodType<
  CompleteMicroDepositsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CompleteMicroDepositsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CompleteMicroDepositsSecurity$outboundSchema: z.ZodType<
  CompleteMicroDepositsSecurity$Outbound,
  z.ZodTypeDef,
  CompleteMicroDepositsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteMicroDepositsSecurity$ {
  /** @deprecated use `CompleteMicroDepositsSecurity$inboundSchema` instead. */
  export const inboundSchema = CompleteMicroDepositsSecurity$inboundSchema;
  /** @deprecated use `CompleteMicroDepositsSecurity$outboundSchema` instead. */
  export const outboundSchema = CompleteMicroDepositsSecurity$outboundSchema;
  /** @deprecated use `CompleteMicroDepositsSecurity$Outbound` instead. */
  export type Outbound = CompleteMicroDepositsSecurity$Outbound;
}

export function completeMicroDepositsSecurityToJSON(
  completeMicroDepositsSecurity: CompleteMicroDepositsSecurity,
): string {
  return JSON.stringify(
    CompleteMicroDepositsSecurity$outboundSchema.parse(
      completeMicroDepositsSecurity,
    ),
  );
}

export function completeMicroDepositsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CompleteMicroDepositsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteMicroDepositsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteMicroDepositsSecurity' from JSON`,
  );
}

/** @internal */
export const CompleteMicroDepositsRequest$inboundSchema: z.ZodType<
  CompleteMicroDepositsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  bankAccountID: z.string(),
  CompleteMicroDeposits: components.CompleteMicroDeposits$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CompleteMicroDeposits": "completeMicroDeposits",
  });
});

/** @internal */
export type CompleteMicroDepositsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  bankAccountID: string;
  CompleteMicroDeposits: components.CompleteMicroDeposits$Outbound;
};

/** @internal */
export const CompleteMicroDepositsRequest$outboundSchema: z.ZodType<
  CompleteMicroDepositsRequest$Outbound,
  z.ZodTypeDef,
  CompleteMicroDepositsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  bankAccountID: z.string(),
  completeMicroDeposits: components.CompleteMicroDeposits$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    completeMicroDeposits: "CompleteMicroDeposits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteMicroDepositsRequest$ {
  /** @deprecated use `CompleteMicroDepositsRequest$inboundSchema` instead. */
  export const inboundSchema = CompleteMicroDepositsRequest$inboundSchema;
  /** @deprecated use `CompleteMicroDepositsRequest$outboundSchema` instead. */
  export const outboundSchema = CompleteMicroDepositsRequest$outboundSchema;
  /** @deprecated use `CompleteMicroDepositsRequest$Outbound` instead. */
  export type Outbound = CompleteMicroDepositsRequest$Outbound;
}

export function completeMicroDepositsRequestToJSON(
  completeMicroDepositsRequest: CompleteMicroDepositsRequest,
): string {
  return JSON.stringify(
    CompleteMicroDepositsRequest$outboundSchema.parse(
      completeMicroDepositsRequest,
    ),
  );
}

export function completeMicroDepositsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompleteMicroDepositsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteMicroDepositsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteMicroDepositsRequest' from JSON`,
  );
}
