/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompleteMicroDepositsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CompleteMicroDepositsRequest = {
  accountID: string;
  bankAccountID: string;
  completeMicroDeposits: components.CompleteMicroDeposits;
};

export type CompleteMicroDepositsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.CompletedMicroDeposits;
};

/** @internal */
export const CompleteMicroDepositsGlobals$inboundSchema: z.ZodType<
  CompleteMicroDepositsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CompleteMicroDepositsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CompleteMicroDepositsGlobals$outboundSchema: z.ZodType<
  CompleteMicroDepositsGlobals$Outbound,
  z.ZodTypeDef,
  CompleteMicroDepositsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteMicroDepositsGlobals$ {
  /** @deprecated use `CompleteMicroDepositsGlobals$inboundSchema` instead. */
  export const inboundSchema = CompleteMicroDepositsGlobals$inboundSchema;
  /** @deprecated use `CompleteMicroDepositsGlobals$outboundSchema` instead. */
  export const outboundSchema = CompleteMicroDepositsGlobals$outboundSchema;
  /** @deprecated use `CompleteMicroDepositsGlobals$Outbound` instead. */
  export type Outbound = CompleteMicroDepositsGlobals$Outbound;
}

export function completeMicroDepositsGlobalsToJSON(
  completeMicroDepositsGlobals: CompleteMicroDepositsGlobals,
): string {
  return JSON.stringify(
    CompleteMicroDepositsGlobals$outboundSchema.parse(
      completeMicroDepositsGlobals,
    ),
  );
}

export function completeMicroDepositsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CompleteMicroDepositsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteMicroDepositsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteMicroDepositsGlobals' from JSON`,
  );
}

/** @internal */
export const CompleteMicroDepositsRequest$inboundSchema: z.ZodType<
  CompleteMicroDepositsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
  CompleteMicroDeposits: components.CompleteMicroDeposits$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CompleteMicroDeposits": "completeMicroDeposits",
  });
});

/** @internal */
export type CompleteMicroDepositsRequest$Outbound = {
  accountID: string;
  bankAccountID: string;
  CompleteMicroDeposits: components.CompleteMicroDeposits$Outbound;
};

/** @internal */
export const CompleteMicroDepositsRequest$outboundSchema: z.ZodType<
  CompleteMicroDepositsRequest$Outbound,
  z.ZodTypeDef,
  CompleteMicroDepositsRequest
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
  completeMicroDeposits: components.CompleteMicroDeposits$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    completeMicroDeposits: "CompleteMicroDeposits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteMicroDepositsRequest$ {
  /** @deprecated use `CompleteMicroDepositsRequest$inboundSchema` instead. */
  export const inboundSchema = CompleteMicroDepositsRequest$inboundSchema;
  /** @deprecated use `CompleteMicroDepositsRequest$outboundSchema` instead. */
  export const outboundSchema = CompleteMicroDepositsRequest$outboundSchema;
  /** @deprecated use `CompleteMicroDepositsRequest$Outbound` instead. */
  export type Outbound = CompleteMicroDepositsRequest$Outbound;
}

export function completeMicroDepositsRequestToJSON(
  completeMicroDepositsRequest: CompleteMicroDepositsRequest,
): string {
  return JSON.stringify(
    CompleteMicroDepositsRequest$outboundSchema.parse(
      completeMicroDepositsRequest,
    ),
  );
}

export function completeMicroDepositsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompleteMicroDepositsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteMicroDepositsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteMicroDepositsRequest' from JSON`,
  );
}

/** @internal */
export const CompleteMicroDepositsResponse$inboundSchema: z.ZodType<
  CompleteMicroDepositsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.CompletedMicroDeposits$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CompleteMicroDepositsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.CompletedMicroDeposits$Outbound;
};

/** @internal */
export const CompleteMicroDepositsResponse$outboundSchema: z.ZodType<
  CompleteMicroDepositsResponse$Outbound,
  z.ZodTypeDef,
  CompleteMicroDepositsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.CompletedMicroDeposits$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteMicroDepositsResponse$ {
  /** @deprecated use `CompleteMicroDepositsResponse$inboundSchema` instead. */
  export const inboundSchema = CompleteMicroDepositsResponse$inboundSchema;
  /** @deprecated use `CompleteMicroDepositsResponse$outboundSchema` instead. */
  export const outboundSchema = CompleteMicroDepositsResponse$outboundSchema;
  /** @deprecated use `CompleteMicroDepositsResponse$Outbound` instead. */
  export type Outbound = CompleteMicroDepositsResponse$Outbound;
}

export function completeMicroDepositsResponseToJSON(
  completeMicroDepositsResponse: CompleteMicroDepositsResponse,
): string {
  return JSON.stringify(
    CompleteMicroDepositsResponse$outboundSchema.parse(
      completeMicroDepositsResponse,
    ),
  );
}

export function completeMicroDepositsResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompleteMicroDepositsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteMicroDepositsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteMicroDepositsResponse' from JSON`,
  );
}
