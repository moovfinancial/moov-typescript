/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIssuedCardAuthorizationEventsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListIssuedCardAuthorizationEventsRequest = {
  /**
   * The Moov business account for which cards have been issued.
   */
  accountID: string;
  authorizationID: string;
  skip?: number | undefined;
  count?: number | undefined;
};

export type ListIssuedCardAuthorizationEventsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.IssuedCardAuthorizationEvent>;
};

/** @internal */
export const ListIssuedCardAuthorizationEventsGlobals$inboundSchema: z.ZodType<
  ListIssuedCardAuthorizationEventsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListIssuedCardAuthorizationEventsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListIssuedCardAuthorizationEventsGlobals$outboundSchema: z.ZodType<
  ListIssuedCardAuthorizationEventsGlobals$Outbound,
  z.ZodTypeDef,
  ListIssuedCardAuthorizationEventsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardAuthorizationEventsGlobals$ {
  /** @deprecated use `ListIssuedCardAuthorizationEventsGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ListIssuedCardAuthorizationEventsGlobals$inboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationEventsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardAuthorizationEventsGlobals$outboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationEventsGlobals$Outbound` instead. */
  export type Outbound = ListIssuedCardAuthorizationEventsGlobals$Outbound;
}

export function listIssuedCardAuthorizationEventsGlobalsToJSON(
  listIssuedCardAuthorizationEventsGlobals:
    ListIssuedCardAuthorizationEventsGlobals,
): string {
  return JSON.stringify(
    ListIssuedCardAuthorizationEventsGlobals$outboundSchema.parse(
      listIssuedCardAuthorizationEventsGlobals,
    ),
  );
}

export function listIssuedCardAuthorizationEventsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIssuedCardAuthorizationEventsGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIssuedCardAuthorizationEventsGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListIssuedCardAuthorizationEventsGlobals' from JSON`,
  );
}

/** @internal */
export const ListIssuedCardAuthorizationEventsRequest$inboundSchema: z.ZodType<
  ListIssuedCardAuthorizationEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  authorizationID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type ListIssuedCardAuthorizationEventsRequest$Outbound = {
  accountID: string;
  authorizationID: string;
  skip?: number | undefined;
  count?: number | undefined;
};

/** @internal */
export const ListIssuedCardAuthorizationEventsRequest$outboundSchema: z.ZodType<
  ListIssuedCardAuthorizationEventsRequest$Outbound,
  z.ZodTypeDef,
  ListIssuedCardAuthorizationEventsRequest
> = z.object({
  accountID: z.string(),
  authorizationID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardAuthorizationEventsRequest$ {
  /** @deprecated use `ListIssuedCardAuthorizationEventsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListIssuedCardAuthorizationEventsRequest$inboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationEventsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardAuthorizationEventsRequest$outboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationEventsRequest$Outbound` instead. */
  export type Outbound = ListIssuedCardAuthorizationEventsRequest$Outbound;
}

export function listIssuedCardAuthorizationEventsRequestToJSON(
  listIssuedCardAuthorizationEventsRequest:
    ListIssuedCardAuthorizationEventsRequest,
): string {
  return JSON.stringify(
    ListIssuedCardAuthorizationEventsRequest$outboundSchema.parse(
      listIssuedCardAuthorizationEventsRequest,
    ),
  );
}

export function listIssuedCardAuthorizationEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIssuedCardAuthorizationEventsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIssuedCardAuthorizationEventsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListIssuedCardAuthorizationEventsRequest' from JSON`,
  );
}

/** @internal */
export const ListIssuedCardAuthorizationEventsResponse$inboundSchema: z.ZodType<
  ListIssuedCardAuthorizationEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.IssuedCardAuthorizationEvent$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListIssuedCardAuthorizationEventsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.IssuedCardAuthorizationEvent$Outbound>;
};

/** @internal */
export const ListIssuedCardAuthorizationEventsResponse$outboundSchema:
  z.ZodType<
    ListIssuedCardAuthorizationEventsResponse$Outbound,
    z.ZodTypeDef,
    ListIssuedCardAuthorizationEventsResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.array(components.IssuedCardAuthorizationEvent$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIssuedCardAuthorizationEventsResponse$ {
  /** @deprecated use `ListIssuedCardAuthorizationEventsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListIssuedCardAuthorizationEventsResponse$inboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationEventsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListIssuedCardAuthorizationEventsResponse$outboundSchema;
  /** @deprecated use `ListIssuedCardAuthorizationEventsResponse$Outbound` instead. */
  export type Outbound = ListIssuedCardAuthorizationEventsResponse$Outbound;
}

export function listIssuedCardAuthorizationEventsResponseToJSON(
  listIssuedCardAuthorizationEventsResponse:
    ListIssuedCardAuthorizationEventsResponse,
): string {
  return JSON.stringify(
    ListIssuedCardAuthorizationEventsResponse$outboundSchema.parse(
      listIssuedCardAuthorizationEventsResponse,
    ),
  );
}

export function listIssuedCardAuthorizationEventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIssuedCardAuthorizationEventsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIssuedCardAuthorizationEventsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListIssuedCardAuthorizationEventsResponse' from JSON`,
  );
}
