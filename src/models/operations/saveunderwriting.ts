/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SaveUnderwritingGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type SaveUnderwritingRequest = {
  accountID: string;
  upsertUnderwriting: components.UpsertUnderwriting;
};

export type SaveUnderwritingResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Underwriting;
};

/** @internal */
export const SaveUnderwritingGlobals$inboundSchema: z.ZodType<
  SaveUnderwritingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type SaveUnderwritingGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const SaveUnderwritingGlobals$outboundSchema: z.ZodType<
  SaveUnderwritingGlobals$Outbound,
  z.ZodTypeDef,
  SaveUnderwritingGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveUnderwritingGlobals$ {
  /** @deprecated use `SaveUnderwritingGlobals$inboundSchema` instead. */
  export const inboundSchema = SaveUnderwritingGlobals$inboundSchema;
  /** @deprecated use `SaveUnderwritingGlobals$outboundSchema` instead. */
  export const outboundSchema = SaveUnderwritingGlobals$outboundSchema;
  /** @deprecated use `SaveUnderwritingGlobals$Outbound` instead. */
  export type Outbound = SaveUnderwritingGlobals$Outbound;
}

export function saveUnderwritingGlobalsToJSON(
  saveUnderwritingGlobals: SaveUnderwritingGlobals,
): string {
  return JSON.stringify(
    SaveUnderwritingGlobals$outboundSchema.parse(saveUnderwritingGlobals),
  );
}

export function saveUnderwritingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SaveUnderwritingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveUnderwritingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveUnderwritingGlobals' from JSON`,
  );
}

/** @internal */
export const SaveUnderwritingRequest$inboundSchema: z.ZodType<
  SaveUnderwritingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  UpsertUnderwriting: components.UpsertUnderwriting$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpsertUnderwriting": "upsertUnderwriting",
  });
});

/** @internal */
export type SaveUnderwritingRequest$Outbound = {
  accountID: string;
  UpsertUnderwriting: components.UpsertUnderwriting$Outbound;
};

/** @internal */
export const SaveUnderwritingRequest$outboundSchema: z.ZodType<
  SaveUnderwritingRequest$Outbound,
  z.ZodTypeDef,
  SaveUnderwritingRequest
> = z.object({
  accountID: z.string(),
  upsertUnderwriting: components.UpsertUnderwriting$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    upsertUnderwriting: "UpsertUnderwriting",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveUnderwritingRequest$ {
  /** @deprecated use `SaveUnderwritingRequest$inboundSchema` instead. */
  export const inboundSchema = SaveUnderwritingRequest$inboundSchema;
  /** @deprecated use `SaveUnderwritingRequest$outboundSchema` instead. */
  export const outboundSchema = SaveUnderwritingRequest$outboundSchema;
  /** @deprecated use `SaveUnderwritingRequest$Outbound` instead. */
  export type Outbound = SaveUnderwritingRequest$Outbound;
}

export function saveUnderwritingRequestToJSON(
  saveUnderwritingRequest: SaveUnderwritingRequest,
): string {
  return JSON.stringify(
    SaveUnderwritingRequest$outboundSchema.parse(saveUnderwritingRequest),
  );
}

export function saveUnderwritingRequestFromJSON(
  jsonString: string,
): SafeParseResult<SaveUnderwritingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveUnderwritingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveUnderwritingRequest' from JSON`,
  );
}

/** @internal */
export const SaveUnderwritingResponse$inboundSchema: z.ZodType<
  SaveUnderwritingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.Underwriting$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type SaveUnderwritingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Underwriting$Outbound;
};

/** @internal */
export const SaveUnderwritingResponse$outboundSchema: z.ZodType<
  SaveUnderwritingResponse$Outbound,
  z.ZodTypeDef,
  SaveUnderwritingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Underwriting$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveUnderwritingResponse$ {
  /** @deprecated use `SaveUnderwritingResponse$inboundSchema` instead. */
  export const inboundSchema = SaveUnderwritingResponse$inboundSchema;
  /** @deprecated use `SaveUnderwritingResponse$outboundSchema` instead. */
  export const outboundSchema = SaveUnderwritingResponse$outboundSchema;
  /** @deprecated use `SaveUnderwritingResponse$Outbound` instead. */
  export type Outbound = SaveUnderwritingResponse$Outbound;
}

export function saveUnderwritingResponseToJSON(
  saveUnderwritingResponse: SaveUnderwritingResponse,
): string {
  return JSON.stringify(
    SaveUnderwritingResponse$outboundSchema.parse(saveUnderwritingResponse),
  );
}

export function saveUnderwritingResponseFromJSON(
  jsonString: string,
): SafeParseResult<SaveUnderwritingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveUnderwritingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveUnderwritingResponse' from JSON`,
  );
}
