/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpsertUnderwritingGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpsertUnderwritingRequest = {
  accountID: string;
  updateUnderwriting: components.UpdateUnderwriting;
};

export type UpsertUnderwritingResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Underwriting;
};

/** @internal */
export const UpsertUnderwritingGlobals$inboundSchema: z.ZodType<
  UpsertUnderwritingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpsertUnderwritingGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpsertUnderwritingGlobals$outboundSchema: z.ZodType<
  UpsertUnderwritingGlobals$Outbound,
  z.ZodTypeDef,
  UpsertUnderwritingGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertUnderwritingGlobals$ {
  /** @deprecated use `UpsertUnderwritingGlobals$inboundSchema` instead. */
  export const inboundSchema = UpsertUnderwritingGlobals$inboundSchema;
  /** @deprecated use `UpsertUnderwritingGlobals$outboundSchema` instead. */
  export const outboundSchema = UpsertUnderwritingGlobals$outboundSchema;
  /** @deprecated use `UpsertUnderwritingGlobals$Outbound` instead. */
  export type Outbound = UpsertUnderwritingGlobals$Outbound;
}

export function upsertUnderwritingGlobalsToJSON(
  upsertUnderwritingGlobals: UpsertUnderwritingGlobals,
): string {
  return JSON.stringify(
    UpsertUnderwritingGlobals$outboundSchema.parse(upsertUnderwritingGlobals),
  );
}

export function upsertUnderwritingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpsertUnderwritingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertUnderwritingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertUnderwritingGlobals' from JSON`,
  );
}

/** @internal */
export const UpsertUnderwritingRequest$inboundSchema: z.ZodType<
  UpsertUnderwritingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  UpdateUnderwriting: components.UpdateUnderwriting$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateUnderwriting": "updateUnderwriting",
  });
});

/** @internal */
export type UpsertUnderwritingRequest$Outbound = {
  accountID: string;
  UpdateUnderwriting: components.UpdateUnderwriting$Outbound;
};

/** @internal */
export const UpsertUnderwritingRequest$outboundSchema: z.ZodType<
  UpsertUnderwritingRequest$Outbound,
  z.ZodTypeDef,
  UpsertUnderwritingRequest
> = z.object({
  accountID: z.string(),
  updateUnderwriting: components.UpdateUnderwriting$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateUnderwriting: "UpdateUnderwriting",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertUnderwritingRequest$ {
  /** @deprecated use `UpsertUnderwritingRequest$inboundSchema` instead. */
  export const inboundSchema = UpsertUnderwritingRequest$inboundSchema;
  /** @deprecated use `UpsertUnderwritingRequest$outboundSchema` instead. */
  export const outboundSchema = UpsertUnderwritingRequest$outboundSchema;
  /** @deprecated use `UpsertUnderwritingRequest$Outbound` instead. */
  export type Outbound = UpsertUnderwritingRequest$Outbound;
}

export function upsertUnderwritingRequestToJSON(
  upsertUnderwritingRequest: UpsertUnderwritingRequest,
): string {
  return JSON.stringify(
    UpsertUnderwritingRequest$outboundSchema.parse(upsertUnderwritingRequest),
  );
}

export function upsertUnderwritingRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpsertUnderwritingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertUnderwritingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertUnderwritingRequest' from JSON`,
  );
}

/** @internal */
export const UpsertUnderwritingResponse$inboundSchema: z.ZodType<
  UpsertUnderwritingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Underwriting$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpsertUnderwritingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Underwriting$Outbound;
};

/** @internal */
export const UpsertUnderwritingResponse$outboundSchema: z.ZodType<
  UpsertUnderwritingResponse$Outbound,
  z.ZodTypeDef,
  UpsertUnderwritingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Underwriting$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertUnderwritingResponse$ {
  /** @deprecated use `UpsertUnderwritingResponse$inboundSchema` instead. */
  export const inboundSchema = UpsertUnderwritingResponse$inboundSchema;
  /** @deprecated use `UpsertUnderwritingResponse$outboundSchema` instead. */
  export const outboundSchema = UpsertUnderwritingResponse$outboundSchema;
  /** @deprecated use `UpsertUnderwritingResponse$Outbound` instead. */
  export type Outbound = UpsertUnderwritingResponse$Outbound;
}

export function upsertUnderwritingResponseToJSON(
  upsertUnderwritingResponse: UpsertUnderwritingResponse,
): string {
  return JSON.stringify(
    UpsertUnderwritingResponse$outboundSchema.parse(upsertUnderwritingResponse),
  );
}

export function upsertUnderwritingResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpsertUnderwritingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertUnderwritingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertUnderwritingResponse' from JSON`,
  );
}
