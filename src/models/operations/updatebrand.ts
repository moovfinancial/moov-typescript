/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateBrandSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateBrandRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  updateBrand: components.UpdateBrand;
};

/** @internal */
export const UpdateBrandSecurity$inboundSchema: z.ZodType<
  UpdateBrandSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateBrandSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateBrandSecurity$outboundSchema: z.ZodType<
  UpdateBrandSecurity$Outbound,
  z.ZodTypeDef,
  UpdateBrandSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBrandSecurity$ {
  /** @deprecated use `UpdateBrandSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateBrandSecurity$inboundSchema;
  /** @deprecated use `UpdateBrandSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateBrandSecurity$outboundSchema;
  /** @deprecated use `UpdateBrandSecurity$Outbound` instead. */
  export type Outbound = UpdateBrandSecurity$Outbound;
}

export function updateBrandSecurityToJSON(
  updateBrandSecurity: UpdateBrandSecurity,
): string {
  return JSON.stringify(
    UpdateBrandSecurity$outboundSchema.parse(updateBrandSecurity),
  );
}

export function updateBrandSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBrandSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBrandSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBrandSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateBrandRequest$inboundSchema: z.ZodType<
  UpdateBrandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  UpdateBrand: components.UpdateBrand$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpdateBrand": "updateBrand",
  });
});

/** @internal */
export type UpdateBrandRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  UpdateBrand: components.UpdateBrand$Outbound;
};

/** @internal */
export const UpdateBrandRequest$outboundSchema: z.ZodType<
  UpdateBrandRequest$Outbound,
  z.ZodTypeDef,
  UpdateBrandRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  updateBrand: components.UpdateBrand$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    updateBrand: "UpdateBrand",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBrandRequest$ {
  /** @deprecated use `UpdateBrandRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBrandRequest$inboundSchema;
  /** @deprecated use `UpdateBrandRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBrandRequest$outboundSchema;
  /** @deprecated use `UpdateBrandRequest$Outbound` instead. */
  export type Outbound = UpdateBrandRequest$Outbound;
}

export function updateBrandRequestToJSON(
  updateBrandRequest: UpdateBrandRequest,
): string {
  return JSON.stringify(
    UpdateBrandRequest$outboundSchema.parse(updateBrandRequest),
  );
}

export function updateBrandRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBrandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBrandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBrandRequest' from JSON`,
  );
}
