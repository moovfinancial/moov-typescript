/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateBrandGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateBrandRequest = {
  accountID: string;
  updateBrand: components.UpdateBrand;
};

export type UpdateBrandResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Brand;
};

/** @internal */
export const UpdateBrandGlobals$inboundSchema: z.ZodType<
  UpdateBrandGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateBrandGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UpdateBrandGlobals$outboundSchema: z.ZodType<
  UpdateBrandGlobals$Outbound,
  z.ZodTypeDef,
  UpdateBrandGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBrandGlobals$ {
  /** @deprecated use `UpdateBrandGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateBrandGlobals$inboundSchema;
  /** @deprecated use `UpdateBrandGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateBrandGlobals$outboundSchema;
  /** @deprecated use `UpdateBrandGlobals$Outbound` instead. */
  export type Outbound = UpdateBrandGlobals$Outbound;
}

export function updateBrandGlobalsToJSON(
  updateBrandGlobals: UpdateBrandGlobals,
): string {
  return JSON.stringify(
    UpdateBrandGlobals$outboundSchema.parse(updateBrandGlobals),
  );
}

export function updateBrandGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBrandGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBrandGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBrandGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateBrandRequest$inboundSchema: z.ZodType<
  UpdateBrandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  UpdateBrand: components.UpdateBrand$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateBrand": "updateBrand",
  });
});

/** @internal */
export type UpdateBrandRequest$Outbound = {
  accountID: string;
  UpdateBrand: components.UpdateBrand$Outbound;
};

/** @internal */
export const UpdateBrandRequest$outboundSchema: z.ZodType<
  UpdateBrandRequest$Outbound,
  z.ZodTypeDef,
  UpdateBrandRequest
> = z.object({
  accountID: z.string(),
  updateBrand: components.UpdateBrand$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateBrand: "UpdateBrand",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBrandRequest$ {
  /** @deprecated use `UpdateBrandRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBrandRequest$inboundSchema;
  /** @deprecated use `UpdateBrandRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBrandRequest$outboundSchema;
  /** @deprecated use `UpdateBrandRequest$Outbound` instead. */
  export type Outbound = UpdateBrandRequest$Outbound;
}

export function updateBrandRequestToJSON(
  updateBrandRequest: UpdateBrandRequest,
): string {
  return JSON.stringify(
    UpdateBrandRequest$outboundSchema.parse(updateBrandRequest),
  );
}

export function updateBrandRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBrandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBrandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBrandRequest' from JSON`,
  );
}

/** @internal */
export const UpdateBrandResponse$inboundSchema: z.ZodType<
  UpdateBrandResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Brand$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateBrandResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Brand$Outbound;
};

/** @internal */
export const UpdateBrandResponse$outboundSchema: z.ZodType<
  UpdateBrandResponse$Outbound,
  z.ZodTypeDef,
  UpdateBrandResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Brand$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBrandResponse$ {
  /** @deprecated use `UpdateBrandResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateBrandResponse$inboundSchema;
  /** @deprecated use `UpdateBrandResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateBrandResponse$outboundSchema;
  /** @deprecated use `UpdateBrandResponse$Outbound` instead. */
  export type Outbound = UpdateBrandResponse$Outbound;
}

export function updateBrandResponseToJSON(
  updateBrandResponse: UpdateBrandResponse,
): string {
  return JSON.stringify(
    UpdateBrandResponse$outboundSchema.parse(updateBrandResponse),
  );
}

export function updateBrandResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBrandResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBrandResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBrandResponse' from JSON`,
  );
}
