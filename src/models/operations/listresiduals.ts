/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResidualsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListResidualsRequest = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  /**
   * Optional date-time to inclusively filter all residuals with a period start after this date-time.
   */
  startDateTime?: string | undefined;
  /**
   * Optional date-time to exclusively filter all residuals with a period end before this date-time.
   */
  endDateTime?: string | undefined;
};

export type ListResidualsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Residual>;
};

/** @internal */
export const ListResidualsGlobals$inboundSchema: z.ZodType<
  ListResidualsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListResidualsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListResidualsGlobals$outboundSchema: z.ZodType<
  ListResidualsGlobals$Outbound,
  z.ZodTypeDef,
  ListResidualsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResidualsGlobals$ {
  /** @deprecated use `ListResidualsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResidualsGlobals$inboundSchema;
  /** @deprecated use `ListResidualsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListResidualsGlobals$outboundSchema;
  /** @deprecated use `ListResidualsGlobals$Outbound` instead. */
  export type Outbound = ListResidualsGlobals$Outbound;
}

export function listResidualsGlobalsToJSON(
  listResidualsGlobals: ListResidualsGlobals,
): string {
  return JSON.stringify(
    ListResidualsGlobals$outboundSchema.parse(listResidualsGlobals),
  );
}

export function listResidualsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResidualsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResidualsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResidualsGlobals' from JSON`,
  );
}

/** @internal */
export const ListResidualsRequest$inboundSchema: z.ZodType<
  ListResidualsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  startDateTime: z.string().optional(),
  endDateTime: z.string().optional(),
});

/** @internal */
export type ListResidualsRequest$Outbound = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  startDateTime?: string | undefined;
  endDateTime?: string | undefined;
};

/** @internal */
export const ListResidualsRequest$outboundSchema: z.ZodType<
  ListResidualsRequest$Outbound,
  z.ZodTypeDef,
  ListResidualsRequest
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  startDateTime: z.string().optional(),
  endDateTime: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResidualsRequest$ {
  /** @deprecated use `ListResidualsRequest$inboundSchema` instead. */
  export const inboundSchema = ListResidualsRequest$inboundSchema;
  /** @deprecated use `ListResidualsRequest$outboundSchema` instead. */
  export const outboundSchema = ListResidualsRequest$outboundSchema;
  /** @deprecated use `ListResidualsRequest$Outbound` instead. */
  export type Outbound = ListResidualsRequest$Outbound;
}

export function listResidualsRequestToJSON(
  listResidualsRequest: ListResidualsRequest,
): string {
  return JSON.stringify(
    ListResidualsRequest$outboundSchema.parse(listResidualsRequest),
  );
}

export function listResidualsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResidualsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResidualsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResidualsRequest' from JSON`,
  );
}

/** @internal */
export const ListResidualsResponse$inboundSchema: z.ZodType<
  ListResidualsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.array(components.Residual$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListResidualsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Residual$Outbound>;
};

/** @internal */
export const ListResidualsResponse$outboundSchema: z.ZodType<
  ListResidualsResponse$Outbound,
  z.ZodTypeDef,
  ListResidualsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Residual$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResidualsResponse$ {
  /** @deprecated use `ListResidualsResponse$inboundSchema` instead. */
  export const inboundSchema = ListResidualsResponse$inboundSchema;
  /** @deprecated use `ListResidualsResponse$outboundSchema` instead. */
  export const outboundSchema = ListResidualsResponse$outboundSchema;
  /** @deprecated use `ListResidualsResponse$Outbound` instead. */
  export type Outbound = ListResidualsResponse$Outbound;
}

export function listResidualsResponseToJSON(
  listResidualsResponse: ListResidualsResponse,
): string {
  return JSON.stringify(
    ListResidualsResponse$outboundSchema.parse(listResidualsResponse),
  );
}

export function listResidualsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListResidualsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResidualsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResidualsResponse' from JSON`,
  );
}
