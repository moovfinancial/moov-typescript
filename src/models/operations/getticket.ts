/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTicketGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetTicketRequest = {
  accountID: string;
  ticketID: string;
};

export type GetTicketResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Ticket;
};

/** @internal */
export const GetTicketGlobals$inboundSchema: z.ZodType<
  GetTicketGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetTicketGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetTicketGlobals$outboundSchema: z.ZodType<
  GetTicketGlobals$Outbound,
  z.ZodTypeDef,
  GetTicketGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTicketGlobals$ {
  /** @deprecated use `GetTicketGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTicketGlobals$inboundSchema;
  /** @deprecated use `GetTicketGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTicketGlobals$outboundSchema;
  /** @deprecated use `GetTicketGlobals$Outbound` instead. */
  export type Outbound = GetTicketGlobals$Outbound;
}

export function getTicketGlobalsToJSON(
  getTicketGlobals: GetTicketGlobals,
): string {
  return JSON.stringify(
    GetTicketGlobals$outboundSchema.parse(getTicketGlobals),
  );
}

export function getTicketGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTicketGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTicketGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTicketGlobals' from JSON`,
  );
}

/** @internal */
export const GetTicketRequest$inboundSchema: z.ZodType<
  GetTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
});

/** @internal */
export type GetTicketRequest$Outbound = {
  accountID: string;
  ticketID: string;
};

/** @internal */
export const GetTicketRequest$outboundSchema: z.ZodType<
  GetTicketRequest$Outbound,
  z.ZodTypeDef,
  GetTicketRequest
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTicketRequest$ {
  /** @deprecated use `GetTicketRequest$inboundSchema` instead. */
  export const inboundSchema = GetTicketRequest$inboundSchema;
  /** @deprecated use `GetTicketRequest$outboundSchema` instead. */
  export const outboundSchema = GetTicketRequest$outboundSchema;
  /** @deprecated use `GetTicketRequest$Outbound` instead. */
  export type Outbound = GetTicketRequest$Outbound;
}

export function getTicketRequestToJSON(
  getTicketRequest: GetTicketRequest,
): string {
  return JSON.stringify(
    GetTicketRequest$outboundSchema.parse(getTicketRequest),
  );
}

export function getTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTicketRequest' from JSON`,
  );
}

/** @internal */
export const GetTicketResponse$inboundSchema: z.ZodType<
  GetTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.Ticket$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetTicketResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Ticket$Outbound;
};

/** @internal */
export const GetTicketResponse$outboundSchema: z.ZodType<
  GetTicketResponse$Outbound,
  z.ZodTypeDef,
  GetTicketResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Ticket$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTicketResponse$ {
  /** @deprecated use `GetTicketResponse$inboundSchema` instead. */
  export const inboundSchema = GetTicketResponse$inboundSchema;
  /** @deprecated use `GetTicketResponse$outboundSchema` instead. */
  export const outboundSchema = GetTicketResponse$outboundSchema;
  /** @deprecated use `GetTicketResponse$Outbound` instead. */
  export type Outbound = GetTicketResponse$Outbound;
}

export function getTicketResponseToJSON(
  getTicketResponse: GetTicketResponse,
): string {
  return JSON.stringify(
    GetTicketResponse$outboundSchema.parse(getTicketResponse),
  );
}

export function getTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTicketResponse' from JSON`,
  );
}
