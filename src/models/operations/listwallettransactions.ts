/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListWalletTransactionsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListWalletTransactionsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  walletID: string;
  skip?: number | undefined;
  count?: number | undefined;
  /**
   * Optional parameter to filter by transaction type.
   */
  transactionType?: components.WalletTransactionType | undefined;
  /**
   * Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction).
   */
  sourceType?: components.WalletTransactionSourceType | undefined;
  /**
   * Optional parameter to filter by source ID.
   */
  sourceID?: string | undefined;
  /**
   * Optional parameter to filter by status (`pending` or `completed`).
   */
  status?: components.WalletTransactionStatus | undefined;
  /**
   * Optional date-time which inclusively filters all transactions created after this date-time.
   */
  createdStartDateTime?: Date | undefined;
  /**
   * Optional date-time which exclusively filters all transactions created before this date-time.
   */
  createdEndDateTime?: Date | undefined;
  /**
   * Optional date-time which inclusively filters all transactions completed after this date-time.
   */
  completedStartDateTime?: Date | undefined;
  /**
   * Optional date-time which exclusively filters all transactions completed before this date-time.
   */
  completedEndDateTime?: Date | undefined;
  /**
   * Optional ID to filter for transactions accrued in a sweep.
   */
  sweepID?: string | undefined;
};

/** @internal */
export const ListWalletTransactionsSecurity$inboundSchema: z.ZodType<
  ListWalletTransactionsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListWalletTransactionsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListWalletTransactionsSecurity$outboundSchema: z.ZodType<
  ListWalletTransactionsSecurity$Outbound,
  z.ZodTypeDef,
  ListWalletTransactionsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWalletTransactionsSecurity$ {
  /** @deprecated use `ListWalletTransactionsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListWalletTransactionsSecurity$inboundSchema;
  /** @deprecated use `ListWalletTransactionsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListWalletTransactionsSecurity$outboundSchema;
  /** @deprecated use `ListWalletTransactionsSecurity$Outbound` instead. */
  export type Outbound = ListWalletTransactionsSecurity$Outbound;
}

export function listWalletTransactionsSecurityToJSON(
  listWalletTransactionsSecurity: ListWalletTransactionsSecurity,
): string {
  return JSON.stringify(
    ListWalletTransactionsSecurity$outboundSchema.parse(
      listWalletTransactionsSecurity,
    ),
  );
}

export function listWalletTransactionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListWalletTransactionsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWalletTransactionsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWalletTransactionsSecurity' from JSON`,
  );
}

/** @internal */
export const ListWalletTransactionsRequest$inboundSchema: z.ZodType<
  ListWalletTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  transactionType: components.WalletTransactionType$inboundSchema.optional(),
  sourceType: components.WalletTransactionSourceType$inboundSchema.optional(),
  sourceID: z.string().optional(),
  status: components.WalletTransactionStatus$inboundSchema.optional(),
  createdStartDateTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdEndDateTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  completedStartDateTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  completedEndDateTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  sweepID: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListWalletTransactionsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  walletID: string;
  skip?: number | undefined;
  count?: number | undefined;
  transactionType?: string | undefined;
  sourceType?: string | undefined;
  sourceID?: string | undefined;
  status?: string | undefined;
  createdStartDateTime?: string | undefined;
  createdEndDateTime?: string | undefined;
  completedStartDateTime?: string | undefined;
  completedEndDateTime?: string | undefined;
  sweepID?: string | undefined;
};

/** @internal */
export const ListWalletTransactionsRequest$outboundSchema: z.ZodType<
  ListWalletTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListWalletTransactionsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  walletID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  transactionType: components.WalletTransactionType$outboundSchema.optional(),
  sourceType: components.WalletTransactionSourceType$outboundSchema.optional(),
  sourceID: z.string().optional(),
  status: components.WalletTransactionStatus$outboundSchema.optional(),
  createdStartDateTime: z.date().transform(v => v.toISOString()).optional(),
  createdEndDateTime: z.date().transform(v => v.toISOString()).optional(),
  completedStartDateTime: z.date().transform(v => v.toISOString()).optional(),
  completedEndDateTime: z.date().transform(v => v.toISOString()).optional(),
  sweepID: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWalletTransactionsRequest$ {
  /** @deprecated use `ListWalletTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListWalletTransactionsRequest$inboundSchema;
  /** @deprecated use `ListWalletTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListWalletTransactionsRequest$outboundSchema;
  /** @deprecated use `ListWalletTransactionsRequest$Outbound` instead. */
  export type Outbound = ListWalletTransactionsRequest$Outbound;
}

export function listWalletTransactionsRequestToJSON(
  listWalletTransactionsRequest: ListWalletTransactionsRequest,
): string {
  return JSON.stringify(
    ListWalletTransactionsRequest$outboundSchema.parse(
      listWalletTransactionsRequest,
    ),
  );
}

export function listWalletTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListWalletTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWalletTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWalletTransactionsRequest' from JSON`,
  );
}
