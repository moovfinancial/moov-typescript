/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InitiateBankAccountVerificationSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type InitiateBankAccountVerificationRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Optional header to wait for certain events, such as the rail response, to occur before returning a response.
   *
   * @remarks
   *
   * When this header is set to `rail-response`, the endpoint will wait for a sent-credit or failed status from the payment rail.
   */
  xWaitFor: components.BankAccountWaitFor;
  accountID: string;
  bankAccountID: string;
};

/** @internal */
export const InitiateBankAccountVerificationSecurity$inboundSchema: z.ZodType<
  InitiateBankAccountVerificationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type InitiateBankAccountVerificationSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const InitiateBankAccountVerificationSecurity$outboundSchema: z.ZodType<
  InitiateBankAccountVerificationSecurity$Outbound,
  z.ZodTypeDef,
  InitiateBankAccountVerificationSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateBankAccountVerificationSecurity$ {
  /** @deprecated use `InitiateBankAccountVerificationSecurity$inboundSchema` instead. */
  export const inboundSchema =
    InitiateBankAccountVerificationSecurity$inboundSchema;
  /** @deprecated use `InitiateBankAccountVerificationSecurity$outboundSchema` instead. */
  export const outboundSchema =
    InitiateBankAccountVerificationSecurity$outboundSchema;
  /** @deprecated use `InitiateBankAccountVerificationSecurity$Outbound` instead. */
  export type Outbound = InitiateBankAccountVerificationSecurity$Outbound;
}

export function initiateBankAccountVerificationSecurityToJSON(
  initiateBankAccountVerificationSecurity:
    InitiateBankAccountVerificationSecurity,
): string {
  return JSON.stringify(
    InitiateBankAccountVerificationSecurity$outboundSchema.parse(
      initiateBankAccountVerificationSecurity,
    ),
  );
}

export function initiateBankAccountVerificationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  InitiateBankAccountVerificationSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InitiateBankAccountVerificationSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InitiateBankAccountVerificationSecurity' from JSON`,
  );
}

/** @internal */
export const InitiateBankAccountVerificationRequest$inboundSchema: z.ZodType<
  InitiateBankAccountVerificationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  "x-wait-for": components.BankAccountWaitFor$inboundSchema,
  accountID: z.string(),
  bankAccountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "x-wait-for": "xWaitFor",
  });
});

/** @internal */
export type InitiateBankAccountVerificationRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  "x-wait-for": string;
  accountID: string;
  bankAccountID: string;
};

/** @internal */
export const InitiateBankAccountVerificationRequest$outboundSchema: z.ZodType<
  InitiateBankAccountVerificationRequest$Outbound,
  z.ZodTypeDef,
  InitiateBankAccountVerificationRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  xWaitFor: components.BankAccountWaitFor$outboundSchema,
  accountID: z.string(),
  bankAccountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    xWaitFor: "x-wait-for",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateBankAccountVerificationRequest$ {
  /** @deprecated use `InitiateBankAccountVerificationRequest$inboundSchema` instead. */
  export const inboundSchema =
    InitiateBankAccountVerificationRequest$inboundSchema;
  /** @deprecated use `InitiateBankAccountVerificationRequest$outboundSchema` instead. */
  export const outboundSchema =
    InitiateBankAccountVerificationRequest$outboundSchema;
  /** @deprecated use `InitiateBankAccountVerificationRequest$Outbound` instead. */
  export type Outbound = InitiateBankAccountVerificationRequest$Outbound;
}

export function initiateBankAccountVerificationRequestToJSON(
  initiateBankAccountVerificationRequest:
    InitiateBankAccountVerificationRequest,
): string {
  return JSON.stringify(
    InitiateBankAccountVerificationRequest$outboundSchema.parse(
      initiateBankAccountVerificationRequest,
    ),
  );
}

export function initiateBankAccountVerificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<InitiateBankAccountVerificationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InitiateBankAccountVerificationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateBankAccountVerificationRequest' from JSON`,
  );
}
