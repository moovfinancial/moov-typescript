/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMerchantProcessingAgreementGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetMerchantProcessingAgreementRequest = {
  accountID: string;
};

export type GetMerchantProcessingAgreementResponse = {
  headers: { [k: string]: Array<string> };
  result: ReadableStream<Uint8Array>;
};

/** @internal */
export const GetMerchantProcessingAgreementGlobals$inboundSchema: z.ZodType<
  GetMerchantProcessingAgreementGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetMerchantProcessingAgreementGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetMerchantProcessingAgreementGlobals$outboundSchema: z.ZodType<
  GetMerchantProcessingAgreementGlobals$Outbound,
  z.ZodTypeDef,
  GetMerchantProcessingAgreementGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMerchantProcessingAgreementGlobals$ {
  /** @deprecated use `GetMerchantProcessingAgreementGlobals$inboundSchema` instead. */
  export const inboundSchema =
    GetMerchantProcessingAgreementGlobals$inboundSchema;
  /** @deprecated use `GetMerchantProcessingAgreementGlobals$outboundSchema` instead. */
  export const outboundSchema =
    GetMerchantProcessingAgreementGlobals$outboundSchema;
  /** @deprecated use `GetMerchantProcessingAgreementGlobals$Outbound` instead. */
  export type Outbound = GetMerchantProcessingAgreementGlobals$Outbound;
}

export function getMerchantProcessingAgreementGlobalsToJSON(
  getMerchantProcessingAgreementGlobals: GetMerchantProcessingAgreementGlobals,
): string {
  return JSON.stringify(
    GetMerchantProcessingAgreementGlobals$outboundSchema.parse(
      getMerchantProcessingAgreementGlobals,
    ),
  );
}

export function getMerchantProcessingAgreementGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetMerchantProcessingAgreementGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetMerchantProcessingAgreementGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMerchantProcessingAgreementGlobals' from JSON`,
  );
}

/** @internal */
export const GetMerchantProcessingAgreementRequest$inboundSchema: z.ZodType<
  GetMerchantProcessingAgreementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type GetMerchantProcessingAgreementRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const GetMerchantProcessingAgreementRequest$outboundSchema: z.ZodType<
  GetMerchantProcessingAgreementRequest$Outbound,
  z.ZodTypeDef,
  GetMerchantProcessingAgreementRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMerchantProcessingAgreementRequest$ {
  /** @deprecated use `GetMerchantProcessingAgreementRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetMerchantProcessingAgreementRequest$inboundSchema;
  /** @deprecated use `GetMerchantProcessingAgreementRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetMerchantProcessingAgreementRequest$outboundSchema;
  /** @deprecated use `GetMerchantProcessingAgreementRequest$Outbound` instead. */
  export type Outbound = GetMerchantProcessingAgreementRequest$Outbound;
}

export function getMerchantProcessingAgreementRequestToJSON(
  getMerchantProcessingAgreementRequest: GetMerchantProcessingAgreementRequest,
): string {
  return JSON.stringify(
    GetMerchantProcessingAgreementRequest$outboundSchema.parse(
      getMerchantProcessingAgreementRequest,
    ),
  );
}

export function getMerchantProcessingAgreementRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMerchantProcessingAgreementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetMerchantProcessingAgreementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMerchantProcessingAgreementRequest' from JSON`,
  );
}

/** @internal */
export const GetMerchantProcessingAgreementResponse$inboundSchema: z.ZodType<
  GetMerchantProcessingAgreementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetMerchantProcessingAgreementResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ReadableStream<Uint8Array>;
};

/** @internal */
export const GetMerchantProcessingAgreementResponse$outboundSchema: z.ZodType<
  GetMerchantProcessingAgreementResponse$Outbound,
  z.ZodTypeDef,
  GetMerchantProcessingAgreementResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMerchantProcessingAgreementResponse$ {
  /** @deprecated use `GetMerchantProcessingAgreementResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetMerchantProcessingAgreementResponse$inboundSchema;
  /** @deprecated use `GetMerchantProcessingAgreementResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetMerchantProcessingAgreementResponse$outboundSchema;
  /** @deprecated use `GetMerchantProcessingAgreementResponse$Outbound` instead. */
  export type Outbound = GetMerchantProcessingAgreementResponse$Outbound;
}

export function getMerchantProcessingAgreementResponseToJSON(
  getMerchantProcessingAgreementResponse:
    GetMerchantProcessingAgreementResponse,
): string {
  return JSON.stringify(
    GetMerchantProcessingAgreementResponse$outboundSchema.parse(
      getMerchantProcessingAgreementResponse,
    ),
  );
}

export function getMerchantProcessingAgreementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMerchantProcessingAgreementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetMerchantProcessingAgreementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMerchantProcessingAgreementResponse' from JSON`,
  );
}
