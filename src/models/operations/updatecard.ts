/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCardSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type UpdateCardRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  cardID: string;
  updateCard: components.UpdateCard;
};

/** @internal */
export const UpdateCardSecurity$inboundSchema: z.ZodType<
  UpdateCardSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type UpdateCardSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const UpdateCardSecurity$outboundSchema: z.ZodType<
  UpdateCardSecurity$Outbound,
  z.ZodTypeDef,
  UpdateCardSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCardSecurity$ {
  /** @deprecated use `UpdateCardSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateCardSecurity$inboundSchema;
  /** @deprecated use `UpdateCardSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateCardSecurity$outboundSchema;
  /** @deprecated use `UpdateCardSecurity$Outbound` instead. */
  export type Outbound = UpdateCardSecurity$Outbound;
}

export function updateCardSecurityToJSON(
  updateCardSecurity: UpdateCardSecurity,
): string {
  return JSON.stringify(
    UpdateCardSecurity$outboundSchema.parse(updateCardSecurity),
  );
}

export function updateCardSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCardSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCardSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCardSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateCardRequest$inboundSchema: z.ZodType<
  UpdateCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  cardID: z.string(),
  UpdateCard: components.UpdateCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "UpdateCard": "updateCard",
  });
});

/** @internal */
export type UpdateCardRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  cardID: string;
  UpdateCard: components.UpdateCard$Outbound;
};

/** @internal */
export const UpdateCardRequest$outboundSchema: z.ZodType<
  UpdateCardRequest$Outbound,
  z.ZodTypeDef,
  UpdateCardRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  cardID: z.string(),
  updateCard: components.UpdateCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    updateCard: "UpdateCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCardRequest$ {
  /** @deprecated use `UpdateCardRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCardRequest$inboundSchema;
  /** @deprecated use `UpdateCardRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCardRequest$outboundSchema;
  /** @deprecated use `UpdateCardRequest$Outbound` instead. */
  export type Outbound = UpdateCardRequest$Outbound;
}

export function updateCardRequestToJSON(
  updateCardRequest: UpdateCardRequest,
): string {
  return JSON.stringify(
    UpdateCardRequest$outboundSchema.parse(updateCardRequest),
  );
}

export function updateCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCardRequest' from JSON`,
  );
}
