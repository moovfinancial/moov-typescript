/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCardGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpdateCardRequest = {
  accountID: string;
  cardID: string;
  updateCard: components.UpdateCard;
};

export type UpdateCardResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Card;
};

/** @internal */
export const UpdateCardGlobals$inboundSchema: z.ZodType<
  UpdateCardGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UpdateCardGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UpdateCardGlobals$outboundSchema: z.ZodType<
  UpdateCardGlobals$Outbound,
  z.ZodTypeDef,
  UpdateCardGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCardGlobals$ {
  /** @deprecated use `UpdateCardGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateCardGlobals$inboundSchema;
  /** @deprecated use `UpdateCardGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateCardGlobals$outboundSchema;
  /** @deprecated use `UpdateCardGlobals$Outbound` instead. */
  export type Outbound = UpdateCardGlobals$Outbound;
}

export function updateCardGlobalsToJSON(
  updateCardGlobals: UpdateCardGlobals,
): string {
  return JSON.stringify(
    UpdateCardGlobals$outboundSchema.parse(updateCardGlobals),
  );
}

export function updateCardGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCardGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCardGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCardGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateCardRequest$inboundSchema: z.ZodType<
  UpdateCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  cardID: z.string(),
  UpdateCard: components.UpdateCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateCard": "updateCard",
  });
});

/** @internal */
export type UpdateCardRequest$Outbound = {
  accountID: string;
  cardID: string;
  UpdateCard: components.UpdateCard$Outbound;
};

/** @internal */
export const UpdateCardRequest$outboundSchema: z.ZodType<
  UpdateCardRequest$Outbound,
  z.ZodTypeDef,
  UpdateCardRequest
> = z.object({
  accountID: z.string(),
  cardID: z.string(),
  updateCard: components.UpdateCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateCard: "UpdateCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCardRequest$ {
  /** @deprecated use `UpdateCardRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCardRequest$inboundSchema;
  /** @deprecated use `UpdateCardRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCardRequest$outboundSchema;
  /** @deprecated use `UpdateCardRequest$Outbound` instead. */
  export type Outbound = UpdateCardRequest$Outbound;
}

export function updateCardRequestToJSON(
  updateCardRequest: UpdateCardRequest,
): string {
  return JSON.stringify(
    UpdateCardRequest$outboundSchema.parse(updateCardRequest),
  );
}

export function updateCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCardRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCardResponse$inboundSchema: z.ZodType<
  UpdateCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Card$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateCardResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Card$Outbound;
};

/** @internal */
export const UpdateCardResponse$outboundSchema: z.ZodType<
  UpdateCardResponse$Outbound,
  z.ZodTypeDef,
  UpdateCardResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Card$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCardResponse$ {
  /** @deprecated use `UpdateCardResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCardResponse$inboundSchema;
  /** @deprecated use `UpdateCardResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCardResponse$outboundSchema;
  /** @deprecated use `UpdateCardResponse$Outbound` instead. */
  export type Outbound = UpdateCardResponse$Outbound;
}

export function updateCardResponseToJSON(
  updateCardResponse: UpdateCardResponse,
): string {
  return JSON.stringify(
    UpdateCardResponse$outboundSchema.parse(updateCardResponse),
  );
}

export function updateCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCardResponse' from JSON`,
  );
}
