/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetImageMetadataGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetImageMetadataRequest = {
  accountID: string;
  imageID: string;
};

export type GetImageMetadataResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ImageMetadata;
};

/** @internal */
export const GetImageMetadataGlobals$inboundSchema: z.ZodType<
  GetImageMetadataGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetImageMetadataGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetImageMetadataGlobals$outboundSchema: z.ZodType<
  GetImageMetadataGlobals$Outbound,
  z.ZodTypeDef,
  GetImageMetadataGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageMetadataGlobals$ {
  /** @deprecated use `GetImageMetadataGlobals$inboundSchema` instead. */
  export const inboundSchema = GetImageMetadataGlobals$inboundSchema;
  /** @deprecated use `GetImageMetadataGlobals$outboundSchema` instead. */
  export const outboundSchema = GetImageMetadataGlobals$outboundSchema;
  /** @deprecated use `GetImageMetadataGlobals$Outbound` instead. */
  export type Outbound = GetImageMetadataGlobals$Outbound;
}

export function getImageMetadataGlobalsToJSON(
  getImageMetadataGlobals: GetImageMetadataGlobals,
): string {
  return JSON.stringify(
    GetImageMetadataGlobals$outboundSchema.parse(getImageMetadataGlobals),
  );
}

export function getImageMetadataGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetImageMetadataGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImageMetadataGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImageMetadataGlobals' from JSON`,
  );
}

/** @internal */
export const GetImageMetadataRequest$inboundSchema: z.ZodType<
  GetImageMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
});

/** @internal */
export type GetImageMetadataRequest$Outbound = {
  accountID: string;
  imageID: string;
};

/** @internal */
export const GetImageMetadataRequest$outboundSchema: z.ZodType<
  GetImageMetadataRequest$Outbound,
  z.ZodTypeDef,
  GetImageMetadataRequest
> = z.object({
  accountID: z.string(),
  imageID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageMetadataRequest$ {
  /** @deprecated use `GetImageMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = GetImageMetadataRequest$inboundSchema;
  /** @deprecated use `GetImageMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = GetImageMetadataRequest$outboundSchema;
  /** @deprecated use `GetImageMetadataRequest$Outbound` instead. */
  export type Outbound = GetImageMetadataRequest$Outbound;
}

export function getImageMetadataRequestToJSON(
  getImageMetadataRequest: GetImageMetadataRequest,
): string {
  return JSON.stringify(
    GetImageMetadataRequest$outboundSchema.parse(getImageMetadataRequest),
  );
}

export function getImageMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetImageMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImageMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImageMetadataRequest' from JSON`,
  );
}

/** @internal */
export const GetImageMetadataResponse$inboundSchema: z.ZodType<
  GetImageMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ImageMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetImageMetadataResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ImageMetadata$Outbound;
};

/** @internal */
export const GetImageMetadataResponse$outboundSchema: z.ZodType<
  GetImageMetadataResponse$Outbound,
  z.ZodTypeDef,
  GetImageMetadataResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ImageMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageMetadataResponse$ {
  /** @deprecated use `GetImageMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = GetImageMetadataResponse$inboundSchema;
  /** @deprecated use `GetImageMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = GetImageMetadataResponse$outboundSchema;
  /** @deprecated use `GetImageMetadataResponse$Outbound` instead. */
  export type Outbound = GetImageMetadataResponse$Outbound;
}

export function getImageMetadataResponseToJSON(
  getImageMetadataResponse: GetImageMetadataResponse,
): string {
  return JSON.stringify(
    GetImageMetadataResponse$outboundSchema.parse(getImageMetadataResponse),
  );
}

export function getImageMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetImageMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImageMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImageMetadataResponse' from JSON`,
  );
}
