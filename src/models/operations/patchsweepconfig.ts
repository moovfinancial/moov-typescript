/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchSweepConfigSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type PatchSweepConfigRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  sweepConfigID: string;
  patchSweepConfig: components.PatchSweepConfig;
};

/** @internal */
export const PatchSweepConfigSecurity$inboundSchema: z.ZodType<
  PatchSweepConfigSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type PatchSweepConfigSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const PatchSweepConfigSecurity$outboundSchema: z.ZodType<
  PatchSweepConfigSecurity$Outbound,
  z.ZodTypeDef,
  PatchSweepConfigSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSweepConfigSecurity$ {
  /** @deprecated use `PatchSweepConfigSecurity$inboundSchema` instead. */
  export const inboundSchema = PatchSweepConfigSecurity$inboundSchema;
  /** @deprecated use `PatchSweepConfigSecurity$outboundSchema` instead. */
  export const outboundSchema = PatchSweepConfigSecurity$outboundSchema;
  /** @deprecated use `PatchSweepConfigSecurity$Outbound` instead. */
  export type Outbound = PatchSweepConfigSecurity$Outbound;
}

export function patchSweepConfigSecurityToJSON(
  patchSweepConfigSecurity: PatchSweepConfigSecurity,
): string {
  return JSON.stringify(
    PatchSweepConfigSecurity$outboundSchema.parse(patchSweepConfigSecurity),
  );
}

export function patchSweepConfigSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PatchSweepConfigSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchSweepConfigSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSweepConfigSecurity' from JSON`,
  );
}

/** @internal */
export const PatchSweepConfigRequest$inboundSchema: z.ZodType<
  PatchSweepConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  sweepConfigID: z.string(),
  PatchSweepConfig: components.PatchSweepConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "PatchSweepConfig": "patchSweepConfig",
  });
});

/** @internal */
export type PatchSweepConfigRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  sweepConfigID: string;
  PatchSweepConfig: components.PatchSweepConfig$Outbound;
};

/** @internal */
export const PatchSweepConfigRequest$outboundSchema: z.ZodType<
  PatchSweepConfigRequest$Outbound,
  z.ZodTypeDef,
  PatchSweepConfigRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  sweepConfigID: z.string(),
  patchSweepConfig: components.PatchSweepConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    patchSweepConfig: "PatchSweepConfig",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSweepConfigRequest$ {
  /** @deprecated use `PatchSweepConfigRequest$inboundSchema` instead. */
  export const inboundSchema = PatchSweepConfigRequest$inboundSchema;
  /** @deprecated use `PatchSweepConfigRequest$outboundSchema` instead. */
  export const outboundSchema = PatchSweepConfigRequest$outboundSchema;
  /** @deprecated use `PatchSweepConfigRequest$Outbound` instead. */
  export type Outbound = PatchSweepConfigRequest$Outbound;
}

export function patchSweepConfigRequestToJSON(
  patchSweepConfigRequest: PatchSweepConfigRequest,
): string {
  return JSON.stringify(
    PatchSweepConfigRequest$outboundSchema.parse(patchSweepConfigRequest),
  );
}

export function patchSweepConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchSweepConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchSweepConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSweepConfigRequest' from JSON`,
  );
}
