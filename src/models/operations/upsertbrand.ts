/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpsertBrandGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UpsertBrandRequest = {
  accountID: string;
  brandProperties: components.BrandProperties;
};

export type UpsertBrandResponse = {
  headers: { [k: string]: Array<string> };
  result: components.BrandProperties;
};

/** @internal */
export const UpsertBrandGlobals$inboundSchema: z.ZodType<
  UpsertBrandGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type UpsertBrandGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const UpsertBrandGlobals$outboundSchema: z.ZodType<
  UpsertBrandGlobals$Outbound,
  z.ZodTypeDef,
  UpsertBrandGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertBrandGlobals$ {
  /** @deprecated use `UpsertBrandGlobals$inboundSchema` instead. */
  export const inboundSchema = UpsertBrandGlobals$inboundSchema;
  /** @deprecated use `UpsertBrandGlobals$outboundSchema` instead. */
  export const outboundSchema = UpsertBrandGlobals$outboundSchema;
  /** @deprecated use `UpsertBrandGlobals$Outbound` instead. */
  export type Outbound = UpsertBrandGlobals$Outbound;
}

export function upsertBrandGlobalsToJSON(
  upsertBrandGlobals: UpsertBrandGlobals,
): string {
  return JSON.stringify(
    UpsertBrandGlobals$outboundSchema.parse(upsertBrandGlobals),
  );
}

export function upsertBrandGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpsertBrandGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertBrandGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertBrandGlobals' from JSON`,
  );
}

/** @internal */
export const UpsertBrandRequest$inboundSchema: z.ZodType<
  UpsertBrandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  BrandProperties: components.BrandProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "BrandProperties": "brandProperties",
  });
});

/** @internal */
export type UpsertBrandRequest$Outbound = {
  accountID: string;
  BrandProperties: components.BrandProperties$Outbound;
};

/** @internal */
export const UpsertBrandRequest$outboundSchema: z.ZodType<
  UpsertBrandRequest$Outbound,
  z.ZodTypeDef,
  UpsertBrandRequest
> = z.object({
  accountID: z.string(),
  brandProperties: components.BrandProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    brandProperties: "BrandProperties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertBrandRequest$ {
  /** @deprecated use `UpsertBrandRequest$inboundSchema` instead. */
  export const inboundSchema = UpsertBrandRequest$inboundSchema;
  /** @deprecated use `UpsertBrandRequest$outboundSchema` instead. */
  export const outboundSchema = UpsertBrandRequest$outboundSchema;
  /** @deprecated use `UpsertBrandRequest$Outbound` instead. */
  export type Outbound = UpsertBrandRequest$Outbound;
}

export function upsertBrandRequestToJSON(
  upsertBrandRequest: UpsertBrandRequest,
): string {
  return JSON.stringify(
    UpsertBrandRequest$outboundSchema.parse(upsertBrandRequest),
  );
}

export function upsertBrandRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpsertBrandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertBrandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertBrandRequest' from JSON`,
  );
}

/** @internal */
export const UpsertBrandResponse$inboundSchema: z.ZodType<
  UpsertBrandResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.BrandProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpsertBrandResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.BrandProperties$Outbound;
};

/** @internal */
export const UpsertBrandResponse$outboundSchema: z.ZodType<
  UpsertBrandResponse$Outbound,
  z.ZodTypeDef,
  UpsertBrandResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.BrandProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertBrandResponse$ {
  /** @deprecated use `UpsertBrandResponse$inboundSchema` instead. */
  export const inboundSchema = UpsertBrandResponse$inboundSchema;
  /** @deprecated use `UpsertBrandResponse$outboundSchema` instead. */
  export const outboundSchema = UpsertBrandResponse$outboundSchema;
  /** @deprecated use `UpsertBrandResponse$Outbound` instead. */
  export type Outbound = UpsertBrandResponse$Outbound;
}

export function upsertBrandResponseToJSON(
  upsertBrandResponse: UpsertBrandResponse,
): string {
  return JSON.stringify(
    UpsertBrandResponse$outboundSchema.parse(upsertBrandResponse),
  );
}

export function upsertBrandResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpsertBrandResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertBrandResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertBrandResponse' from JSON`,
  );
}
