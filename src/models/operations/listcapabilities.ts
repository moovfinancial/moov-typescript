/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCapabilitiesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListCapabilitiesRequest = {
  accountID: string;
};

export type ListCapabilitiesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Capability>;
};

/** @internal */
export const ListCapabilitiesGlobals$inboundSchema: z.ZodType<
  ListCapabilitiesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListCapabilitiesGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListCapabilitiesGlobals$outboundSchema: z.ZodType<
  ListCapabilitiesGlobals$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesGlobals$ {
  /** @deprecated use `ListCapabilitiesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesGlobals$inboundSchema;
  /** @deprecated use `ListCapabilitiesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesGlobals$outboundSchema;
  /** @deprecated use `ListCapabilitiesGlobals$Outbound` instead. */
  export type Outbound = ListCapabilitiesGlobals$Outbound;
}

export function listCapabilitiesGlobalsToJSON(
  listCapabilitiesGlobals: ListCapabilitiesGlobals,
): string {
  return JSON.stringify(
    ListCapabilitiesGlobals$outboundSchema.parse(listCapabilitiesGlobals),
  );
}

export function listCapabilitiesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesGlobals' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesRequest$inboundSchema: z.ZodType<
  ListCapabilitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type ListCapabilitiesRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const ListCapabilitiesRequest$outboundSchema: z.ZodType<
  ListCapabilitiesRequest$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesRequest$ {
  /** @deprecated use `ListCapabilitiesRequest$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesRequest$inboundSchema;
  /** @deprecated use `ListCapabilitiesRequest$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesRequest$outboundSchema;
  /** @deprecated use `ListCapabilitiesRequest$Outbound` instead. */
  export type Outbound = ListCapabilitiesRequest$Outbound;
}

export function listCapabilitiesRequestToJSON(
  listCapabilitiesRequest: ListCapabilitiesRequest,
): string {
  return JSON.stringify(
    ListCapabilitiesRequest$outboundSchema.parse(listCapabilitiesRequest),
  );
}

export function listCapabilitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesRequest' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesResponse$inboundSchema: z.ZodType<
  ListCapabilitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Capability$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListCapabilitiesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Capability$Outbound>;
};

/** @internal */
export const ListCapabilitiesResponse$outboundSchema: z.ZodType<
  ListCapabilitiesResponse$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Capability$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesResponse$ {
  /** @deprecated use `ListCapabilitiesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesResponse$inboundSchema;
  /** @deprecated use `ListCapabilitiesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesResponse$outboundSchema;
  /** @deprecated use `ListCapabilitiesResponse$Outbound` instead. */
  export type Outbound = ListCapabilitiesResponse$Outbound;
}

export function listCapabilitiesResponseToJSON(
  listCapabilitiesResponse: ListCapabilitiesResponse,
): string {
  return JSON.stringify(
    ListCapabilitiesResponse$outboundSchema.parse(listCapabilitiesResponse),
  );
}

export function listCapabilitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesResponse' from JSON`,
  );
}
