/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWalletGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetWalletRequest = {
  accountID: string;
  walletID: string;
};

export type GetWalletResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Wallet;
};

/** @internal */
export const GetWalletGlobals$inboundSchema: z.ZodType<
  GetWalletGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetWalletGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetWalletGlobals$outboundSchema: z.ZodType<
  GetWalletGlobals$Outbound,
  z.ZodTypeDef,
  GetWalletGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletGlobals$ {
  /** @deprecated use `GetWalletGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWalletGlobals$inboundSchema;
  /** @deprecated use `GetWalletGlobals$outboundSchema` instead. */
  export const outboundSchema = GetWalletGlobals$outboundSchema;
  /** @deprecated use `GetWalletGlobals$Outbound` instead. */
  export type Outbound = GetWalletGlobals$Outbound;
}

export function getWalletGlobalsToJSON(
  getWalletGlobals: GetWalletGlobals,
): string {
  return JSON.stringify(
    GetWalletGlobals$outboundSchema.parse(getWalletGlobals),
  );
}

export function getWalletGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletGlobals' from JSON`,
  );
}

/** @internal */
export const GetWalletRequest$inboundSchema: z.ZodType<
  GetWalletRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
});

/** @internal */
export type GetWalletRequest$Outbound = {
  accountID: string;
  walletID: string;
};

/** @internal */
export const GetWalletRequest$outboundSchema: z.ZodType<
  GetWalletRequest$Outbound,
  z.ZodTypeDef,
  GetWalletRequest
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletRequest$ {
  /** @deprecated use `GetWalletRequest$inboundSchema` instead. */
  export const inboundSchema = GetWalletRequest$inboundSchema;
  /** @deprecated use `GetWalletRequest$outboundSchema` instead. */
  export const outboundSchema = GetWalletRequest$outboundSchema;
  /** @deprecated use `GetWalletRequest$Outbound` instead. */
  export type Outbound = GetWalletRequest$Outbound;
}

export function getWalletRequestToJSON(
  getWalletRequest: GetWalletRequest,
): string {
  return JSON.stringify(
    GetWalletRequest$outboundSchema.parse(getWalletRequest),
  );
}

export function getWalletRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletRequest' from JSON`,
  );
}

/** @internal */
export const GetWalletResponse$inboundSchema: z.ZodType<
  GetWalletResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Wallet$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetWalletResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Wallet$Outbound;
};

/** @internal */
export const GetWalletResponse$outboundSchema: z.ZodType<
  GetWalletResponse$Outbound,
  z.ZodTypeDef,
  GetWalletResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Wallet$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletResponse$ {
  /** @deprecated use `GetWalletResponse$inboundSchema` instead. */
  export const inboundSchema = GetWalletResponse$inboundSchema;
  /** @deprecated use `GetWalletResponse$outboundSchema` instead. */
  export const outboundSchema = GetWalletResponse$outboundSchema;
  /** @deprecated use `GetWalletResponse$Outbound` instead. */
  export type Outbound = GetWalletResponse$Outbound;
}

export function getWalletResponseToJSON(
  getWalletResponse: GetWalletResponse,
): string {
  return JSON.stringify(
    GetWalletResponse$outboundSchema.parse(getWalletResponse),
  );
}

export function getWalletResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletResponse' from JSON`,
  );
}
