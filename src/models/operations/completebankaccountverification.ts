/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompleteBankAccountVerificationSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CompleteBankAccountVerificationRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  bankAccountID: string;
  completeBankAccountVerification: components.CompleteBankAccountVerification;
};

/** @internal */
export const CompleteBankAccountVerificationSecurity$inboundSchema: z.ZodType<
  CompleteBankAccountVerificationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CompleteBankAccountVerificationSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CompleteBankAccountVerificationSecurity$outboundSchema: z.ZodType<
  CompleteBankAccountVerificationSecurity$Outbound,
  z.ZodTypeDef,
  CompleteBankAccountVerificationSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteBankAccountVerificationSecurity$ {
  /** @deprecated use `CompleteBankAccountVerificationSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CompleteBankAccountVerificationSecurity$inboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CompleteBankAccountVerificationSecurity$outboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationSecurity$Outbound` instead. */
  export type Outbound = CompleteBankAccountVerificationSecurity$Outbound;
}

export function completeBankAccountVerificationSecurityToJSON(
  completeBankAccountVerificationSecurity:
    CompleteBankAccountVerificationSecurity,
): string {
  return JSON.stringify(
    CompleteBankAccountVerificationSecurity$outboundSchema.parse(
      completeBankAccountVerificationSecurity,
    ),
  );
}

export function completeBankAccountVerificationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CompleteBankAccountVerificationSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteBankAccountVerificationSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompleteBankAccountVerificationSecurity' from JSON`,
  );
}

/** @internal */
export const CompleteBankAccountVerificationRequest$inboundSchema: z.ZodType<
  CompleteBankAccountVerificationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  bankAccountID: z.string(),
  CompleteBankAccountVerification:
    components.CompleteBankAccountVerification$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CompleteBankAccountVerification": "completeBankAccountVerification",
  });
});

/** @internal */
export type CompleteBankAccountVerificationRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  bankAccountID: string;
  CompleteBankAccountVerification:
    components.CompleteBankAccountVerification$Outbound;
};

/** @internal */
export const CompleteBankAccountVerificationRequest$outboundSchema: z.ZodType<
  CompleteBankAccountVerificationRequest$Outbound,
  z.ZodTypeDef,
  CompleteBankAccountVerificationRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  bankAccountID: z.string(),
  completeBankAccountVerification:
    components.CompleteBankAccountVerification$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    completeBankAccountVerification: "CompleteBankAccountVerification",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteBankAccountVerificationRequest$ {
  /** @deprecated use `CompleteBankAccountVerificationRequest$inboundSchema` instead. */
  export const inboundSchema =
    CompleteBankAccountVerificationRequest$inboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationRequest$outboundSchema` instead. */
  export const outboundSchema =
    CompleteBankAccountVerificationRequest$outboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationRequest$Outbound` instead. */
  export type Outbound = CompleteBankAccountVerificationRequest$Outbound;
}

export function completeBankAccountVerificationRequestToJSON(
  completeBankAccountVerificationRequest:
    CompleteBankAccountVerificationRequest,
): string {
  return JSON.stringify(
    CompleteBankAccountVerificationRequest$outboundSchema.parse(
      completeBankAccountVerificationRequest,
    ),
  );
}

export function completeBankAccountVerificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompleteBankAccountVerificationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteBankAccountVerificationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteBankAccountVerificationRequest' from JSON`,
  );
}
