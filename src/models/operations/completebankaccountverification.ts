/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompleteBankAccountVerificationGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CompleteBankAccountVerificationRequest = {
  accountID: string;
  bankAccountID: string;
  completeBankAccountVerification: components.CompleteBankAccountVerification;
};

export type CompleteBankAccountVerificationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.BankAccountVerification;
};

/** @internal */
export const CompleteBankAccountVerificationGlobals$inboundSchema: z.ZodType<
  CompleteBankAccountVerificationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CompleteBankAccountVerificationGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CompleteBankAccountVerificationGlobals$outboundSchema: z.ZodType<
  CompleteBankAccountVerificationGlobals$Outbound,
  z.ZodTypeDef,
  CompleteBankAccountVerificationGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteBankAccountVerificationGlobals$ {
  /** @deprecated use `CompleteBankAccountVerificationGlobals$inboundSchema` instead. */
  export const inboundSchema =
    CompleteBankAccountVerificationGlobals$inboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationGlobals$outboundSchema` instead. */
  export const outboundSchema =
    CompleteBankAccountVerificationGlobals$outboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationGlobals$Outbound` instead. */
  export type Outbound = CompleteBankAccountVerificationGlobals$Outbound;
}

export function completeBankAccountVerificationGlobalsToJSON(
  completeBankAccountVerificationGlobals:
    CompleteBankAccountVerificationGlobals,
): string {
  return JSON.stringify(
    CompleteBankAccountVerificationGlobals$outboundSchema.parse(
      completeBankAccountVerificationGlobals,
    ),
  );
}

export function completeBankAccountVerificationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CompleteBankAccountVerificationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteBankAccountVerificationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteBankAccountVerificationGlobals' from JSON`,
  );
}

/** @internal */
export const CompleteBankAccountVerificationRequest$inboundSchema: z.ZodType<
  CompleteBankAccountVerificationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
  CompleteBankAccountVerification:
    components.CompleteBankAccountVerification$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CompleteBankAccountVerification": "completeBankAccountVerification",
  });
});

/** @internal */
export type CompleteBankAccountVerificationRequest$Outbound = {
  accountID: string;
  bankAccountID: string;
  CompleteBankAccountVerification:
    components.CompleteBankAccountVerification$Outbound;
};

/** @internal */
export const CompleteBankAccountVerificationRequest$outboundSchema: z.ZodType<
  CompleteBankAccountVerificationRequest$Outbound,
  z.ZodTypeDef,
  CompleteBankAccountVerificationRequest
> = z.object({
  accountID: z.string(),
  bankAccountID: z.string(),
  completeBankAccountVerification:
    components.CompleteBankAccountVerification$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    completeBankAccountVerification: "CompleteBankAccountVerification",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteBankAccountVerificationRequest$ {
  /** @deprecated use `CompleteBankAccountVerificationRequest$inboundSchema` instead. */
  export const inboundSchema =
    CompleteBankAccountVerificationRequest$inboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationRequest$outboundSchema` instead. */
  export const outboundSchema =
    CompleteBankAccountVerificationRequest$outboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationRequest$Outbound` instead. */
  export type Outbound = CompleteBankAccountVerificationRequest$Outbound;
}

export function completeBankAccountVerificationRequestToJSON(
  completeBankAccountVerificationRequest:
    CompleteBankAccountVerificationRequest,
): string {
  return JSON.stringify(
    CompleteBankAccountVerificationRequest$outboundSchema.parse(
      completeBankAccountVerificationRequest,
    ),
  );
}

export function completeBankAccountVerificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompleteBankAccountVerificationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteBankAccountVerificationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteBankAccountVerificationRequest' from JSON`,
  );
}

/** @internal */
export const CompleteBankAccountVerificationResponse$inboundSchema: z.ZodType<
  CompleteBankAccountVerificationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.BankAccountVerification$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CompleteBankAccountVerificationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.BankAccountVerification$Outbound;
};

/** @internal */
export const CompleteBankAccountVerificationResponse$outboundSchema: z.ZodType<
  CompleteBankAccountVerificationResponse$Outbound,
  z.ZodTypeDef,
  CompleteBankAccountVerificationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.BankAccountVerification$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteBankAccountVerificationResponse$ {
  /** @deprecated use `CompleteBankAccountVerificationResponse$inboundSchema` instead. */
  export const inboundSchema =
    CompleteBankAccountVerificationResponse$inboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationResponse$outboundSchema` instead. */
  export const outboundSchema =
    CompleteBankAccountVerificationResponse$outboundSchema;
  /** @deprecated use `CompleteBankAccountVerificationResponse$Outbound` instead. */
  export type Outbound = CompleteBankAccountVerificationResponse$Outbound;
}

export function completeBankAccountVerificationResponseToJSON(
  completeBankAccountVerificationResponse:
    CompleteBankAccountVerificationResponse,
): string {
  return JSON.stringify(
    CompleteBankAccountVerificationResponse$outboundSchema.parse(
      completeBankAccountVerificationResponse,
    ),
  );
}

export function completeBankAccountVerificationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CompleteBankAccountVerificationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteBankAccountVerificationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompleteBankAccountVerificationResponse' from JSON`,
  );
}
