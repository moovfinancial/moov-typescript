/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteRepresentativeSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type DeleteRepresentativeRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * ID of the account.
   */
  accountID: string;
  /**
   * ID of the representative.
   */
  representativeID: string;
};

/** @internal */
export const DeleteRepresentativeSecurity$inboundSchema: z.ZodType<
  DeleteRepresentativeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type DeleteRepresentativeSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const DeleteRepresentativeSecurity$outboundSchema: z.ZodType<
  DeleteRepresentativeSecurity$Outbound,
  z.ZodTypeDef,
  DeleteRepresentativeSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRepresentativeSecurity$ {
  /** @deprecated use `DeleteRepresentativeSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteRepresentativeSecurity$inboundSchema;
  /** @deprecated use `DeleteRepresentativeSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteRepresentativeSecurity$outboundSchema;
  /** @deprecated use `DeleteRepresentativeSecurity$Outbound` instead. */
  export type Outbound = DeleteRepresentativeSecurity$Outbound;
}

export function deleteRepresentativeSecurityToJSON(
  deleteRepresentativeSecurity: DeleteRepresentativeSecurity,
): string {
  return JSON.stringify(
    DeleteRepresentativeSecurity$outboundSchema.parse(
      deleteRepresentativeSecurity,
    ),
  );
}

export function deleteRepresentativeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRepresentativeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRepresentativeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRepresentativeSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteRepresentativeRequest$inboundSchema: z.ZodType<
  DeleteRepresentativeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  representativeID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type DeleteRepresentativeRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  representativeID: string;
};

/** @internal */
export const DeleteRepresentativeRequest$outboundSchema: z.ZodType<
  DeleteRepresentativeRequest$Outbound,
  z.ZodTypeDef,
  DeleteRepresentativeRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  representativeID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRepresentativeRequest$ {
  /** @deprecated use `DeleteRepresentativeRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteRepresentativeRequest$inboundSchema;
  /** @deprecated use `DeleteRepresentativeRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteRepresentativeRequest$outboundSchema;
  /** @deprecated use `DeleteRepresentativeRequest$Outbound` instead. */
  export type Outbound = DeleteRepresentativeRequest$Outbound;
}

export function deleteRepresentativeRequestToJSON(
  deleteRepresentativeRequest: DeleteRepresentativeRequest,
): string {
  return JSON.stringify(
    DeleteRepresentativeRequest$outboundSchema.parse(
      deleteRepresentativeRequest,
    ),
  );
}

export function deleteRepresentativeRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRepresentativeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRepresentativeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRepresentativeRequest' from JSON`,
  );
}
