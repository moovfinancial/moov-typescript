/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListDisputeEvidenceSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListDisputeEvidenceRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  disputeID: string;
};

/** @internal */
export const ListDisputeEvidenceSecurity$inboundSchema: z.ZodType<
  ListDisputeEvidenceSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListDisputeEvidenceSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListDisputeEvidenceSecurity$outboundSchema: z.ZodType<
  ListDisputeEvidenceSecurity$Outbound,
  z.ZodTypeDef,
  ListDisputeEvidenceSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDisputeEvidenceSecurity$ {
  /** @deprecated use `ListDisputeEvidenceSecurity$inboundSchema` instead. */
  export const inboundSchema = ListDisputeEvidenceSecurity$inboundSchema;
  /** @deprecated use `ListDisputeEvidenceSecurity$outboundSchema` instead. */
  export const outboundSchema = ListDisputeEvidenceSecurity$outboundSchema;
  /** @deprecated use `ListDisputeEvidenceSecurity$Outbound` instead. */
  export type Outbound = ListDisputeEvidenceSecurity$Outbound;
}

export function listDisputeEvidenceSecurityToJSON(
  listDisputeEvidenceSecurity: ListDisputeEvidenceSecurity,
): string {
  return JSON.stringify(
    ListDisputeEvidenceSecurity$outboundSchema.parse(
      listDisputeEvidenceSecurity,
    ),
  );
}

export function listDisputeEvidenceSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListDisputeEvidenceSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDisputeEvidenceSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDisputeEvidenceSecurity' from JSON`,
  );
}

/** @internal */
export const ListDisputeEvidenceRequest$inboundSchema: z.ZodType<
  ListDisputeEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListDisputeEvidenceRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  disputeID: string;
};

/** @internal */
export const ListDisputeEvidenceRequest$outboundSchema: z.ZodType<
  ListDisputeEvidenceRequest$Outbound,
  z.ZodTypeDef,
  ListDisputeEvidenceRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  disputeID: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDisputeEvidenceRequest$ {
  /** @deprecated use `ListDisputeEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema = ListDisputeEvidenceRequest$inboundSchema;
  /** @deprecated use `ListDisputeEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema = ListDisputeEvidenceRequest$outboundSchema;
  /** @deprecated use `ListDisputeEvidenceRequest$Outbound` instead. */
  export type Outbound = ListDisputeEvidenceRequest$Outbound;
}

export function listDisputeEvidenceRequestToJSON(
  listDisputeEvidenceRequest: ListDisputeEvidenceRequest,
): string {
  return JSON.stringify(
    ListDisputeEvidenceRequest$outboundSchema.parse(listDisputeEvidenceRequest),
  );
}

export function listDisputeEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListDisputeEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDisputeEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDisputeEvidenceRequest' from JSON`,
  );
}
