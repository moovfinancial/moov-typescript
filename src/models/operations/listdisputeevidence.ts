/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListDisputeEvidenceGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListDisputeEvidenceRequest = {
  accountID: string;
  disputeID: string;
};

export type ListDisputeEvidenceResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.DisputeEvidenceResponse>;
};

/** @internal */
export const ListDisputeEvidenceGlobals$inboundSchema: z.ZodType<
  ListDisputeEvidenceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListDisputeEvidenceGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const ListDisputeEvidenceGlobals$outboundSchema: z.ZodType<
  ListDisputeEvidenceGlobals$Outbound,
  z.ZodTypeDef,
  ListDisputeEvidenceGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDisputeEvidenceGlobals$ {
  /** @deprecated use `ListDisputeEvidenceGlobals$inboundSchema` instead. */
  export const inboundSchema = ListDisputeEvidenceGlobals$inboundSchema;
  /** @deprecated use `ListDisputeEvidenceGlobals$outboundSchema` instead. */
  export const outboundSchema = ListDisputeEvidenceGlobals$outboundSchema;
  /** @deprecated use `ListDisputeEvidenceGlobals$Outbound` instead. */
  export type Outbound = ListDisputeEvidenceGlobals$Outbound;
}

export function listDisputeEvidenceGlobalsToJSON(
  listDisputeEvidenceGlobals: ListDisputeEvidenceGlobals,
): string {
  return JSON.stringify(
    ListDisputeEvidenceGlobals$outboundSchema.parse(listDisputeEvidenceGlobals),
  );
}

export function listDisputeEvidenceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListDisputeEvidenceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDisputeEvidenceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDisputeEvidenceGlobals' from JSON`,
  );
}

/** @internal */
export const ListDisputeEvidenceRequest$inboundSchema: z.ZodType<
  ListDisputeEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
});

/** @internal */
export type ListDisputeEvidenceRequest$Outbound = {
  accountID: string;
  disputeID: string;
};

/** @internal */
export const ListDisputeEvidenceRequest$outboundSchema: z.ZodType<
  ListDisputeEvidenceRequest$Outbound,
  z.ZodTypeDef,
  ListDisputeEvidenceRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDisputeEvidenceRequest$ {
  /** @deprecated use `ListDisputeEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema = ListDisputeEvidenceRequest$inboundSchema;
  /** @deprecated use `ListDisputeEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema = ListDisputeEvidenceRequest$outboundSchema;
  /** @deprecated use `ListDisputeEvidenceRequest$Outbound` instead. */
  export type Outbound = ListDisputeEvidenceRequest$Outbound;
}

export function listDisputeEvidenceRequestToJSON(
  listDisputeEvidenceRequest: ListDisputeEvidenceRequest,
): string {
  return JSON.stringify(
    ListDisputeEvidenceRequest$outboundSchema.parse(listDisputeEvidenceRequest),
  );
}

export function listDisputeEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListDisputeEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDisputeEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDisputeEvidenceRequest' from JSON`,
  );
}

/** @internal */
export const ListDisputeEvidenceResponse$inboundSchema: z.ZodType<
  ListDisputeEvidenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.DisputeEvidenceResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListDisputeEvidenceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.DisputeEvidenceResponse$Outbound>;
};

/** @internal */
export const ListDisputeEvidenceResponse$outboundSchema: z.ZodType<
  ListDisputeEvidenceResponse$Outbound,
  z.ZodTypeDef,
  ListDisputeEvidenceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.DisputeEvidenceResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDisputeEvidenceResponse$ {
  /** @deprecated use `ListDisputeEvidenceResponse$inboundSchema` instead. */
  export const inboundSchema = ListDisputeEvidenceResponse$inboundSchema;
  /** @deprecated use `ListDisputeEvidenceResponse$outboundSchema` instead. */
  export const outboundSchema = ListDisputeEvidenceResponse$outboundSchema;
  /** @deprecated use `ListDisputeEvidenceResponse$Outbound` instead. */
  export type Outbound = ListDisputeEvidenceResponse$Outbound;
}

export function listDisputeEvidenceResponseToJSON(
  listDisputeEvidenceResponse: ListDisputeEvidenceResponse,
): string {
  return JSON.stringify(
    ListDisputeEvidenceResponse$outboundSchema.parse(
      listDisputeEvidenceResponse,
    ),
  );
}

export function listDisputeEvidenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListDisputeEvidenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDisputeEvidenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDisputeEvidenceResponse' from JSON`,
  );
}
