/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPaymentLinkQRCodeSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type GetPaymentLinkQRCodeRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  paymentLinkCode: string;
};

export type GetPaymentLinkQRCodeResponse =
  | components.QRCode
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetPaymentLinkQRCodeSecurity$inboundSchema: z.ZodType<
  GetPaymentLinkQRCodeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type GetPaymentLinkQRCodeSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const GetPaymentLinkQRCodeSecurity$outboundSchema: z.ZodType<
  GetPaymentLinkQRCodeSecurity$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkQRCodeSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkQRCodeSecurity$ {
  /** @deprecated use `GetPaymentLinkQRCodeSecurity$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkQRCodeSecurity$inboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeSecurity$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkQRCodeSecurity$outboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeSecurity$Outbound` instead. */
  export type Outbound = GetPaymentLinkQRCodeSecurity$Outbound;
}

export function getPaymentLinkQRCodeSecurityToJSON(
  getPaymentLinkQRCodeSecurity: GetPaymentLinkQRCodeSecurity,
): string {
  return JSON.stringify(
    GetPaymentLinkQRCodeSecurity$outboundSchema.parse(
      getPaymentLinkQRCodeSecurity,
    ),
  );
}

export function getPaymentLinkQRCodeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkQRCodeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkQRCodeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkQRCodeSecurity' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkQRCodeRequest$inboundSchema: z.ZodType<
  GetPaymentLinkQRCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  paymentLinkCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetPaymentLinkQRCodeRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  paymentLinkCode: string;
};

/** @internal */
export const GetPaymentLinkQRCodeRequest$outboundSchema: z.ZodType<
  GetPaymentLinkQRCodeRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkQRCodeRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  paymentLinkCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkQRCodeRequest$ {
  /** @deprecated use `GetPaymentLinkQRCodeRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkQRCodeRequest$inboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkQRCodeRequest$outboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeRequest$Outbound` instead. */
  export type Outbound = GetPaymentLinkQRCodeRequest$Outbound;
}

export function getPaymentLinkQRCodeRequestToJSON(
  getPaymentLinkQRCodeRequest: GetPaymentLinkQRCodeRequest,
): string {
  return JSON.stringify(
    GetPaymentLinkQRCodeRequest$outboundSchema.parse(
      getPaymentLinkQRCodeRequest,
    ),
  );
}

export function getPaymentLinkQRCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkQRCodeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkQRCodeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkQRCodeRequest' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkQRCodeResponse$inboundSchema: z.ZodType<
  GetPaymentLinkQRCodeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.QRCode$inboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetPaymentLinkQRCodeResponse$Outbound =
  | components.QRCode$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetPaymentLinkQRCodeResponse$outboundSchema: z.ZodType<
  GetPaymentLinkQRCodeResponse$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkQRCodeResponse
> = z.union([
  components.QRCode$outboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkQRCodeResponse$ {
  /** @deprecated use `GetPaymentLinkQRCodeResponse$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkQRCodeResponse$inboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeResponse$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkQRCodeResponse$outboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeResponse$Outbound` instead. */
  export type Outbound = GetPaymentLinkQRCodeResponse$Outbound;
}

export function getPaymentLinkQRCodeResponseToJSON(
  getPaymentLinkQRCodeResponse: GetPaymentLinkQRCodeResponse,
): string {
  return JSON.stringify(
    GetPaymentLinkQRCodeResponse$outboundSchema.parse(
      getPaymentLinkQRCodeResponse,
    ),
  );
}

export function getPaymentLinkQRCodeResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkQRCodeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkQRCodeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkQRCodeResponse' from JSON`,
  );
}
