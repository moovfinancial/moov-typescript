/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPaymentLinkQRCodeGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetPaymentLinkQRCodeRequest = {
  accountID: string;
  paymentLinkCode: string;
};

export type GetPaymentLinkQRCodeResponseResult =
  | components.QRCode
  | ReadableStream<Uint8Array>;

export type GetPaymentLinkQRCodeResponse = {
  headers: { [k: string]: Array<string> };
  result: components.QRCode | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetPaymentLinkQRCodeGlobals$inboundSchema: z.ZodType<
  GetPaymentLinkQRCodeGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetPaymentLinkQRCodeGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetPaymentLinkQRCodeGlobals$outboundSchema: z.ZodType<
  GetPaymentLinkQRCodeGlobals$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkQRCodeGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkQRCodeGlobals$ {
  /** @deprecated use `GetPaymentLinkQRCodeGlobals$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkQRCodeGlobals$inboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeGlobals$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkQRCodeGlobals$outboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeGlobals$Outbound` instead. */
  export type Outbound = GetPaymentLinkQRCodeGlobals$Outbound;
}

export function getPaymentLinkQRCodeGlobalsToJSON(
  getPaymentLinkQRCodeGlobals: GetPaymentLinkQRCodeGlobals,
): string {
  return JSON.stringify(
    GetPaymentLinkQRCodeGlobals$outboundSchema.parse(
      getPaymentLinkQRCodeGlobals,
    ),
  );
}

export function getPaymentLinkQRCodeGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkQRCodeGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkQRCodeGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkQRCodeGlobals' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkQRCodeRequest$inboundSchema: z.ZodType<
  GetPaymentLinkQRCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  paymentLinkCode: z.string(),
});

/** @internal */
export type GetPaymentLinkQRCodeRequest$Outbound = {
  accountID: string;
  paymentLinkCode: string;
};

/** @internal */
export const GetPaymentLinkQRCodeRequest$outboundSchema: z.ZodType<
  GetPaymentLinkQRCodeRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkQRCodeRequest
> = z.object({
  accountID: z.string(),
  paymentLinkCode: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkQRCodeRequest$ {
  /** @deprecated use `GetPaymentLinkQRCodeRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkQRCodeRequest$inboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkQRCodeRequest$outboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeRequest$Outbound` instead. */
  export type Outbound = GetPaymentLinkQRCodeRequest$Outbound;
}

export function getPaymentLinkQRCodeRequestToJSON(
  getPaymentLinkQRCodeRequest: GetPaymentLinkQRCodeRequest,
): string {
  return JSON.stringify(
    GetPaymentLinkQRCodeRequest$outboundSchema.parse(
      getPaymentLinkQRCodeRequest,
    ),
  );
}

export function getPaymentLinkQRCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkQRCodeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkQRCodeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkQRCodeRequest' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkQRCodeResponseResult$inboundSchema: z.ZodType<
  GetPaymentLinkQRCodeResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.QRCode$inboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetPaymentLinkQRCodeResponseResult$Outbound =
  | components.QRCode$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetPaymentLinkQRCodeResponseResult$outboundSchema: z.ZodType<
  GetPaymentLinkQRCodeResponseResult$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkQRCodeResponseResult
> = z.union([
  components.QRCode$outboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkQRCodeResponseResult$ {
  /** @deprecated use `GetPaymentLinkQRCodeResponseResult$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkQRCodeResponseResult$inboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkQRCodeResponseResult$outboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeResponseResult$Outbound` instead. */
  export type Outbound = GetPaymentLinkQRCodeResponseResult$Outbound;
}

export function getPaymentLinkQRCodeResponseResultToJSON(
  getPaymentLinkQRCodeResponseResult: GetPaymentLinkQRCodeResponseResult,
): string {
  return JSON.stringify(
    GetPaymentLinkQRCodeResponseResult$outboundSchema.parse(
      getPaymentLinkQRCodeResponseResult,
    ),
  );
}

export function getPaymentLinkQRCodeResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkQRCodeResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkQRCodeResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkQRCodeResponseResult' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkQRCodeResponse$inboundSchema: z.ZodType<
  GetPaymentLinkQRCodeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.QRCode$inboundSchema,
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetPaymentLinkQRCodeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.QRCode$Outbound | ReadableStream<Uint8Array>;
};

/** @internal */
export const GetPaymentLinkQRCodeResponse$outboundSchema: z.ZodType<
  GetPaymentLinkQRCodeResponse$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkQRCodeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.QRCode$outboundSchema,
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkQRCodeResponse$ {
  /** @deprecated use `GetPaymentLinkQRCodeResponse$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkQRCodeResponse$inboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeResponse$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkQRCodeResponse$outboundSchema;
  /** @deprecated use `GetPaymentLinkQRCodeResponse$Outbound` instead. */
  export type Outbound = GetPaymentLinkQRCodeResponse$Outbound;
}

export function getPaymentLinkQRCodeResponseToJSON(
  getPaymentLinkQRCodeResponse: GetPaymentLinkQRCodeResponse,
): string {
  return JSON.stringify(
    GetPaymentLinkQRCodeResponse$outboundSchema.parse(
      getPaymentLinkQRCodeResponse,
    ),
  );
}

export function getPaymentLinkQRCodeResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkQRCodeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkQRCodeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkQRCodeResponse' from JSON`,
  );
}
