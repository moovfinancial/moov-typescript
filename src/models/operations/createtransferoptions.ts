/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransferOptionsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateTransferOptionsRequest = {};

export type CreateTransferOptionsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TransferOptions;
};

/** @internal */
export const CreateTransferOptionsGlobals$inboundSchema: z.ZodType<
  CreateTransferOptionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateTransferOptionsGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateTransferOptionsGlobals$outboundSchema: z.ZodType<
  CreateTransferOptionsGlobals$Outbound,
  z.ZodTypeDef,
  CreateTransferOptionsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferOptionsGlobals$ {
  /** @deprecated use `CreateTransferOptionsGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTransferOptionsGlobals$inboundSchema;
  /** @deprecated use `CreateTransferOptionsGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTransferOptionsGlobals$outboundSchema;
  /** @deprecated use `CreateTransferOptionsGlobals$Outbound` instead. */
  export type Outbound = CreateTransferOptionsGlobals$Outbound;
}

export function createTransferOptionsGlobalsToJSON(
  createTransferOptionsGlobals: CreateTransferOptionsGlobals,
): string {
  return JSON.stringify(
    CreateTransferOptionsGlobals$outboundSchema.parse(
      createTransferOptionsGlobals,
    ),
  );
}

export function createTransferOptionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferOptionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferOptionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferOptionsGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTransferOptionsRequest$inboundSchema: z.ZodType<
  CreateTransferOptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateTransferOptionsRequest$Outbound = {};

/** @internal */
export const CreateTransferOptionsRequest$outboundSchema: z.ZodType<
  CreateTransferOptionsRequest$Outbound,
  z.ZodTypeDef,
  CreateTransferOptionsRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferOptionsRequest$ {
  /** @deprecated use `CreateTransferOptionsRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransferOptionsRequest$inboundSchema;
  /** @deprecated use `CreateTransferOptionsRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransferOptionsRequest$outboundSchema;
  /** @deprecated use `CreateTransferOptionsRequest$Outbound` instead. */
  export type Outbound = CreateTransferOptionsRequest$Outbound;
}

export function createTransferOptionsRequestToJSON(
  createTransferOptionsRequest: CreateTransferOptionsRequest,
): string {
  return JSON.stringify(
    CreateTransferOptionsRequest$outboundSchema.parse(
      createTransferOptionsRequest,
    ),
  );
}

export function createTransferOptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferOptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferOptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferOptionsRequest' from JSON`,
  );
}

/** @internal */
export const CreateTransferOptionsResponse$inboundSchema: z.ZodType<
  CreateTransferOptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.TransferOptions$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateTransferOptionsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TransferOptions$Outbound;
};

/** @internal */
export const CreateTransferOptionsResponse$outboundSchema: z.ZodType<
  CreateTransferOptionsResponse$Outbound,
  z.ZodTypeDef,
  CreateTransferOptionsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TransferOptions$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferOptionsResponse$ {
  /** @deprecated use `CreateTransferOptionsResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTransferOptionsResponse$inboundSchema;
  /** @deprecated use `CreateTransferOptionsResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTransferOptionsResponse$outboundSchema;
  /** @deprecated use `CreateTransferOptionsResponse$Outbound` instead. */
  export type Outbound = CreateTransferOptionsResponse$Outbound;
}

export function createTransferOptionsResponseToJSON(
  createTransferOptionsResponse: CreateTransferOptionsResponse,
): string {
  return JSON.stringify(
    CreateTransferOptionsResponse$outboundSchema.parse(
      createTransferOptionsResponse,
    ),
  );
}

export function createTransferOptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferOptionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferOptionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferOptionsResponse' from JSON`,
  );
}
