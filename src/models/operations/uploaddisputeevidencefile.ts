/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadDisputeEvidenceFileGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type UploadDisputeEvidenceFileRequest = {
  accountID: string;
  disputeID: string;
  createEvidenceFileMultiPart: components.CreateEvidenceFileMultiPart;
};

export type UploadDisputeEvidenceFileResponse = {
  headers: { [k: string]: Array<string> };
  result: components.EvidenceUploadResponse;
};

/** @internal */
export const UploadDisputeEvidenceFileGlobals$inboundSchema: z.ZodType<
  UploadDisputeEvidenceFileGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type UploadDisputeEvidenceFileGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const UploadDisputeEvidenceFileGlobals$outboundSchema: z.ZodType<
  UploadDisputeEvidenceFileGlobals$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceFileGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceFileGlobals$ {
  /** @deprecated use `UploadDisputeEvidenceFileGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceFileGlobals$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceFileGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadDisputeEvidenceFileGlobals$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceFileGlobals$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceFileGlobals$Outbound;
}

export function uploadDisputeEvidenceFileGlobalsToJSON(
  uploadDisputeEvidenceFileGlobals: UploadDisputeEvidenceFileGlobals,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceFileGlobals$outboundSchema.parse(
      uploadDisputeEvidenceFileGlobals,
    ),
  );
}

export function uploadDisputeEvidenceFileGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceFileGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceFileGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceFileGlobals' from JSON`,
  );
}

/** @internal */
export const UploadDisputeEvidenceFileRequest$inboundSchema: z.ZodType<
  UploadDisputeEvidenceFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  CreateEvidenceFileMultiPart:
    components.CreateEvidenceFileMultiPart$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateEvidenceFileMultiPart": "createEvidenceFileMultiPart",
  });
});

/** @internal */
export type UploadDisputeEvidenceFileRequest$Outbound = {
  accountID: string;
  disputeID: string;
  CreateEvidenceFileMultiPart: components.CreateEvidenceFileMultiPart$Outbound;
};

/** @internal */
export const UploadDisputeEvidenceFileRequest$outboundSchema: z.ZodType<
  UploadDisputeEvidenceFileRequest$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceFileRequest
> = z.object({
  accountID: z.string(),
  disputeID: z.string(),
  createEvidenceFileMultiPart:
    components.CreateEvidenceFileMultiPart$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createEvidenceFileMultiPart: "CreateEvidenceFileMultiPart",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceFileRequest$ {
  /** @deprecated use `UploadDisputeEvidenceFileRequest$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceFileRequest$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceFileRequest$outboundSchema` instead. */
  export const outboundSchema = UploadDisputeEvidenceFileRequest$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceFileRequest$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceFileRequest$Outbound;
}

export function uploadDisputeEvidenceFileRequestToJSON(
  uploadDisputeEvidenceFileRequest: UploadDisputeEvidenceFileRequest,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceFileRequest$outboundSchema.parse(
      uploadDisputeEvidenceFileRequest,
    ),
  );
}

export function uploadDisputeEvidenceFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceFileRequest' from JSON`,
  );
}

/** @internal */
export const UploadDisputeEvidenceFileResponse$inboundSchema: z.ZodType<
  UploadDisputeEvidenceFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.EvidenceUploadResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UploadDisputeEvidenceFileResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.EvidenceUploadResponse$Outbound;
};

/** @internal */
export const UploadDisputeEvidenceFileResponse$outboundSchema: z.ZodType<
  UploadDisputeEvidenceFileResponse$Outbound,
  z.ZodTypeDef,
  UploadDisputeEvidenceFileResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.EvidenceUploadResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDisputeEvidenceFileResponse$ {
  /** @deprecated use `UploadDisputeEvidenceFileResponse$inboundSchema` instead. */
  export const inboundSchema = UploadDisputeEvidenceFileResponse$inboundSchema;
  /** @deprecated use `UploadDisputeEvidenceFileResponse$outboundSchema` instead. */
  export const outboundSchema =
    UploadDisputeEvidenceFileResponse$outboundSchema;
  /** @deprecated use `UploadDisputeEvidenceFileResponse$Outbound` instead. */
  export type Outbound = UploadDisputeEvidenceFileResponse$Outbound;
}

export function uploadDisputeEvidenceFileResponseToJSON(
  uploadDisputeEvidenceFileResponse: UploadDisputeEvidenceFileResponse,
): string {
  return JSON.stringify(
    UploadDisputeEvidenceFileResponse$outboundSchema.parse(
      uploadDisputeEvidenceFileResponse,
    ),
  );
}

export function uploadDisputeEvidenceFileResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadDisputeEvidenceFileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDisputeEvidenceFileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDisputeEvidenceFileResponse' from JSON`,
  );
}
