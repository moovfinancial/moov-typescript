/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListProductsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListProductsRequest = {
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
};

export type ListProductsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Product>;
};

/** @internal */
export const ListProductsGlobals$inboundSchema: z.ZodType<
  ListProductsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListProductsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListProductsGlobals$outboundSchema: z.ZodType<
  ListProductsGlobals$Outbound,
  z.ZodTypeDef,
  ListProductsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProductsGlobals$ {
  /** @deprecated use `ListProductsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListProductsGlobals$inboundSchema;
  /** @deprecated use `ListProductsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListProductsGlobals$outboundSchema;
  /** @deprecated use `ListProductsGlobals$Outbound` instead. */
  export type Outbound = ListProductsGlobals$Outbound;
}

export function listProductsGlobalsToJSON(
  listProductsGlobals: ListProductsGlobals,
): string {
  return JSON.stringify(
    ListProductsGlobals$outboundSchema.parse(listProductsGlobals),
  );
}

export function listProductsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListProductsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProductsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProductsGlobals' from JSON`,
  );
}

/** @internal */
export const ListProductsRequest$inboundSchema: z.ZodType<
  ListProductsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type ListProductsRequest$Outbound = {
  accountID: string;
  skip?: number | undefined;
  count?: number | undefined;
};

/** @internal */
export const ListProductsRequest$outboundSchema: z.ZodType<
  ListProductsRequest$Outbound,
  z.ZodTypeDef,
  ListProductsRequest
> = z.object({
  accountID: z.string(),
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProductsRequest$ {
  /** @deprecated use `ListProductsRequest$inboundSchema` instead. */
  export const inboundSchema = ListProductsRequest$inboundSchema;
  /** @deprecated use `ListProductsRequest$outboundSchema` instead. */
  export const outboundSchema = ListProductsRequest$outboundSchema;
  /** @deprecated use `ListProductsRequest$Outbound` instead. */
  export type Outbound = ListProductsRequest$Outbound;
}

export function listProductsRequestToJSON(
  listProductsRequest: ListProductsRequest,
): string {
  return JSON.stringify(
    ListProductsRequest$outboundSchema.parse(listProductsRequest),
  );
}

export function listProductsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListProductsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProductsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProductsRequest' from JSON`,
  );
}

/** @internal */
export const ListProductsResponse$inboundSchema: z.ZodType<
  ListProductsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Product$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListProductsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Product$Outbound>;
};

/** @internal */
export const ListProductsResponse$outboundSchema: z.ZodType<
  ListProductsResponse$Outbound,
  z.ZodTypeDef,
  ListProductsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Product$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProductsResponse$ {
  /** @deprecated use `ListProductsResponse$inboundSchema` instead. */
  export const inboundSchema = ListProductsResponse$inboundSchema;
  /** @deprecated use `ListProductsResponse$outboundSchema` instead. */
  export const outboundSchema = ListProductsResponse$outboundSchema;
  /** @deprecated use `ListProductsResponse$Outbound` instead. */
  export type Outbound = ListProductsResponse$Outbound;
}

export function listProductsResponseToJSON(
  listProductsResponse: ListProductsResponse,
): string {
  return JSON.stringify(
    ListProductsResponse$outboundSchema.parse(listProductsResponse),
  );
}

export function listProductsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListProductsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProductsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProductsResponse' from JSON`,
  );
}
