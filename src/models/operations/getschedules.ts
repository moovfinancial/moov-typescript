/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSchedulesGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetSchedulesRequest = {
  accountID: string;
  scheduleID: string;
};

export type GetSchedulesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ScheduleResponse;
};

/** @internal */
export const GetSchedulesGlobals$inboundSchema: z.ZodType<
  GetSchedulesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type GetSchedulesGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const GetSchedulesGlobals$outboundSchema: z.ZodType<
  GetSchedulesGlobals$Outbound,
  z.ZodTypeDef,
  GetSchedulesGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSchedulesGlobals$ {
  /** @deprecated use `GetSchedulesGlobals$inboundSchema` instead. */
  export const inboundSchema = GetSchedulesGlobals$inboundSchema;
  /** @deprecated use `GetSchedulesGlobals$outboundSchema` instead. */
  export const outboundSchema = GetSchedulesGlobals$outboundSchema;
  /** @deprecated use `GetSchedulesGlobals$Outbound` instead. */
  export type Outbound = GetSchedulesGlobals$Outbound;
}

export function getSchedulesGlobalsToJSON(
  getSchedulesGlobals: GetSchedulesGlobals,
): string {
  return JSON.stringify(
    GetSchedulesGlobals$outboundSchema.parse(getSchedulesGlobals),
  );
}

export function getSchedulesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetSchedulesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSchedulesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSchedulesGlobals' from JSON`,
  );
}

/** @internal */
export const GetSchedulesRequest$inboundSchema: z.ZodType<
  GetSchedulesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
});

/** @internal */
export type GetSchedulesRequest$Outbound = {
  accountID: string;
  scheduleID: string;
};

/** @internal */
export const GetSchedulesRequest$outboundSchema: z.ZodType<
  GetSchedulesRequest$Outbound,
  z.ZodTypeDef,
  GetSchedulesRequest
> = z.object({
  accountID: z.string(),
  scheduleID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSchedulesRequest$ {
  /** @deprecated use `GetSchedulesRequest$inboundSchema` instead. */
  export const inboundSchema = GetSchedulesRequest$inboundSchema;
  /** @deprecated use `GetSchedulesRequest$outboundSchema` instead. */
  export const outboundSchema = GetSchedulesRequest$outboundSchema;
  /** @deprecated use `GetSchedulesRequest$Outbound` instead. */
  export type Outbound = GetSchedulesRequest$Outbound;
}

export function getSchedulesRequestToJSON(
  getSchedulesRequest: GetSchedulesRequest,
): string {
  return JSON.stringify(
    GetSchedulesRequest$outboundSchema.parse(getSchedulesRequest),
  );
}

export function getSchedulesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSchedulesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSchedulesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSchedulesRequest' from JSON`,
  );
}

/** @internal */
export const GetSchedulesResponse$inboundSchema: z.ZodType<
  GetSchedulesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ScheduleResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetSchedulesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ScheduleResponse$Outbound;
};

/** @internal */
export const GetSchedulesResponse$outboundSchema: z.ZodType<
  GetSchedulesResponse$Outbound,
  z.ZodTypeDef,
  GetSchedulesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ScheduleResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSchedulesResponse$ {
  /** @deprecated use `GetSchedulesResponse$inboundSchema` instead. */
  export const inboundSchema = GetSchedulesResponse$inboundSchema;
  /** @deprecated use `GetSchedulesResponse$outboundSchema` instead. */
  export const outboundSchema = GetSchedulesResponse$outboundSchema;
  /** @deprecated use `GetSchedulesResponse$Outbound` instead. */
  export type Outbound = GetSchedulesResponse$Outbound;
}

export function getSchedulesResponseToJSON(
  getSchedulesResponse: GetSchedulesResponse,
): string {
  return JSON.stringify(
    GetSchedulesResponse$outboundSchema.parse(getSchedulesResponse),
  );
}

export function getSchedulesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSchedulesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSchedulesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSchedulesResponse' from JSON`,
  );
}
