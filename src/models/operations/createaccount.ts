/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAccountGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateAccountResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Account;
};

/** @internal */
export const CreateAccountGlobals$inboundSchema: z.ZodType<
  CreateAccountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type CreateAccountGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const CreateAccountGlobals$outboundSchema: z.ZodType<
  CreateAccountGlobals$Outbound,
  z.ZodTypeDef,
  CreateAccountGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountGlobals$ {
  /** @deprecated use `CreateAccountGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateAccountGlobals$inboundSchema;
  /** @deprecated use `CreateAccountGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateAccountGlobals$outboundSchema;
  /** @deprecated use `CreateAccountGlobals$Outbound` instead. */
  export type Outbound = CreateAccountGlobals$Outbound;
}

export function createAccountGlobalsToJSON(
  createAccountGlobals: CreateAccountGlobals,
): string {
  return JSON.stringify(
    CreateAccountGlobals$outboundSchema.parse(createAccountGlobals),
  );
}

export function createAccountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountGlobals' from JSON`,
  );
}

/** @internal */
export const CreateAccountResponse$inboundSchema: z.ZodType<
  CreateAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Account$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateAccountResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Account$Outbound;
};

/** @internal */
export const CreateAccountResponse$outboundSchema: z.ZodType<
  CreateAccountResponse$Outbound,
  z.ZodTypeDef,
  CreateAccountResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Account$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountResponse$ {
  /** @deprecated use `CreateAccountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAccountResponse$inboundSchema;
  /** @deprecated use `CreateAccountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAccountResponse$outboundSchema;
  /** @deprecated use `CreateAccountResponse$Outbound` instead. */
  export type Outbound = CreateAccountResponse$Outbound;
}

export function createAccountResponseToJSON(
  createAccountResponse: CreateAccountResponse,
): string {
  return JSON.stringify(
    CreateAccountResponse$outboundSchema.parse(createAccountResponse),
  );
}

export function createAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountResponse' from JSON`,
  );
}
