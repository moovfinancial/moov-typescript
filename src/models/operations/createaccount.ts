/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAccountSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CreateAccountRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Optional header that indicates whether to wait for the connection to be created before returning from the account creation.
   */
  xWaitFor?: components.AccountWaitFor | undefined;
  createAccount: components.CreateAccount;
};

/** @internal */
export const CreateAccountSecurity$inboundSchema: z.ZodType<
  CreateAccountSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CreateAccountSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CreateAccountSecurity$outboundSchema: z.ZodType<
  CreateAccountSecurity$Outbound,
  z.ZodTypeDef,
  CreateAccountSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountSecurity$ {
  /** @deprecated use `CreateAccountSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateAccountSecurity$inboundSchema;
  /** @deprecated use `CreateAccountSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateAccountSecurity$outboundSchema;
  /** @deprecated use `CreateAccountSecurity$Outbound` instead. */
  export type Outbound = CreateAccountSecurity$Outbound;
}

export function createAccountSecurityToJSON(
  createAccountSecurity: CreateAccountSecurity,
): string {
  return JSON.stringify(
    CreateAccountSecurity$outboundSchema.parse(createAccountSecurity),
  );
}

export function createAccountSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountSecurity' from JSON`,
  );
}

/** @internal */
export const CreateAccountRequest$inboundSchema: z.ZodType<
  CreateAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  "x-wait-for": components.AccountWaitFor$inboundSchema.optional(),
  CreateAccount: components.CreateAccount$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "x-wait-for": "xWaitFor",
    "CreateAccount": "createAccount",
  });
});

/** @internal */
export type CreateAccountRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  "x-wait-for"?: string | undefined;
  CreateAccount: components.CreateAccount$Outbound;
};

/** @internal */
export const CreateAccountRequest$outboundSchema: z.ZodType<
  CreateAccountRequest$Outbound,
  z.ZodTypeDef,
  CreateAccountRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  xWaitFor: components.AccountWaitFor$outboundSchema.optional(),
  createAccount: components.CreateAccount$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    xWaitFor: "x-wait-for",
    createAccount: "CreateAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountRequest$ {
  /** @deprecated use `CreateAccountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAccountRequest$inboundSchema;
  /** @deprecated use `CreateAccountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAccountRequest$outboundSchema;
  /** @deprecated use `CreateAccountRequest$Outbound` instead. */
  export type Outbound = CreateAccountRequest$Outbound;
}

export function createAccountRequestToJSON(
  createAccountRequest: CreateAccountRequest,
): string {
  return JSON.stringify(
    CreateAccountRequest$outboundSchema.parse(createAccountRequest),
  );
}

export function createAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountRequest' from JSON`,
  );
}
