/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUnderwritingGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type GetUnderwritingRequest = {
  accountID: string;
};

export type GetUnderwritingResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Underwriting;
};

/** @internal */
export const GetUnderwritingGlobals$inboundSchema: z.ZodType<
  GetUnderwritingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type GetUnderwritingGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const GetUnderwritingGlobals$outboundSchema: z.ZodType<
  GetUnderwritingGlobals$Outbound,
  z.ZodTypeDef,
  GetUnderwritingGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUnderwritingGlobals$ {
  /** @deprecated use `GetUnderwritingGlobals$inboundSchema` instead. */
  export const inboundSchema = GetUnderwritingGlobals$inboundSchema;
  /** @deprecated use `GetUnderwritingGlobals$outboundSchema` instead. */
  export const outboundSchema = GetUnderwritingGlobals$outboundSchema;
  /** @deprecated use `GetUnderwritingGlobals$Outbound` instead. */
  export type Outbound = GetUnderwritingGlobals$Outbound;
}

export function getUnderwritingGlobalsToJSON(
  getUnderwritingGlobals: GetUnderwritingGlobals,
): string {
  return JSON.stringify(
    GetUnderwritingGlobals$outboundSchema.parse(getUnderwritingGlobals),
  );
}

export function getUnderwritingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetUnderwritingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUnderwritingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUnderwritingGlobals' from JSON`,
  );
}

/** @internal */
export const GetUnderwritingRequest$inboundSchema: z.ZodType<
  GetUnderwritingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type GetUnderwritingRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const GetUnderwritingRequest$outboundSchema: z.ZodType<
  GetUnderwritingRequest$Outbound,
  z.ZodTypeDef,
  GetUnderwritingRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUnderwritingRequest$ {
  /** @deprecated use `GetUnderwritingRequest$inboundSchema` instead. */
  export const inboundSchema = GetUnderwritingRequest$inboundSchema;
  /** @deprecated use `GetUnderwritingRequest$outboundSchema` instead. */
  export const outboundSchema = GetUnderwritingRequest$outboundSchema;
  /** @deprecated use `GetUnderwritingRequest$Outbound` instead. */
  export type Outbound = GetUnderwritingRequest$Outbound;
}

export function getUnderwritingRequestToJSON(
  getUnderwritingRequest: GetUnderwritingRequest,
): string {
  return JSON.stringify(
    GetUnderwritingRequest$outboundSchema.parse(getUnderwritingRequest),
  );
}

export function getUnderwritingRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUnderwritingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUnderwritingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUnderwritingRequest' from JSON`,
  );
}

/** @internal */
export const GetUnderwritingResponse$inboundSchema: z.ZodType<
  GetUnderwritingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Underwriting$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetUnderwritingResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Underwriting$Outbound;
};

/** @internal */
export const GetUnderwritingResponse$outboundSchema: z.ZodType<
  GetUnderwritingResponse$Outbound,
  z.ZodTypeDef,
  GetUnderwritingResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Underwriting$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUnderwritingResponse$ {
  /** @deprecated use `GetUnderwritingResponse$inboundSchema` instead. */
  export const inboundSchema = GetUnderwritingResponse$inboundSchema;
  /** @deprecated use `GetUnderwritingResponse$outboundSchema` instead. */
  export const outboundSchema = GetUnderwritingResponse$outboundSchema;
  /** @deprecated use `GetUnderwritingResponse$Outbound` instead. */
  export type Outbound = GetUnderwritingResponse$Outbound;
}

export function getUnderwritingResponseToJSON(
  getUnderwritingResponse: GetUnderwritingResponse,
): string {
  return JSON.stringify(
    GetUnderwritingResponse$outboundSchema.parse(getUnderwritingResponse),
  );
}

export function getUnderwritingResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUnderwritingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUnderwritingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUnderwritingResponse' from JSON`,
  );
}
