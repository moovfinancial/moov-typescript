/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPartnerPricingAgreementsGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type ListPartnerPricingAgreementsRequest = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  /**
   * A comma-separated list of agreement IDs to filter the results by.
   */
  agreementID?: Array<string> | undefined;
  /**
   * A comma-separated list of statuses to filter the results by.
   */
  status?: Array<components.FeePlanAgreementStatus> | undefined;
};

export type ListPartnerPricingAgreementsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.PartnerPricingAgreement>;
};

/** @internal */
export const ListPartnerPricingAgreementsGlobals$inboundSchema: z.ZodType<
  ListPartnerPricingAgreementsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type ListPartnerPricingAgreementsGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const ListPartnerPricingAgreementsGlobals$outboundSchema: z.ZodType<
  ListPartnerPricingAgreementsGlobals$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingAgreementsGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingAgreementsGlobals$ {
  /** @deprecated use `ListPartnerPricingAgreementsGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ListPartnerPricingAgreementsGlobals$inboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListPartnerPricingAgreementsGlobals$outboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsGlobals$Outbound` instead. */
  export type Outbound = ListPartnerPricingAgreementsGlobals$Outbound;
}

export function listPartnerPricingAgreementsGlobalsToJSON(
  listPartnerPricingAgreementsGlobals: ListPartnerPricingAgreementsGlobals,
): string {
  return JSON.stringify(
    ListPartnerPricingAgreementsGlobals$outboundSchema.parse(
      listPartnerPricingAgreementsGlobals,
    ),
  );
}

export function listPartnerPricingAgreementsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingAgreementsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListPartnerPricingAgreementsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingAgreementsGlobals' from JSON`,
  );
}

/** @internal */
export const ListPartnerPricingAgreementsRequest$inboundSchema: z.ZodType<
  ListPartnerPricingAgreementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  agreementID: z.array(z.string()).optional(),
  status: z.array(components.FeePlanAgreementStatus$inboundSchema).optional(),
});

/** @internal */
export type ListPartnerPricingAgreementsRequest$Outbound = {
  skip?: number | undefined;
  count?: number | undefined;
  accountID: string;
  agreementID?: Array<string> | undefined;
  status?: Array<string> | undefined;
};

/** @internal */
export const ListPartnerPricingAgreementsRequest$outboundSchema: z.ZodType<
  ListPartnerPricingAgreementsRequest$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingAgreementsRequest
> = z.object({
  skip: z.number().int().optional(),
  count: z.number().int().optional(),
  accountID: z.string(),
  agreementID: z.array(z.string()).optional(),
  status: z.array(components.FeePlanAgreementStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingAgreementsRequest$ {
  /** @deprecated use `ListPartnerPricingAgreementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListPartnerPricingAgreementsRequest$inboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListPartnerPricingAgreementsRequest$outboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsRequest$Outbound` instead. */
  export type Outbound = ListPartnerPricingAgreementsRequest$Outbound;
}

export function listPartnerPricingAgreementsRequestToJSON(
  listPartnerPricingAgreementsRequest: ListPartnerPricingAgreementsRequest,
): string {
  return JSON.stringify(
    ListPartnerPricingAgreementsRequest$outboundSchema.parse(
      listPartnerPricingAgreementsRequest,
    ),
  );
}

export function listPartnerPricingAgreementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingAgreementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListPartnerPricingAgreementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingAgreementsRequest' from JSON`,
  );
}

/** @internal */
export const ListPartnerPricingAgreementsResponse$inboundSchema: z.ZodType<
  ListPartnerPricingAgreementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.array(components.PartnerPricingAgreement$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListPartnerPricingAgreementsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.PartnerPricingAgreement$Outbound>;
};

/** @internal */
export const ListPartnerPricingAgreementsResponse$outboundSchema: z.ZodType<
  ListPartnerPricingAgreementsResponse$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingAgreementsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.PartnerPricingAgreement$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingAgreementsResponse$ {
  /** @deprecated use `ListPartnerPricingAgreementsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListPartnerPricingAgreementsResponse$inboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListPartnerPricingAgreementsResponse$outboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsResponse$Outbound` instead. */
  export type Outbound = ListPartnerPricingAgreementsResponse$Outbound;
}

export function listPartnerPricingAgreementsResponseToJSON(
  listPartnerPricingAgreementsResponse: ListPartnerPricingAgreementsResponse,
): string {
  return JSON.stringify(
    ListPartnerPricingAgreementsResponse$outboundSchema.parse(
      listPartnerPricingAgreementsResponse,
    ),
  );
}

export function listPartnerPricingAgreementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingAgreementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListPartnerPricingAgreementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingAgreementsResponse' from JSON`,
  );
}
