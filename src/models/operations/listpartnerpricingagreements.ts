/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPartnerPricingAgreementsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListPartnerPricingAgreementsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  /**
   * A comma-separated list of agreement IDs to filter the results by.
   */
  agreementID?: Array<string> | undefined;
  /**
   * A comma-separated list of statuses to filter the results by.
   */
  status?: Array<components.FeePlanAgreementStatus> | undefined;
};

/** @internal */
export const ListPartnerPricingAgreementsSecurity$inboundSchema: z.ZodType<
  ListPartnerPricingAgreementsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListPartnerPricingAgreementsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListPartnerPricingAgreementsSecurity$outboundSchema: z.ZodType<
  ListPartnerPricingAgreementsSecurity$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingAgreementsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingAgreementsSecurity$ {
  /** @deprecated use `ListPartnerPricingAgreementsSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ListPartnerPricingAgreementsSecurity$inboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ListPartnerPricingAgreementsSecurity$outboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsSecurity$Outbound` instead. */
  export type Outbound = ListPartnerPricingAgreementsSecurity$Outbound;
}

export function listPartnerPricingAgreementsSecurityToJSON(
  listPartnerPricingAgreementsSecurity: ListPartnerPricingAgreementsSecurity,
): string {
  return JSON.stringify(
    ListPartnerPricingAgreementsSecurity$outboundSchema.parse(
      listPartnerPricingAgreementsSecurity,
    ),
  );
}

export function listPartnerPricingAgreementsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingAgreementsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListPartnerPricingAgreementsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingAgreementsSecurity' from JSON`,
  );
}

/** @internal */
export const ListPartnerPricingAgreementsRequest$inboundSchema: z.ZodType<
  ListPartnerPricingAgreementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  agreementID: z.array(z.string()).optional(),
  status: z.array(components.FeePlanAgreementStatus$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListPartnerPricingAgreementsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  agreementID?: Array<string> | undefined;
  status?: Array<string> | undefined;
};

/** @internal */
export const ListPartnerPricingAgreementsRequest$outboundSchema: z.ZodType<
  ListPartnerPricingAgreementsRequest$Outbound,
  z.ZodTypeDef,
  ListPartnerPricingAgreementsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  agreementID: z.array(z.string()).optional(),
  status: z.array(components.FeePlanAgreementStatus$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnerPricingAgreementsRequest$ {
  /** @deprecated use `ListPartnerPricingAgreementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListPartnerPricingAgreementsRequest$inboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListPartnerPricingAgreementsRequest$outboundSchema;
  /** @deprecated use `ListPartnerPricingAgreementsRequest$Outbound` instead. */
  export type Outbound = ListPartnerPricingAgreementsRequest$Outbound;
}

export function listPartnerPricingAgreementsRequestToJSON(
  listPartnerPricingAgreementsRequest: ListPartnerPricingAgreementsRequest,
): string {
  return JSON.stringify(
    ListPartnerPricingAgreementsRequest$outboundSchema.parse(
      listPartnerPricingAgreementsRequest,
    ),
  );
}

export function listPartnerPricingAgreementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnerPricingAgreementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListPartnerPricingAgreementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnerPricingAgreementsRequest' from JSON`,
  );
}
