/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkCardGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is an **optional** build number starting at `.01` for subsequent builds in the same quarter.
   *     - If no build number is specified, the version refers to the initial release of the quarter.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type LinkCardRequest = {
  /**
   * Optional header to wait for certain events, such as the creation of a payment method, to occur before returning a response.
   *
   * @remarks
   *
   * When this header is set to `payment-method`, the response will include any payment methods that were created for the newly
   * linked card in the `paymentMethods` field. Otherwise, the `paymentMethods` field will be omitted from the response.
   */
  xWaitFor?: components.LinkCardWaitFor | undefined;
  accountID: string;
  linkCard: components.LinkCard;
};

export type LinkCardResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Card;
};

/** @internal */
export const LinkCardGlobals$inboundSchema: z.ZodType<
  LinkCardGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type LinkCardGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const LinkCardGlobals$outboundSchema: z.ZodType<
  LinkCardGlobals$Outbound,
  z.ZodTypeDef,
  LinkCardGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkCardGlobals$ {
  /** @deprecated use `LinkCardGlobals$inboundSchema` instead. */
  export const inboundSchema = LinkCardGlobals$inboundSchema;
  /** @deprecated use `LinkCardGlobals$outboundSchema` instead. */
  export const outboundSchema = LinkCardGlobals$outboundSchema;
  /** @deprecated use `LinkCardGlobals$Outbound` instead. */
  export type Outbound = LinkCardGlobals$Outbound;
}

export function linkCardGlobalsToJSON(
  linkCardGlobals: LinkCardGlobals,
): string {
  return JSON.stringify(LinkCardGlobals$outboundSchema.parse(linkCardGlobals));
}

export function linkCardGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<LinkCardGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkCardGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkCardGlobals' from JSON`,
  );
}

/** @internal */
export const LinkCardRequest$inboundSchema: z.ZodType<
  LinkCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-wait-for": components.LinkCardWaitFor$inboundSchema.optional(),
  accountID: z.string(),
  LinkCard: components.LinkCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-wait-for": "xWaitFor",
    "LinkCard": "linkCard",
  });
});

/** @internal */
export type LinkCardRequest$Outbound = {
  "x-wait-for"?: string | undefined;
  accountID: string;
  LinkCard: components.LinkCard$Outbound;
};

/** @internal */
export const LinkCardRequest$outboundSchema: z.ZodType<
  LinkCardRequest$Outbound,
  z.ZodTypeDef,
  LinkCardRequest
> = z.object({
  xWaitFor: components.LinkCardWaitFor$outboundSchema.optional(),
  accountID: z.string(),
  linkCard: components.LinkCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xWaitFor: "x-wait-for",
    linkCard: "LinkCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkCardRequest$ {
  /** @deprecated use `LinkCardRequest$inboundSchema` instead. */
  export const inboundSchema = LinkCardRequest$inboundSchema;
  /** @deprecated use `LinkCardRequest$outboundSchema` instead. */
  export const outboundSchema = LinkCardRequest$outboundSchema;
  /** @deprecated use `LinkCardRequest$Outbound` instead. */
  export type Outbound = LinkCardRequest$Outbound;
}

export function linkCardRequestToJSON(
  linkCardRequest: LinkCardRequest,
): string {
  return JSON.stringify(LinkCardRequest$outboundSchema.parse(linkCardRequest));
}

export function linkCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<LinkCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkCardRequest' from JSON`,
  );
}

/** @internal */
export const LinkCardResponse$inboundSchema: z.ZodType<
  LinkCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.Card$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LinkCardResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Card$Outbound;
};

/** @internal */
export const LinkCardResponse$outboundSchema: z.ZodType<
  LinkCardResponse$Outbound,
  z.ZodTypeDef,
  LinkCardResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.Card$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkCardResponse$ {
  /** @deprecated use `LinkCardResponse$inboundSchema` instead. */
  export const inboundSchema = LinkCardResponse$inboundSchema;
  /** @deprecated use `LinkCardResponse$outboundSchema` instead. */
  export const outboundSchema = LinkCardResponse$outboundSchema;
  /** @deprecated use `LinkCardResponse$Outbound` instead. */
  export type Outbound = LinkCardResponse$Outbound;
}

export function linkCardResponseToJSON(
  linkCardResponse: LinkCardResponse,
): string {
  return JSON.stringify(
    LinkCardResponse$outboundSchema.parse(linkCardResponse),
  );
}

export function linkCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<LinkCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkCardResponse' from JSON`,
  );
}
