/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkCardSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type LinkCardRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * Optional header to wait for certain events, such as the creation of a payment method, to occur before returning a response.
   *
   * @remarks
   *
   * When this header is set to `payment-method`, the response will include any payment methods that were created for the newly
   * linked card in the `paymentMethods` field. Otherwise, the `paymentMethods` field will be omitted from the response.
   */
  xWaitFor?: components.LinkCardWaitFor | undefined;
  accountID: string;
  linkCard: components.LinkCard;
};

/** @internal */
export const LinkCardSecurity$inboundSchema: z.ZodType<
  LinkCardSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type LinkCardSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const LinkCardSecurity$outboundSchema: z.ZodType<
  LinkCardSecurity$Outbound,
  z.ZodTypeDef,
  LinkCardSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkCardSecurity$ {
  /** @deprecated use `LinkCardSecurity$inboundSchema` instead. */
  export const inboundSchema = LinkCardSecurity$inboundSchema;
  /** @deprecated use `LinkCardSecurity$outboundSchema` instead. */
  export const outboundSchema = LinkCardSecurity$outboundSchema;
  /** @deprecated use `LinkCardSecurity$Outbound` instead. */
  export type Outbound = LinkCardSecurity$Outbound;
}

export function linkCardSecurityToJSON(
  linkCardSecurity: LinkCardSecurity,
): string {
  return JSON.stringify(
    LinkCardSecurity$outboundSchema.parse(linkCardSecurity),
  );
}

export function linkCardSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LinkCardSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkCardSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkCardSecurity' from JSON`,
  );
}

/** @internal */
export const LinkCardRequest$inboundSchema: z.ZodType<
  LinkCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  "x-wait-for": components.LinkCardWaitFor$inboundSchema.optional(),
  accountID: z.string(),
  LinkCard: components.LinkCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "x-wait-for": "xWaitFor",
    "LinkCard": "linkCard",
  });
});

/** @internal */
export type LinkCardRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  "x-wait-for"?: string | undefined;
  accountID: string;
  LinkCard: components.LinkCard$Outbound;
};

/** @internal */
export const LinkCardRequest$outboundSchema: z.ZodType<
  LinkCardRequest$Outbound,
  z.ZodTypeDef,
  LinkCardRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  xWaitFor: components.LinkCardWaitFor$outboundSchema.optional(),
  accountID: z.string(),
  linkCard: components.LinkCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    xWaitFor: "x-wait-for",
    linkCard: "LinkCard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkCardRequest$ {
  /** @deprecated use `LinkCardRequest$inboundSchema` instead. */
  export const inboundSchema = LinkCardRequest$inboundSchema;
  /** @deprecated use `LinkCardRequest$outboundSchema` instead. */
  export const outboundSchema = LinkCardRequest$outboundSchema;
  /** @deprecated use `LinkCardRequest$Outbound` instead. */
  export type Outbound = LinkCardRequest$Outbound;
}

export function linkCardRequestToJSON(
  linkCardRequest: LinkCardRequest,
): string {
  return JSON.stringify(LinkCardRequest$outboundSchema.parse(linkCardRequest));
}

export function linkCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<LinkCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkCardRequest' from JSON`,
  );
}
