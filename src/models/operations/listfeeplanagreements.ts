/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFeePlanAgreementsSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type ListFeePlanAgreementsRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  /**
   * A comma-separated list of agreement IDs to filter the results by.
   */
  agreementID?: Array<string> | undefined;
  /**
   * A comma-separated list of statuses to filter the results by.
   */
  status?: Array<components.FeePlanAgreementStatus> | undefined;
};

/** @internal */
export const ListFeePlanAgreementsSecurity$inboundSchema: z.ZodType<
  ListFeePlanAgreementsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type ListFeePlanAgreementsSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const ListFeePlanAgreementsSecurity$outboundSchema: z.ZodType<
  ListFeePlanAgreementsSecurity$Outbound,
  z.ZodTypeDef,
  ListFeePlanAgreementsSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFeePlanAgreementsSecurity$ {
  /** @deprecated use `ListFeePlanAgreementsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListFeePlanAgreementsSecurity$inboundSchema;
  /** @deprecated use `ListFeePlanAgreementsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListFeePlanAgreementsSecurity$outboundSchema;
  /** @deprecated use `ListFeePlanAgreementsSecurity$Outbound` instead. */
  export type Outbound = ListFeePlanAgreementsSecurity$Outbound;
}

export function listFeePlanAgreementsSecurityToJSON(
  listFeePlanAgreementsSecurity: ListFeePlanAgreementsSecurity,
): string {
  return JSON.stringify(
    ListFeePlanAgreementsSecurity$outboundSchema.parse(
      listFeePlanAgreementsSecurity,
    ),
  );
}

export function listFeePlanAgreementsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListFeePlanAgreementsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFeePlanAgreementsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFeePlanAgreementsSecurity' from JSON`,
  );
}

/** @internal */
export const ListFeePlanAgreementsRequest$inboundSchema: z.ZodType<
  ListFeePlanAgreementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  agreementID: z.array(z.string()).optional(),
  status: z.array(components.FeePlanAgreementStatus$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type ListFeePlanAgreementsRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  agreementID?: Array<string> | undefined;
  status?: Array<string> | undefined;
};

/** @internal */
export const ListFeePlanAgreementsRequest$outboundSchema: z.ZodType<
  ListFeePlanAgreementsRequest$Outbound,
  z.ZodTypeDef,
  ListFeePlanAgreementsRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  agreementID: z.array(z.string()).optional(),
  status: z.array(components.FeePlanAgreementStatus$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFeePlanAgreementsRequest$ {
  /** @deprecated use `ListFeePlanAgreementsRequest$inboundSchema` instead. */
  export const inboundSchema = ListFeePlanAgreementsRequest$inboundSchema;
  /** @deprecated use `ListFeePlanAgreementsRequest$outboundSchema` instead. */
  export const outboundSchema = ListFeePlanAgreementsRequest$outboundSchema;
  /** @deprecated use `ListFeePlanAgreementsRequest$Outbound` instead. */
  export type Outbound = ListFeePlanAgreementsRequest$Outbound;
}

export function listFeePlanAgreementsRequestToJSON(
  listFeePlanAgreementsRequest: ListFeePlanAgreementsRequest,
): string {
  return JSON.stringify(
    ListFeePlanAgreementsRequest$outboundSchema.parse(
      listFeePlanAgreementsRequest,
    ),
  );
}

export function listFeePlanAgreementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFeePlanAgreementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFeePlanAgreementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFeePlanAgreementsRequest' from JSON`,
  );
}
