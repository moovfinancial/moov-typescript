/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkApplePayTokenGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type LinkApplePayTokenRequest = {
  /**
   * ID of the Moov account representing the cardholder.
   */
  accountID: string;
  linkApplePay: components.LinkApplePay;
};

export type LinkApplePayTokenResponse = {
  headers: { [k: string]: Array<string> };
  result: components.LinkedApplePayPaymentMethod;
};

/** @internal */
export const LinkApplePayTokenGlobals$inboundSchema: z.ZodType<
  LinkApplePayTokenGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
  });
});

/** @internal */
export type LinkApplePayTokenGlobals$Outbound = {
  "x-moov-version": string;
};

/** @internal */
export const LinkApplePayTokenGlobals$outboundSchema: z.ZodType<
  LinkApplePayTokenGlobals$Outbound,
  z.ZodTypeDef,
  LinkApplePayTokenGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkApplePayTokenGlobals$ {
  /** @deprecated use `LinkApplePayTokenGlobals$inboundSchema` instead. */
  export const inboundSchema = LinkApplePayTokenGlobals$inboundSchema;
  /** @deprecated use `LinkApplePayTokenGlobals$outboundSchema` instead. */
  export const outboundSchema = LinkApplePayTokenGlobals$outboundSchema;
  /** @deprecated use `LinkApplePayTokenGlobals$Outbound` instead. */
  export type Outbound = LinkApplePayTokenGlobals$Outbound;
}

export function linkApplePayTokenGlobalsToJSON(
  linkApplePayTokenGlobals: LinkApplePayTokenGlobals,
): string {
  return JSON.stringify(
    LinkApplePayTokenGlobals$outboundSchema.parse(linkApplePayTokenGlobals),
  );
}

export function linkApplePayTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<LinkApplePayTokenGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkApplePayTokenGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkApplePayTokenGlobals' from JSON`,
  );
}

/** @internal */
export const LinkApplePayTokenRequest$inboundSchema: z.ZodType<
  LinkApplePayTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  LinkApplePay: components.LinkApplePay$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "LinkApplePay": "linkApplePay",
  });
});

/** @internal */
export type LinkApplePayTokenRequest$Outbound = {
  accountID: string;
  LinkApplePay: components.LinkApplePay$Outbound;
};

/** @internal */
export const LinkApplePayTokenRequest$outboundSchema: z.ZodType<
  LinkApplePayTokenRequest$Outbound,
  z.ZodTypeDef,
  LinkApplePayTokenRequest
> = z.object({
  accountID: z.string(),
  linkApplePay: components.LinkApplePay$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    linkApplePay: "LinkApplePay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkApplePayTokenRequest$ {
  /** @deprecated use `LinkApplePayTokenRequest$inboundSchema` instead. */
  export const inboundSchema = LinkApplePayTokenRequest$inboundSchema;
  /** @deprecated use `LinkApplePayTokenRequest$outboundSchema` instead. */
  export const outboundSchema = LinkApplePayTokenRequest$outboundSchema;
  /** @deprecated use `LinkApplePayTokenRequest$Outbound` instead. */
  export type Outbound = LinkApplePayTokenRequest$Outbound;
}

export function linkApplePayTokenRequestToJSON(
  linkApplePayTokenRequest: LinkApplePayTokenRequest,
): string {
  return JSON.stringify(
    LinkApplePayTokenRequest$outboundSchema.parse(linkApplePayTokenRequest),
  );
}

export function linkApplePayTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<LinkApplePayTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkApplePayTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkApplePayTokenRequest' from JSON`,
  );
}

/** @internal */
export const LinkApplePayTokenResponse$inboundSchema: z.ZodType<
  LinkApplePayTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.LinkedApplePayPaymentMethod$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LinkApplePayTokenResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.LinkedApplePayPaymentMethod$Outbound;
};

/** @internal */
export const LinkApplePayTokenResponse$outboundSchema: z.ZodType<
  LinkApplePayTokenResponse$Outbound,
  z.ZodTypeDef,
  LinkApplePayTokenResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.LinkedApplePayPaymentMethod$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkApplePayTokenResponse$ {
  /** @deprecated use `LinkApplePayTokenResponse$inboundSchema` instead. */
  export const inboundSchema = LinkApplePayTokenResponse$inboundSchema;
  /** @deprecated use `LinkApplePayTokenResponse$outboundSchema` instead. */
  export const outboundSchema = LinkApplePayTokenResponse$outboundSchema;
  /** @deprecated use `LinkApplePayTokenResponse$Outbound` instead. */
  export type Outbound = LinkApplePayTokenResponse$Outbound;
}

export function linkApplePayTokenResponseToJSON(
  linkApplePayTokenResponse: LinkApplePayTokenResponse,
): string {
  return JSON.stringify(
    LinkApplePayTokenResponse$outboundSchema.parse(linkApplePayTokenResponse),
  );
}

export function linkApplePayTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<LinkApplePayTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkApplePayTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkApplePayTokenResponse' from JSON`,
  );
}
