/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkApplePayTokenSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type LinkApplePayTokenRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  /**
   * ID of the Moov account representing the cardholder.
   */
  accountID: string;
  linkApplePay: components.LinkApplePay;
};

/** @internal */
export const LinkApplePayTokenSecurity$inboundSchema: z.ZodType<
  LinkApplePayTokenSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type LinkApplePayTokenSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const LinkApplePayTokenSecurity$outboundSchema: z.ZodType<
  LinkApplePayTokenSecurity$Outbound,
  z.ZodTypeDef,
  LinkApplePayTokenSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkApplePayTokenSecurity$ {
  /** @deprecated use `LinkApplePayTokenSecurity$inboundSchema` instead. */
  export const inboundSchema = LinkApplePayTokenSecurity$inboundSchema;
  /** @deprecated use `LinkApplePayTokenSecurity$outboundSchema` instead. */
  export const outboundSchema = LinkApplePayTokenSecurity$outboundSchema;
  /** @deprecated use `LinkApplePayTokenSecurity$Outbound` instead. */
  export type Outbound = LinkApplePayTokenSecurity$Outbound;
}

export function linkApplePayTokenSecurityToJSON(
  linkApplePayTokenSecurity: LinkApplePayTokenSecurity,
): string {
  return JSON.stringify(
    LinkApplePayTokenSecurity$outboundSchema.parse(linkApplePayTokenSecurity),
  );
}

export function linkApplePayTokenSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LinkApplePayTokenSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkApplePayTokenSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkApplePayTokenSecurity' from JSON`,
  );
}

/** @internal */
export const LinkApplePayTokenRequest$inboundSchema: z.ZodType<
  LinkApplePayTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  LinkApplePay: components.LinkApplePay$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "LinkApplePay": "linkApplePay",
  });
});

/** @internal */
export type LinkApplePayTokenRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  LinkApplePay: components.LinkApplePay$Outbound;
};

/** @internal */
export const LinkApplePayTokenRequest$outboundSchema: z.ZodType<
  LinkApplePayTokenRequest$Outbound,
  z.ZodTypeDef,
  LinkApplePayTokenRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  linkApplePay: components.LinkApplePay$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    linkApplePay: "LinkApplePay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkApplePayTokenRequest$ {
  /** @deprecated use `LinkApplePayTokenRequest$inboundSchema` instead. */
  export const inboundSchema = LinkApplePayTokenRequest$inboundSchema;
  /** @deprecated use `LinkApplePayTokenRequest$outboundSchema` instead. */
  export const outboundSchema = LinkApplePayTokenRequest$outboundSchema;
  /** @deprecated use `LinkApplePayTokenRequest$Outbound` instead. */
  export type Outbound = LinkApplePayTokenRequest$Outbound;
}

export function linkApplePayTokenRequestToJSON(
  linkApplePayTokenRequest: LinkApplePayTokenRequest,
): string {
  return JSON.stringify(
    LinkApplePayTokenRequest$outboundSchema.parse(linkApplePayTokenRequest),
  );
}

export function linkApplePayTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<LinkApplePayTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkApplePayTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkApplePayTokenRequest' from JSON`,
  );
}
