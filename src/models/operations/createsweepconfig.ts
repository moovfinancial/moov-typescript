/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSweepConfigSecurity = {
  basicAuth?: components.SchemeBasicAuth | undefined;
  oAuth2Auth?: string | undefined;
};

export type CreateSweepConfigRequest = {
  /**
   * Specify an API version.
   */
  xMoovVersion?: components.Versions | undefined;
  accountID: string;
  createSweepConfig: components.CreateSweepConfig;
};

/** @internal */
export const CreateSweepConfigSecurity$inboundSchema: z.ZodType<
  CreateSweepConfigSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BasicAuth: components.SchemeBasicAuth$inboundSchema.optional(),
  OAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BasicAuth": "basicAuth",
    "OAuth2Auth": "oAuth2Auth",
  });
});

/** @internal */
export type CreateSweepConfigSecurity$Outbound = {
  BasicAuth?: components.SchemeBasicAuth$Outbound | undefined;
  OAuth2Auth?: string | undefined;
};

/** @internal */
export const CreateSweepConfigSecurity$outboundSchema: z.ZodType<
  CreateSweepConfigSecurity$Outbound,
  z.ZodTypeDef,
  CreateSweepConfigSecurity
> = z.object({
  basicAuth: components.SchemeBasicAuth$outboundSchema.optional(),
  oAuth2Auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basicAuth: "BasicAuth",
    oAuth2Auth: "OAuth2Auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSweepConfigSecurity$ {
  /** @deprecated use `CreateSweepConfigSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateSweepConfigSecurity$inboundSchema;
  /** @deprecated use `CreateSweepConfigSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateSweepConfigSecurity$outboundSchema;
  /** @deprecated use `CreateSweepConfigSecurity$Outbound` instead. */
  export type Outbound = CreateSweepConfigSecurity$Outbound;
}

export function createSweepConfigSecurityToJSON(
  createSweepConfigSecurity: CreateSweepConfigSecurity,
): string {
  return JSON.stringify(
    CreateSweepConfigSecurity$outboundSchema.parse(createSweepConfigSecurity),
  );
}

export function createSweepConfigSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateSweepConfigSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSweepConfigSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSweepConfigSecurity' from JSON`,
  );
}

/** @internal */
export const CreateSweepConfigRequest$inboundSchema: z.ZodType<
  CreateSweepConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-moov-version": components.Versions$inboundSchema.optional(),
  accountID: z.string(),
  CreateSweepConfig: components.CreateSweepConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-moov-version": "xMoovVersion",
    "CreateSweepConfig": "createSweepConfig",
  });
});

/** @internal */
export type CreateSweepConfigRequest$Outbound = {
  "x-moov-version"?: string | undefined;
  accountID: string;
  CreateSweepConfig: components.CreateSweepConfig$Outbound;
};

/** @internal */
export const CreateSweepConfigRequest$outboundSchema: z.ZodType<
  CreateSweepConfigRequest$Outbound,
  z.ZodTypeDef,
  CreateSweepConfigRequest
> = z.object({
  xMoovVersion: components.Versions$outboundSchema.optional(),
  accountID: z.string(),
  createSweepConfig: components.CreateSweepConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "x-moov-version",
    createSweepConfig: "CreateSweepConfig",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSweepConfigRequest$ {
  /** @deprecated use `CreateSweepConfigRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSweepConfigRequest$inboundSchema;
  /** @deprecated use `CreateSweepConfigRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSweepConfigRequest$outboundSchema;
  /** @deprecated use `CreateSweepConfigRequest$Outbound` instead. */
  export type Outbound = CreateSweepConfigRequest$Outbound;
}

export function createSweepConfigRequestToJSON(
  createSweepConfigRequest: CreateSweepConfigRequest,
): string {
  return JSON.stringify(
    CreateSweepConfigRequest$outboundSchema.parse(createSweepConfigRequest),
  );
}

export function createSweepConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSweepConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSweepConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSweepConfigRequest' from JSON`,
  );
}
