/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSweepConfigGlobals = {
  /**
   * Specify an API version.
   *
   * @remarks
   *
   * API versioning follows the format `vYYYY.QQ.BB`, where
   *   - `YYYY` is the year
   *   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
   *   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter.
   *     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
   *
   * The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
   */
  xMoovVersion?: string | undefined;
};

export type CreateSweepConfigRequest = {
  accountID: string;
  createSweepConfig: components.CreateSweepConfig;
};

export type CreateSweepConfigResponse = {
  headers: { [k: string]: Array<string> };
  result: components.SweepConfig;
};

/** @internal */
export const CreateSweepConfigGlobals$inboundSchema: z.ZodType<
  CreateSweepConfigGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Moov-Version": z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    "X-Moov-Version": "xMoovVersion",
  });
});

/** @internal */
export type CreateSweepConfigGlobals$Outbound = {
  "X-Moov-Version": string;
};

/** @internal */
export const CreateSweepConfigGlobals$outboundSchema: z.ZodType<
  CreateSweepConfigGlobals$Outbound,
  z.ZodTypeDef,
  CreateSweepConfigGlobals
> = z.object({
  xMoovVersion: z.string().default("v2024.01.00"),
}).transform((v) => {
  return remap$(v, {
    xMoovVersion: "X-Moov-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSweepConfigGlobals$ {
  /** @deprecated use `CreateSweepConfigGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateSweepConfigGlobals$inboundSchema;
  /** @deprecated use `CreateSweepConfigGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateSweepConfigGlobals$outboundSchema;
  /** @deprecated use `CreateSweepConfigGlobals$Outbound` instead. */
  export type Outbound = CreateSweepConfigGlobals$Outbound;
}

export function createSweepConfigGlobalsToJSON(
  createSweepConfigGlobals: CreateSweepConfigGlobals,
): string {
  return JSON.stringify(
    CreateSweepConfigGlobals$outboundSchema.parse(createSweepConfigGlobals),
  );
}

export function createSweepConfigGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateSweepConfigGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSweepConfigGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSweepConfigGlobals' from JSON`,
  );
}

/** @internal */
export const CreateSweepConfigRequest$inboundSchema: z.ZodType<
  CreateSweepConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  CreateSweepConfig: components.CreateSweepConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateSweepConfig": "createSweepConfig",
  });
});

/** @internal */
export type CreateSweepConfigRequest$Outbound = {
  accountID: string;
  CreateSweepConfig: components.CreateSweepConfig$Outbound;
};

/** @internal */
export const CreateSweepConfigRequest$outboundSchema: z.ZodType<
  CreateSweepConfigRequest$Outbound,
  z.ZodTypeDef,
  CreateSweepConfigRequest
> = z.object({
  accountID: z.string(),
  createSweepConfig: components.CreateSweepConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createSweepConfig: "CreateSweepConfig",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSweepConfigRequest$ {
  /** @deprecated use `CreateSweepConfigRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSweepConfigRequest$inboundSchema;
  /** @deprecated use `CreateSweepConfigRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSweepConfigRequest$outboundSchema;
  /** @deprecated use `CreateSweepConfigRequest$Outbound` instead. */
  export type Outbound = CreateSweepConfigRequest$Outbound;
}

export function createSweepConfigRequestToJSON(
  createSweepConfigRequest: CreateSweepConfigRequest,
): string {
  return JSON.stringify(
    CreateSweepConfigRequest$outboundSchema.parse(createSweepConfigRequest),
  );
}

export function createSweepConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSweepConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSweepConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSweepConfigRequest' from JSON`,
  );
}

/** @internal */
export const CreateSweepConfigResponse$inboundSchema: z.ZodType<
  CreateSweepConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.SweepConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateSweepConfigResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.SweepConfig$Outbound;
};

/** @internal */
export const CreateSweepConfigResponse$outboundSchema: z.ZodType<
  CreateSweepConfigResponse$Outbound,
  z.ZodTypeDef,
  CreateSweepConfigResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.SweepConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSweepConfigResponse$ {
  /** @deprecated use `CreateSweepConfigResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSweepConfigResponse$inboundSchema;
  /** @deprecated use `CreateSweepConfigResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSweepConfigResponse$outboundSchema;
  /** @deprecated use `CreateSweepConfigResponse$Outbound` instead. */
  export type Outbound = CreateSweepConfigResponse$Outbound;
}

export function createSweepConfigResponseToJSON(
  createSweepConfigResponse: CreateSweepConfigResponse,
): string {
  return JSON.stringify(
    CreateSweepConfigResponse$outboundSchema.parse(createSweepConfigResponse),
  );
}

export function createSweepConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSweepConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSweepConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSweepConfigResponse' from JSON`,
  );
}
