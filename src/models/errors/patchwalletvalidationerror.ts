/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { MoovError } from "./mooverror.js";

export type PatchWalletValidationErrorData = {
  name?: string | undefined;
  status?: string | undefined;
  description?: string | undefined;
  metadata?: string | undefined;
};

export class PatchWalletValidationError extends MoovError {
  status?: string | undefined;
  description?: string | undefined;
  metadata?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PatchWalletValidationErrorData;

  constructor(
    err: PatchWalletValidationErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.status != null) this.status = err.status;
    if (err.description != null) this.description = err.description;
    if (err.metadata != null) this.metadata = err.metadata;

    this.name = "PatchWalletValidationError";
  }
}

/** @internal */
export const PatchWalletValidationError$inboundSchema: z.ZodType<
  PatchWalletValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  status: z.string().optional(),
  description: z.string().optional(),
  metadata: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PatchWalletValidationError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PatchWalletValidationError$Outbound = {
  name?: string | undefined;
  status?: string | undefined;
  description?: string | undefined;
  metadata?: string | undefined;
};

/** @internal */
export const PatchWalletValidationError$outboundSchema: z.ZodType<
  PatchWalletValidationError$Outbound,
  z.ZodTypeDef,
  PatchWalletValidationError
> = z.instanceof(PatchWalletValidationError)
  .transform(v => v.data$)
  .pipe(z.object({
    name: z.string().optional(),
    status: z.string().optional(),
    description: z.string().optional(),
    metadata: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchWalletValidationError$ {
  /** @deprecated use `PatchWalletValidationError$inboundSchema` instead. */
  export const inboundSchema = PatchWalletValidationError$inboundSchema;
  /** @deprecated use `PatchWalletValidationError$outboundSchema` instead. */
  export const outboundSchema = PatchWalletValidationError$outboundSchema;
  /** @deprecated use `PatchWalletValidationError$Outbound` instead. */
  export type Outbound = PatchWalletValidationError$Outbound;
}
