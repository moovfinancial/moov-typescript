/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type CreateSweepConfigErrorData = {
  walletID?: string | undefined;
  status?: string | undefined;
  pushPaymentMethodID?: string | undefined;
  pullPaymentMethodID?: string | undefined;
  statementDescriptor?: string | undefined;
  minimumBalance?: string | undefined;
};

export class CreateSweepConfigError extends Error {
  walletID?: string | undefined;
  status?: string | undefined;
  pushPaymentMethodID?: string | undefined;
  pullPaymentMethodID?: string | undefined;
  statementDescriptor?: string | undefined;
  minimumBalance?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateSweepConfigErrorData;

  constructor(err: CreateSweepConfigErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.walletID != null) this.walletID = err.walletID;
    if (err.status != null) this.status = err.status;
    if (err.pushPaymentMethodID != null) {
      this.pushPaymentMethodID = err.pushPaymentMethodID;
    }
    if (err.pullPaymentMethodID != null) {
      this.pullPaymentMethodID = err.pullPaymentMethodID;
    }
    if (err.statementDescriptor != null) {
      this.statementDescriptor = err.statementDescriptor;
    }
    if (err.minimumBalance != null) this.minimumBalance = err.minimumBalance;

    this.name = "CreateSweepConfigError";
  }
}

/** @internal */
export const CreateSweepConfigError$inboundSchema: z.ZodType<
  CreateSweepConfigError,
  z.ZodTypeDef,
  unknown
> = z.object({
  walletID: z.string().optional(),
  status: z.string().optional(),
  pushPaymentMethodID: z.string().optional(),
  pullPaymentMethodID: z.string().optional(),
  statementDescriptor: z.string().optional(),
  minimumBalance: z.string().optional(),
})
  .transform((v) => {
    return new CreateSweepConfigError(v);
  });

/** @internal */
export type CreateSweepConfigError$Outbound = {
  walletID?: string | undefined;
  status?: string | undefined;
  pushPaymentMethodID?: string | undefined;
  pullPaymentMethodID?: string | undefined;
  statementDescriptor?: string | undefined;
  minimumBalance?: string | undefined;
};

/** @internal */
export const CreateSweepConfigError$outboundSchema: z.ZodType<
  CreateSweepConfigError$Outbound,
  z.ZodTypeDef,
  CreateSweepConfigError
> = z.instanceof(CreateSweepConfigError)
  .transform(v => v.data$)
  .pipe(z.object({
    walletID: z.string().optional(),
    status: z.string().optional(),
    pushPaymentMethodID: z.string().optional(),
    pullPaymentMethodID: z.string().optional(),
    statementDescriptor: z.string().optional(),
    minimumBalance: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSweepConfigError$ {
  /** @deprecated use `CreateSweepConfigError$inboundSchema` instead. */
  export const inboundSchema = CreateSweepConfigError$inboundSchema;
  /** @deprecated use `CreateSweepConfigError$outboundSchema` instead. */
  export const outboundSchema = CreateSweepConfigError$outboundSchema;
  /** @deprecated use `CreateSweepConfigError$Outbound` instead. */
  export type Outbound = CreateSweepConfigError$Outbound;
}
