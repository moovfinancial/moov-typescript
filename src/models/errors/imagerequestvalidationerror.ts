/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import * as components from "../components/index.js";
import { MoovError } from "./mooverror.js";

export type ImageRequestValidationErrorData = {
  image?: string | undefined;
  metadata?: components.ImageMetadataValidationError | undefined;
};

export class ImageRequestValidationError extends MoovError {
  image?: string | undefined;
  metadata?: components.ImageMetadataValidationError | undefined;

  /** The original data that was passed to this error instance. */
  data$: ImageRequestValidationErrorData;

  constructor(
    err: ImageRequestValidationErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.image != null) this.image = err.image;
    if (err.metadata != null) this.metadata = err.metadata;

    this.name = "ImageRequestValidationError";
  }
}

/** @internal */
export const ImageRequestValidationError$inboundSchema: z.ZodType<
  ImageRequestValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.string().optional(),
  metadata: components.ImageMetadataValidationError$inboundSchema.optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ImageRequestValidationError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ImageRequestValidationError$Outbound = {
  image?: string | undefined;
  metadata?: components.ImageMetadataValidationError$Outbound | undefined;
};

/** @internal */
export const ImageRequestValidationError$outboundSchema: z.ZodType<
  ImageRequestValidationError$Outbound,
  z.ZodTypeDef,
  ImageRequestValidationError
> = z.instanceof(ImageRequestValidationError)
  .transform(v => v.data$)
  .pipe(z.object({
    image: z.string().optional(),
    metadata: components.ImageMetadataValidationError$outboundSchema.optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageRequestValidationError$ {
  /** @deprecated use `ImageRequestValidationError$inboundSchema` instead. */
  export const inboundSchema = ImageRequestValidationError$inboundSchema;
  /** @deprecated use `ImageRequestValidationError$outboundSchema` instead. */
  export const outboundSchema = ImageRequestValidationError$outboundSchema;
  /** @deprecated use `ImageRequestValidationError$Outbound` instead. */
  export type Outbound = ImageRequestValidationError$Outbound;
}
