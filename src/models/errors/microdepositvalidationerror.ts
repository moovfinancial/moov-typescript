/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type MicroDepositValidationErrorData = {
  amounts?: string | undefined;
};

export class MicroDepositValidationError extends Error {
  amounts?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: MicroDepositValidationErrorData;

  constructor(err: MicroDepositValidationErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.amounts != null) this.amounts = err.amounts;

    this.name = "MicroDepositValidationError";
  }
}

/** @internal */
export const MicroDepositValidationError$inboundSchema: z.ZodType<
  MicroDepositValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  amounts: z.string().optional(),
})
  .transform((v) => {
    return new MicroDepositValidationError(v);
  });

/** @internal */
export type MicroDepositValidationError$Outbound = {
  amounts?: string | undefined;
};

/** @internal */
export const MicroDepositValidationError$outboundSchema: z.ZodType<
  MicroDepositValidationError$Outbound,
  z.ZodTypeDef,
  MicroDepositValidationError
> = z.instanceof(MicroDepositValidationError)
  .transform(v => v.data$)
  .pipe(z.object({
    amounts: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MicroDepositValidationError$ {
  /** @deprecated use `MicroDepositValidationError$inboundSchema` instead. */
  export const inboundSchema = MicroDepositValidationError$inboundSchema;
  /** @deprecated use `MicroDepositValidationError$outboundSchema` instead. */
  export const outboundSchema = MicroDepositValidationError$outboundSchema;
  /** @deprecated use `MicroDepositValidationError$Outbound` instead. */
  export type Outbound = MicroDepositValidationError$Outbound;
}
