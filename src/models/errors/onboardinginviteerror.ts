/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type OnboardingInviteErrorData = {
  returnURL?: string | undefined;
  termsOfServiceURL?: string | undefined;
  scopes?: { [k: string]: string } | undefined;
  capabilities?: { [k: string]: string } | undefined;
  feePlanCodes?: { [k: string]: string } | undefined;
};

export class OnboardingInviteError extends Error {
  returnURL?: string | undefined;
  termsOfServiceURL?: string | undefined;
  scopes?: { [k: string]: string } | undefined;
  capabilities?: { [k: string]: string } | undefined;
  feePlanCodes?: { [k: string]: string } | undefined;

  /** The original data that was passed to this error instance. */
  data$: OnboardingInviteErrorData;

  constructor(err: OnboardingInviteErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.returnURL != null) this.returnURL = err.returnURL;
    if (err.termsOfServiceURL != null) {
      this.termsOfServiceURL = err.termsOfServiceURL;
    }
    if (err.scopes != null) this.scopes = err.scopes;
    if (err.capabilities != null) this.capabilities = err.capabilities;
    if (err.feePlanCodes != null) this.feePlanCodes = err.feePlanCodes;

    this.name = "OnboardingInviteError";
  }
}

/** @internal */
export const OnboardingInviteError$inboundSchema: z.ZodType<
  OnboardingInviteError,
  z.ZodTypeDef,
  unknown
> = z.object({
  returnURL: z.string().optional(),
  termsOfServiceURL: z.string().optional(),
  scopes: z.record(z.string()).optional(),
  capabilities: z.record(z.string()).optional(),
  feePlanCodes: z.record(z.string()).optional(),
})
  .transform((v) => {
    return new OnboardingInviteError(v);
  });

/** @internal */
export type OnboardingInviteError$Outbound = {
  returnURL?: string | undefined;
  termsOfServiceURL?: string | undefined;
  scopes?: { [k: string]: string } | undefined;
  capabilities?: { [k: string]: string } | undefined;
  feePlanCodes?: { [k: string]: string } | undefined;
};

/** @internal */
export const OnboardingInviteError$outboundSchema: z.ZodType<
  OnboardingInviteError$Outbound,
  z.ZodTypeDef,
  OnboardingInviteError
> = z.instanceof(OnboardingInviteError)
  .transform(v => v.data$)
  .pipe(z.object({
    returnURL: z.string().optional(),
    termsOfServiceURL: z.string().optional(),
    scopes: z.record(z.string()).optional(),
    capabilities: z.record(z.string()).optional(),
    feePlanCodes: z.record(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingInviteError$ {
  /** @deprecated use `OnboardingInviteError$inboundSchema` instead. */
  export const inboundSchema = OnboardingInviteError$inboundSchema;
  /** @deprecated use `OnboardingInviteError$outboundSchema` instead. */
  export const outboundSchema = OnboardingInviteError$outboundSchema;
  /** @deprecated use `OnboardingInviteError$Outbound` instead. */
  export type Outbound = OnboardingInviteError$Outbound;
}
