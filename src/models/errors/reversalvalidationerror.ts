/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type ReversalValidationErrorData = {
  amount?: string | undefined;
};

export class ReversalValidationError extends Error {
  amount?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ReversalValidationErrorData;

  constructor(err: ReversalValidationErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.amount != null) this.amount = err.amount;

    this.name = "ReversalValidationError";
  }
}

/** @internal */
export const ReversalValidationError$inboundSchema: z.ZodType<
  ReversalValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
})
  .transform((v) => {
    return new ReversalValidationError(v);
  });

/** @internal */
export type ReversalValidationError$Outbound = {
  amount?: string | undefined;
};

/** @internal */
export const ReversalValidationError$outboundSchema: z.ZodType<
  ReversalValidationError$Outbound,
  z.ZodTypeDef,
  ReversalValidationError
> = z.instanceof(ReversalValidationError)
  .transform(v => v.data$)
  .pipe(z.object({
    amount: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReversalValidationError$ {
  /** @deprecated use `ReversalValidationError$inboundSchema` instead. */
  export const inboundSchema = ReversalValidationError$inboundSchema;
  /** @deprecated use `ReversalValidationError$outboundSchema` instead. */
  export const outboundSchema = ReversalValidationError$outboundSchema;
  /** @deprecated use `ReversalValidationError$Outbound` instead. */
  export type Outbound = ReversalValidationError$Outbound;
}
