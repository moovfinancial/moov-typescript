/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IndividualNameError = {
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  suffix?: string | undefined;
};

/** @internal */
export const IndividualNameError$inboundSchema: z.ZodType<
  IndividualNameError,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string().optional(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
  suffix: z.string().optional(),
});

/** @internal */
export type IndividualNameError$Outbound = {
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  suffix?: string | undefined;
};

/** @internal */
export const IndividualNameError$outboundSchema: z.ZodType<
  IndividualNameError$Outbound,
  z.ZodTypeDef,
  IndividualNameError
> = z.object({
  firstName: z.string().optional(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
  suffix: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndividualNameError$ {
  /** @deprecated use `IndividualNameError$inboundSchema` instead. */
  export const inboundSchema = IndividualNameError$inboundSchema;
  /** @deprecated use `IndividualNameError$outboundSchema` instead. */
  export const outboundSchema = IndividualNameError$outboundSchema;
  /** @deprecated use `IndividualNameError$Outbound` instead. */
  export type Outbound = IndividualNameError$Outbound;
}

export function individualNameErrorToJSON(
  individualNameError: IndividualNameError,
): string {
  return JSON.stringify(
    IndividualNameError$outboundSchema.parse(individualNameError),
  );
}

export function individualNameErrorFromJSON(
  jsonString: string,
): SafeParseResult<IndividualNameError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndividualNameError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndividualNameError' from JSON`,
  );
}
