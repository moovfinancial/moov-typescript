/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaxIDEin = {
  number: string;
};

/**
 * An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
 */
export type TaxID = {
  ein: TaxIDEin;
};

/** @internal */
export const TaxIDEin$inboundSchema: z.ZodType<
  TaxIDEin,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.string(),
});

/** @internal */
export type TaxIDEin$Outbound = {
  number: string;
};

/** @internal */
export const TaxIDEin$outboundSchema: z.ZodType<
  TaxIDEin$Outbound,
  z.ZodTypeDef,
  TaxIDEin
> = z.object({
  number: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxIDEin$ {
  /** @deprecated use `TaxIDEin$inboundSchema` instead. */
  export const inboundSchema = TaxIDEin$inboundSchema;
  /** @deprecated use `TaxIDEin$outboundSchema` instead. */
  export const outboundSchema = TaxIDEin$outboundSchema;
  /** @deprecated use `TaxIDEin$Outbound` instead. */
  export type Outbound = TaxIDEin$Outbound;
}

export function taxIDEinToJSON(taxIDEin: TaxIDEin): string {
  return JSON.stringify(TaxIDEin$outboundSchema.parse(taxIDEin));
}

export function taxIDEinFromJSON(
  jsonString: string,
): SafeParseResult<TaxIDEin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxIDEin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxIDEin' from JSON`,
  );
}

/** @internal */
export const TaxID$inboundSchema: z.ZodType<TaxID, z.ZodTypeDef, unknown> = z
  .object({
    ein: z.lazy(() => TaxIDEin$inboundSchema),
  });

/** @internal */
export type TaxID$Outbound = {
  ein: TaxIDEin$Outbound;
};

/** @internal */
export const TaxID$outboundSchema: z.ZodType<
  TaxID$Outbound,
  z.ZodTypeDef,
  TaxID
> = z.object({
  ein: z.lazy(() => TaxIDEin$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxID$ {
  /** @deprecated use `TaxID$inboundSchema` instead. */
  export const inboundSchema = TaxID$inboundSchema;
  /** @deprecated use `TaxID$outboundSchema` instead. */
  export const outboundSchema = TaxID$outboundSchema;
  /** @deprecated use `TaxID$Outbound` instead. */
  export type Outbound = TaxID$Outbound;
}

export function taxIDToJSON(taxID: TaxID): string {
  return JSON.stringify(TaxID$outboundSchema.parse(taxID));
}

export function taxIDFromJSON(
  jsonString: string,
): SafeParseResult<TaxID, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxID$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxID' from JSON`,
  );
}
