/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EstimatedActivityError = {
  averageTransactionAmount?: string | undefined;
  maximumTransactionAmount?: string | undefined;
  monthlyVolumeRange?: string | undefined;
};

/** @internal */
export const EstimatedActivityError$inboundSchema: z.ZodType<
  EstimatedActivityError,
  z.ZodTypeDef,
  unknown
> = z.object({
  averageTransactionAmount: z.string().optional(),
  maximumTransactionAmount: z.string().optional(),
  monthlyVolumeRange: z.string().optional(),
});

/** @internal */
export type EstimatedActivityError$Outbound = {
  averageTransactionAmount?: string | undefined;
  maximumTransactionAmount?: string | undefined;
  monthlyVolumeRange?: string | undefined;
};

/** @internal */
export const EstimatedActivityError$outboundSchema: z.ZodType<
  EstimatedActivityError$Outbound,
  z.ZodTypeDef,
  EstimatedActivityError
> = z.object({
  averageTransactionAmount: z.string().optional(),
  maximumTransactionAmount: z.string().optional(),
  monthlyVolumeRange: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EstimatedActivityError$ {
  /** @deprecated use `EstimatedActivityError$inboundSchema` instead. */
  export const inboundSchema = EstimatedActivityError$inboundSchema;
  /** @deprecated use `EstimatedActivityError$outboundSchema` instead. */
  export const outboundSchema = EstimatedActivityError$outboundSchema;
  /** @deprecated use `EstimatedActivityError$Outbound` instead. */
  export type Outbound = EstimatedActivityError$Outbound;
}

export function estimatedActivityErrorToJSON(
  estimatedActivityError: EstimatedActivityError,
): string {
  return JSON.stringify(
    EstimatedActivityError$outboundSchema.parse(estimatedActivityError),
  );
}

export function estimatedActivityErrorFromJSON(
  jsonString: string,
): SafeParseResult<EstimatedActivityError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EstimatedActivityError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EstimatedActivityError' from JSON`,
  );
}
