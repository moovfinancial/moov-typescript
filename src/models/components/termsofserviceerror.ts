/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Manual = {
  acceptedDate?: string | undefined;
  acceptedDomain?: string | undefined;
  acceptedIP?: string | undefined;
  acceptedUserAgent?: string | undefined;
};

export type TermsOfServiceError = {
  token?: string | undefined;
  manual?: Manual | undefined;
};

/** @internal */
export const Manual$inboundSchema: z.ZodType<Manual, z.ZodTypeDef, unknown> = z
  .object({
    acceptedDate: z.string().optional(),
    acceptedDomain: z.string().optional(),
    acceptedIP: z.string().optional(),
    acceptedUserAgent: z.string().optional(),
  });

/** @internal */
export type Manual$Outbound = {
  acceptedDate?: string | undefined;
  acceptedDomain?: string | undefined;
  acceptedIP?: string | undefined;
  acceptedUserAgent?: string | undefined;
};

/** @internal */
export const Manual$outboundSchema: z.ZodType<
  Manual$Outbound,
  z.ZodTypeDef,
  Manual
> = z.object({
  acceptedDate: z.string().optional(),
  acceptedDomain: z.string().optional(),
  acceptedIP: z.string().optional(),
  acceptedUserAgent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Manual$ {
  /** @deprecated use `Manual$inboundSchema` instead. */
  export const inboundSchema = Manual$inboundSchema;
  /** @deprecated use `Manual$outboundSchema` instead. */
  export const outboundSchema = Manual$outboundSchema;
  /** @deprecated use `Manual$Outbound` instead. */
  export type Outbound = Manual$Outbound;
}

export function manualToJSON(manual: Manual): string {
  return JSON.stringify(Manual$outboundSchema.parse(manual));
}

export function manualFromJSON(
  jsonString: string,
): SafeParseResult<Manual, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Manual$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Manual' from JSON`,
  );
}

/** @internal */
export const TermsOfServiceError$inboundSchema: z.ZodType<
  TermsOfServiceError,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  manual: z.lazy(() => Manual$inboundSchema).optional(),
});

/** @internal */
export type TermsOfServiceError$Outbound = {
  token?: string | undefined;
  manual?: Manual$Outbound | undefined;
};

/** @internal */
export const TermsOfServiceError$outboundSchema: z.ZodType<
  TermsOfServiceError$Outbound,
  z.ZodTypeDef,
  TermsOfServiceError
> = z.object({
  token: z.string().optional(),
  manual: z.lazy(() => Manual$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TermsOfServiceError$ {
  /** @deprecated use `TermsOfServiceError$inboundSchema` instead. */
  export const inboundSchema = TermsOfServiceError$inboundSchema;
  /** @deprecated use `TermsOfServiceError$outboundSchema` instead. */
  export const outboundSchema = TermsOfServiceError$outboundSchema;
  /** @deprecated use `TermsOfServiceError$Outbound` instead. */
  export type Outbound = TermsOfServiceError$Outbound;
}

export function termsOfServiceErrorToJSON(
  termsOfServiceError: TermsOfServiceError,
): string {
  return JSON.stringify(
    TermsOfServiceError$outboundSchema.parse(termsOfServiceError),
  );
}

export function termsOfServiceErrorFromJSON(
  jsonString: string,
): SafeParseResult<TermsOfServiceError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TermsOfServiceError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TermsOfServiceError' from JSON`,
  );
}
