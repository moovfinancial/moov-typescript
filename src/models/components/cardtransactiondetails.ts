/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardTransactionFailureCode,
  CardTransactionFailureCode$inboundSchema,
  CardTransactionFailureCode$outboundSchema,
} from "./cardtransactionfailurecode.js";
import {
  CardTransactionStatus,
  CardTransactionStatus$inboundSchema,
  CardTransactionStatus$outboundSchema,
} from "./cardtransactionstatus.js";
import {
  TransactionSource,
  TransactionSource$inboundSchema,
  TransactionSource$outboundSchema,
} from "./transactionsource.js";

/**
 * Card-specific details about the transaction.
 */
export type CardTransactionDetails = {
  /**
   * Status of a transaction within the card payment lifecycle.
   */
  status: CardTransactionStatus;
  failureCode?: CardTransactionFailureCode | undefined;
  /**
   * An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
   */
  dynamicDescriptor?: string | undefined;
  /**
   * Specifies the nature and initiator of a transaction.
   *
   * @remarks
   *
   * Crucial for recurring and merchant-initiated transactions as per card scheme rules.
   * Omit for customer-initiated e-commerce transactions.
   */
  transactionSource?: TransactionSource | undefined;
  initiatedOn?: Date | undefined;
  confirmedOn?: Date | undefined;
  settledOn?: Date | undefined;
  failedOn?: Date | undefined;
  canceledOn?: Date | undefined;
  completedOn?: Date | undefined;
  /**
   * The program assigned by the card network that determines the interchange rate for the transfer.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  interchangeQualification?: string | undefined;
  /**
   * The program assigned by the card network that determines the interchange rate for the transfer.
   */
  feeProgram?: string | undefined;
  /**
   * An alphanumeric code generated by the card network to demonstrate approval for the transaction.
   */
  authorizationCode?: string | undefined;
};

/** @internal */
export const CardTransactionDetails$inboundSchema: z.ZodType<
  CardTransactionDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: CardTransactionStatus$inboundSchema,
  failureCode: CardTransactionFailureCode$inboundSchema.optional(),
  dynamicDescriptor: z.string().optional(),
  transactionSource: TransactionSource$inboundSchema.optional(),
  initiatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  confirmedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  settledOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  failedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  canceledOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  interchangeQualification: z.string().optional(),
  feeProgram: z.string().optional(),
  authorizationCode: z.string().optional(),
});

/** @internal */
export type CardTransactionDetails$Outbound = {
  status: string;
  failureCode?: string | undefined;
  dynamicDescriptor?: string | undefined;
  transactionSource?: string | undefined;
  initiatedOn?: string | undefined;
  confirmedOn?: string | undefined;
  settledOn?: string | undefined;
  failedOn?: string | undefined;
  canceledOn?: string | undefined;
  completedOn?: string | undefined;
  interchangeQualification?: string | undefined;
  feeProgram?: string | undefined;
  authorizationCode?: string | undefined;
};

/** @internal */
export const CardTransactionDetails$outboundSchema: z.ZodType<
  CardTransactionDetails$Outbound,
  z.ZodTypeDef,
  CardTransactionDetails
> = z.object({
  status: CardTransactionStatus$outboundSchema,
  failureCode: CardTransactionFailureCode$outboundSchema.optional(),
  dynamicDescriptor: z.string().optional(),
  transactionSource: TransactionSource$outboundSchema.optional(),
  initiatedOn: z.date().transform(v => v.toISOString()).optional(),
  confirmedOn: z.date().transform(v => v.toISOString()).optional(),
  settledOn: z.date().transform(v => v.toISOString()).optional(),
  failedOn: z.date().transform(v => v.toISOString()).optional(),
  canceledOn: z.date().transform(v => v.toISOString()).optional(),
  completedOn: z.date().transform(v => v.toISOString()).optional(),
  interchangeQualification: z.string().optional(),
  feeProgram: z.string().optional(),
  authorizationCode: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardTransactionDetails$ {
  /** @deprecated use `CardTransactionDetails$inboundSchema` instead. */
  export const inboundSchema = CardTransactionDetails$inboundSchema;
  /** @deprecated use `CardTransactionDetails$outboundSchema` instead. */
  export const outboundSchema = CardTransactionDetails$outboundSchema;
  /** @deprecated use `CardTransactionDetails$Outbound` instead. */
  export type Outbound = CardTransactionDetails$Outbound;
}

export function cardTransactionDetailsToJSON(
  cardTransactionDetails: CardTransactionDetails,
): string {
  return JSON.stringify(
    CardTransactionDetails$outboundSchema.parse(cardTransactionDetails),
  );
}

export function cardTransactionDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CardTransactionDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardTransactionDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardTransactionDetails' from JSON`,
  );
}
