/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DebitHoldPeriod,
  DebitHoldPeriod$inboundSchema,
  DebitHoldPeriod$outboundSchema,
} from "./debitholdperiod.js";
import {
  SECCode,
  SECCode$inboundSchema,
  SECCode$outboundSchema,
} from "./seccode.js";

export type CreateTransferSourceACH = {
  /**
   * An optional override of the default NACHA company entry description for a transfer.
   */
  companyEntryDescription?: string | undefined;
  /**
   * An optional override of the default NACHA company name for a transfer.
   */
  originatingCompanyName?: string | undefined;
  /**
   * An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.
   */
  debitHoldPeriod?: DebitHoldPeriod | undefined;
  /**
   * Code used to identify the ACH authorization method.
   */
  secCode?: SECCode | undefined;
};

/** @internal */
export const CreateTransferSourceACH$inboundSchema: z.ZodType<
  CreateTransferSourceACH,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyEntryDescription: z.string().optional(),
  originatingCompanyName: z.string().optional(),
  debitHoldPeriod: DebitHoldPeriod$inboundSchema.optional(),
  secCode: SECCode$inboundSchema.optional(),
});

/** @internal */
export type CreateTransferSourceACH$Outbound = {
  companyEntryDescription?: string | undefined;
  originatingCompanyName?: string | undefined;
  debitHoldPeriod?: string | undefined;
  secCode?: string | undefined;
};

/** @internal */
export const CreateTransferSourceACH$outboundSchema: z.ZodType<
  CreateTransferSourceACH$Outbound,
  z.ZodTypeDef,
  CreateTransferSourceACH
> = z.object({
  companyEntryDescription: z.string().optional(),
  originatingCompanyName: z.string().optional(),
  debitHoldPeriod: DebitHoldPeriod$outboundSchema.optional(),
  secCode: SECCode$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferSourceACH$ {
  /** @deprecated use `CreateTransferSourceACH$inboundSchema` instead. */
  export const inboundSchema = CreateTransferSourceACH$inboundSchema;
  /** @deprecated use `CreateTransferSourceACH$outboundSchema` instead. */
  export const outboundSchema = CreateTransferSourceACH$outboundSchema;
  /** @deprecated use `CreateTransferSourceACH$Outbound` instead. */
  export type Outbound = CreateTransferSourceACH$Outbound;
}

export function createTransferSourceACHToJSON(
  createTransferSourceACH: CreateTransferSourceACH,
): string {
  return JSON.stringify(
    CreateTransferSourceACH$outboundSchema.parse(createTransferSourceACH),
  );
}

export function createTransferSourceACHFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferSourceACH, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferSourceACH$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferSourceACH' from JSON`,
  );
}
