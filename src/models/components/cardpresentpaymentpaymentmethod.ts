/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TerminalCard,
  TerminalCard$inboundSchema,
  TerminalCard$Outbound,
  TerminalCard$outboundSchema,
} from "./terminalcard.js";

export const CardPresentPaymentPaymentMethodPaymentMethodType = {
  CardPresentPayment: "card-present-payment",
} as const;
export type CardPresentPaymentPaymentMethodPaymentMethodType = ClosedEnum<
  typeof CardPresentPaymentPaymentMethodPaymentMethodType
>;

/**
 * A card used at point of sale terminal for a card present transaction as contained within a payment method.
 */
export type CardPresentPaymentPaymentMethod = {
  /**
   * ID of the payment method.
   */
  paymentMethodID: string;
  paymentMethodType: CardPresentPaymentPaymentMethodPaymentMethodType;
  /**
   * Describes payment card details captured with tap or in-person payment.
   */
  terminalCard?: TerminalCard | undefined;
};

/** @internal */
export const CardPresentPaymentPaymentMethodPaymentMethodType$inboundSchema:
  z.ZodNativeEnum<typeof CardPresentPaymentPaymentMethodPaymentMethodType> = z
    .nativeEnum(CardPresentPaymentPaymentMethodPaymentMethodType);

/** @internal */
export const CardPresentPaymentPaymentMethodPaymentMethodType$outboundSchema:
  z.ZodNativeEnum<typeof CardPresentPaymentPaymentMethodPaymentMethodType> =
    CardPresentPaymentPaymentMethodPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardPresentPaymentPaymentMethodPaymentMethodType$ {
  /** @deprecated use `CardPresentPaymentPaymentMethodPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema =
    CardPresentPaymentPaymentMethodPaymentMethodType$inboundSchema;
  /** @deprecated use `CardPresentPaymentPaymentMethodPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema =
    CardPresentPaymentPaymentMethodPaymentMethodType$outboundSchema;
}

/** @internal */
export const CardPresentPaymentPaymentMethod$inboundSchema: z.ZodType<
  CardPresentPaymentPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType:
    CardPresentPaymentPaymentMethodPaymentMethodType$inboundSchema,
  terminalCard: TerminalCard$inboundSchema.optional(),
});

/** @internal */
export type CardPresentPaymentPaymentMethod$Outbound = {
  paymentMethodID: string;
  paymentMethodType: string;
  terminalCard?: TerminalCard$Outbound | undefined;
};

/** @internal */
export const CardPresentPaymentPaymentMethod$outboundSchema: z.ZodType<
  CardPresentPaymentPaymentMethod$Outbound,
  z.ZodTypeDef,
  CardPresentPaymentPaymentMethod
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType:
    CardPresentPaymentPaymentMethodPaymentMethodType$outboundSchema,
  terminalCard: TerminalCard$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardPresentPaymentPaymentMethod$ {
  /** @deprecated use `CardPresentPaymentPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = CardPresentPaymentPaymentMethod$inboundSchema;
  /** @deprecated use `CardPresentPaymentPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = CardPresentPaymentPaymentMethod$outboundSchema;
  /** @deprecated use `CardPresentPaymentPaymentMethod$Outbound` instead. */
  export type Outbound = CardPresentPaymentPaymentMethod$Outbound;
}

export function cardPresentPaymentPaymentMethodToJSON(
  cardPresentPaymentPaymentMethod: CardPresentPaymentPaymentMethod,
): string {
  return JSON.stringify(
    CardPresentPaymentPaymentMethod$outboundSchema.parse(
      cardPresentPaymentPaymentMethod,
    ),
  );
}

export function cardPresentPaymentPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<CardPresentPaymentPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardPresentPaymentPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardPresentPaymentPaymentMethod' from JSON`,
  );
}
