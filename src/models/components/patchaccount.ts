/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AddressUpdate,
  AddressUpdate$inboundSchema,
  AddressUpdate$Outbound,
  AddressUpdate$outboundSchema,
} from "./addressupdate.js";
import {
  CreateAccountSettings,
  CreateAccountSettings$inboundSchema,
  CreateAccountSettings$Outbound,
  CreateAccountSettings$outboundSchema,
} from "./createaccountsettings.js";
import {
  ManualTermsOfServiceUpdate,
  ManualTermsOfServiceUpdate$inboundSchema,
  ManualTermsOfServiceUpdate$Outbound,
  ManualTermsOfServiceUpdate$outboundSchema,
} from "./manualtermsofserviceupdate.js";
import {
  PatchProfile,
  PatchProfile$inboundSchema,
  PatchProfile$Outbound,
  PatchProfile$outboundSchema,
} from "./patchprofile.js";
import {
  PhoneNumber,
  PhoneNumber$inboundSchema,
  PhoneNumber$Outbound,
  PhoneNumber$outboundSchema,
} from "./phonenumber.js";
import {
  TermsOfServiceTokenUpdate,
  TermsOfServiceTokenUpdate$inboundSchema,
  TermsOfServiceTokenUpdate$Outbound,
  TermsOfServiceTokenUpdate$outboundSchema,
} from "./termsofservicetokenupdate.js";

export type PatchAccountTermsOfService =
  | TermsOfServiceTokenUpdate
  | ManualTermsOfServiceUpdate;

/**
 * User-provided information that can be displayed on credit card transactions for customers to use when
 *
 * @remarks
 * contacting a customer support team. This data is only allowed on a business account.
 */
export type PatchAccountCustomerSupport = {
  phone?: PhoneNumber | undefined;
  email?: string | undefined;
  address?: AddressUpdate | undefined;
  website?: string | undefined;
};

/**
 * Describes the fields available when patching a Moov account.
 */
export type PatchAccount = {
  /**
   * Describes the fields available when patching a profile.
   *
   * @remarks
   * Each object can be patched independent of patching the other fields.
   */
  profile?: PatchProfile | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  termsOfService?:
    | TermsOfServiceTokenUpdate
    | ManualTermsOfServiceUpdate
    | undefined;
  foreignID?: string | undefined;
  customerSupport?: PatchAccountCustomerSupport | null | undefined;
  settings?: CreateAccountSettings | undefined;
};

/** @internal */
export const PatchAccountTermsOfService$inboundSchema: z.ZodType<
  PatchAccountTermsOfService,
  z.ZodTypeDef,
  unknown
> = z.union([
  TermsOfServiceTokenUpdate$inboundSchema,
  ManualTermsOfServiceUpdate$inboundSchema,
]);

/** @internal */
export type PatchAccountTermsOfService$Outbound =
  | TermsOfServiceTokenUpdate$Outbound
  | ManualTermsOfServiceUpdate$Outbound;

/** @internal */
export const PatchAccountTermsOfService$outboundSchema: z.ZodType<
  PatchAccountTermsOfService$Outbound,
  z.ZodTypeDef,
  PatchAccountTermsOfService
> = z.union([
  TermsOfServiceTokenUpdate$outboundSchema,
  ManualTermsOfServiceUpdate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAccountTermsOfService$ {
  /** @deprecated use `PatchAccountTermsOfService$inboundSchema` instead. */
  export const inboundSchema = PatchAccountTermsOfService$inboundSchema;
  /** @deprecated use `PatchAccountTermsOfService$outboundSchema` instead. */
  export const outboundSchema = PatchAccountTermsOfService$outboundSchema;
  /** @deprecated use `PatchAccountTermsOfService$Outbound` instead. */
  export type Outbound = PatchAccountTermsOfService$Outbound;
}

export function patchAccountTermsOfServiceToJSON(
  patchAccountTermsOfService: PatchAccountTermsOfService,
): string {
  return JSON.stringify(
    PatchAccountTermsOfService$outboundSchema.parse(patchAccountTermsOfService),
  );
}

export function patchAccountTermsOfServiceFromJSON(
  jsonString: string,
): SafeParseResult<PatchAccountTermsOfService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAccountTermsOfService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAccountTermsOfService' from JSON`,
  );
}

/** @internal */
export const PatchAccountCustomerSupport$inboundSchema: z.ZodType<
  PatchAccountCustomerSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  phone: PhoneNumber$inboundSchema.optional(),
  email: z.string().optional(),
  address: AddressUpdate$inboundSchema.optional(),
  website: z.string().optional(),
});

/** @internal */
export type PatchAccountCustomerSupport$Outbound = {
  phone?: PhoneNumber$Outbound | undefined;
  email?: string | undefined;
  address?: AddressUpdate$Outbound | undefined;
  website?: string | undefined;
};

/** @internal */
export const PatchAccountCustomerSupport$outboundSchema: z.ZodType<
  PatchAccountCustomerSupport$Outbound,
  z.ZodTypeDef,
  PatchAccountCustomerSupport
> = z.object({
  phone: PhoneNumber$outboundSchema.optional(),
  email: z.string().optional(),
  address: AddressUpdate$outboundSchema.optional(),
  website: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAccountCustomerSupport$ {
  /** @deprecated use `PatchAccountCustomerSupport$inboundSchema` instead. */
  export const inboundSchema = PatchAccountCustomerSupport$inboundSchema;
  /** @deprecated use `PatchAccountCustomerSupport$outboundSchema` instead. */
  export const outboundSchema = PatchAccountCustomerSupport$outboundSchema;
  /** @deprecated use `PatchAccountCustomerSupport$Outbound` instead. */
  export type Outbound = PatchAccountCustomerSupport$Outbound;
}

export function patchAccountCustomerSupportToJSON(
  patchAccountCustomerSupport: PatchAccountCustomerSupport,
): string {
  return JSON.stringify(
    PatchAccountCustomerSupport$outboundSchema.parse(
      patchAccountCustomerSupport,
    ),
  );
}

export function patchAccountCustomerSupportFromJSON(
  jsonString: string,
): SafeParseResult<PatchAccountCustomerSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAccountCustomerSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAccountCustomerSupport' from JSON`,
  );
}

/** @internal */
export const PatchAccount$inboundSchema: z.ZodType<
  PatchAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  profile: PatchProfile$inboundSchema.optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  termsOfService: z.union([
    TermsOfServiceTokenUpdate$inboundSchema,
    ManualTermsOfServiceUpdate$inboundSchema,
  ]).optional(),
  foreignID: z.string().optional(),
  customerSupport: z.nullable(
    z.lazy(() => PatchAccountCustomerSupport$inboundSchema),
  ).optional(),
  settings: CreateAccountSettings$inboundSchema.optional(),
});

/** @internal */
export type PatchAccount$Outbound = {
  profile?: PatchProfile$Outbound | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  termsOfService?:
    | TermsOfServiceTokenUpdate$Outbound
    | ManualTermsOfServiceUpdate$Outbound
    | undefined;
  foreignID?: string | undefined;
  customerSupport?: PatchAccountCustomerSupport$Outbound | null | undefined;
  settings?: CreateAccountSettings$Outbound | undefined;
};

/** @internal */
export const PatchAccount$outboundSchema: z.ZodType<
  PatchAccount$Outbound,
  z.ZodTypeDef,
  PatchAccount
> = z.object({
  profile: PatchProfile$outboundSchema.optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  termsOfService: z.union([
    TermsOfServiceTokenUpdate$outboundSchema,
    ManualTermsOfServiceUpdate$outboundSchema,
  ]).optional(),
  foreignID: z.string().optional(),
  customerSupport: z.nullable(
    z.lazy(() => PatchAccountCustomerSupport$outboundSchema),
  ).optional(),
  settings: CreateAccountSettings$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAccount$ {
  /** @deprecated use `PatchAccount$inboundSchema` instead. */
  export const inboundSchema = PatchAccount$inboundSchema;
  /** @deprecated use `PatchAccount$outboundSchema` instead. */
  export const outboundSchema = PatchAccount$outboundSchema;
  /** @deprecated use `PatchAccount$Outbound` instead. */
  export type Outbound = PatchAccount$Outbound;
}

export function patchAccountToJSON(patchAccount: PatchAccount): string {
  return JSON.stringify(PatchAccount$outboundSchema.parse(patchAccount));
}

export function patchAccountFromJSON(
  jsonString: string,
): SafeParseResult<PatchAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAccount' from JSON`,
  );
}
