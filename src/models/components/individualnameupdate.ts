/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IndividualNameUpdate = {
  /**
   * The individual's first given name.
   */
  firstName?: string | undefined;
  /**
   * The individual's second given name, if any.
   */
  middleName?: string | undefined;
  /**
   * The individual's family name.
   */
  lastName?: string | undefined;
  /**
   * Suffix of a given name.
   */
  suffix?: string | undefined;
};

/** @internal */
export const IndividualNameUpdate$inboundSchema: z.ZodType<
  IndividualNameUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string().optional(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
  suffix: z.string().optional(),
});

/** @internal */
export type IndividualNameUpdate$Outbound = {
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  suffix?: string | undefined;
};

/** @internal */
export const IndividualNameUpdate$outboundSchema: z.ZodType<
  IndividualNameUpdate$Outbound,
  z.ZodTypeDef,
  IndividualNameUpdate
> = z.object({
  firstName: z.string().optional(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
  suffix: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndividualNameUpdate$ {
  /** @deprecated use `IndividualNameUpdate$inboundSchema` instead. */
  export const inboundSchema = IndividualNameUpdate$inboundSchema;
  /** @deprecated use `IndividualNameUpdate$outboundSchema` instead. */
  export const outboundSchema = IndividualNameUpdate$outboundSchema;
  /** @deprecated use `IndividualNameUpdate$Outbound` instead. */
  export type Outbound = IndividualNameUpdate$Outbound;
}

export function individualNameUpdateToJSON(
  individualNameUpdate: IndividualNameUpdate,
): string {
  return JSON.stringify(
    IndividualNameUpdate$outboundSchema.parse(individualNameUpdate),
  );
}

export function individualNameUpdateFromJSON(
  jsonString: string,
): SafeParseResult<IndividualNameUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndividualNameUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndividualNameUpdate' from JSON`,
  );
}
