/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BrandColorValidationError,
  BrandColorValidationError$inboundSchema,
  BrandColorValidationError$Outbound,
  BrandColorValidationError$outboundSchema,
} from "./brandcolorvalidationerror.js";

export type ColorsValidationError = {
  light?: BrandColorValidationError | undefined;
  dark?: BrandColorValidationError | undefined;
};

/** @internal */
export const ColorsValidationError$inboundSchema: z.ZodType<
  ColorsValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  light: BrandColorValidationError$inboundSchema.optional(),
  dark: BrandColorValidationError$inboundSchema.optional(),
});

/** @internal */
export type ColorsValidationError$Outbound = {
  light?: BrandColorValidationError$Outbound | undefined;
  dark?: BrandColorValidationError$Outbound | undefined;
};

/** @internal */
export const ColorsValidationError$outboundSchema: z.ZodType<
  ColorsValidationError$Outbound,
  z.ZodTypeDef,
  ColorsValidationError
> = z.object({
  light: BrandColorValidationError$outboundSchema.optional(),
  dark: BrandColorValidationError$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ColorsValidationError$ {
  /** @deprecated use `ColorsValidationError$inboundSchema` instead. */
  export const inboundSchema = ColorsValidationError$inboundSchema;
  /** @deprecated use `ColorsValidationError$outboundSchema` instead. */
  export const outboundSchema = ColorsValidationError$outboundSchema;
  /** @deprecated use `ColorsValidationError$Outbound` instead. */
  export type Outbound = ColorsValidationError$Outbound;
}

export function colorsValidationErrorToJSON(
  colorsValidationError: ColorsValidationError,
): string {
  return JSON.stringify(
    ColorsValidationError$outboundSchema.parse(colorsValidationError),
  );
}

export function colorsValidationErrorFromJSON(
  jsonString: string,
): SafeParseResult<ColorsValidationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ColorsValidationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ColorsValidationError' from JSON`,
  );
}
