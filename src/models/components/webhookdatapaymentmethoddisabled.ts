/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookDataPaymentMethodDisabled = {
  accountID: string;
  paymentMethodID: string;
  sourceID: string;
};

/** @internal */
export const WebhookDataPaymentMethodDisabled$inboundSchema: z.ZodType<
  WebhookDataPaymentMethodDisabled,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  paymentMethodID: z.string(),
  sourceID: z.string(),
});

/** @internal */
export type WebhookDataPaymentMethodDisabled$Outbound = {
  accountID: string;
  paymentMethodID: string;
  sourceID: string;
};

/** @internal */
export const WebhookDataPaymentMethodDisabled$outboundSchema: z.ZodType<
  WebhookDataPaymentMethodDisabled$Outbound,
  z.ZodTypeDef,
  WebhookDataPaymentMethodDisabled
> = z.object({
  accountID: z.string(),
  paymentMethodID: z.string(),
  sourceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataPaymentMethodDisabled$ {
  /** @deprecated use `WebhookDataPaymentMethodDisabled$inboundSchema` instead. */
  export const inboundSchema = WebhookDataPaymentMethodDisabled$inboundSchema;
  /** @deprecated use `WebhookDataPaymentMethodDisabled$outboundSchema` instead. */
  export const outboundSchema = WebhookDataPaymentMethodDisabled$outboundSchema;
  /** @deprecated use `WebhookDataPaymentMethodDisabled$Outbound` instead. */
  export type Outbound = WebhookDataPaymentMethodDisabled$Outbound;
}

export function webhookDataPaymentMethodDisabledToJSON(
  webhookDataPaymentMethodDisabled: WebhookDataPaymentMethodDisabled,
): string {
  return JSON.stringify(
    WebhookDataPaymentMethodDisabled$outboundSchema.parse(
      webhookDataPaymentMethodDisabled,
    ),
  );
}

export function webhookDataPaymentMethodDisabledFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataPaymentMethodDisabled, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataPaymentMethodDisabled$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataPaymentMethodDisabled' from JSON`,
  );
}
