/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  SchedulePaymentMethod,
  SchedulePaymentMethod$inboundSchema,
  SchedulePaymentMethod$Outbound,
  SchedulePaymentMethod$outboundSchema,
} from "./schedulepaymentmethod.js";

/**
 * Defines the attributes of a transfer.
 */
export type RunTransfer = {
  amount: Amount;
  destination: SchedulePaymentMethod;
  partnerAccountID: string;
  source: SchedulePaymentMethod;
  /**
   * Simple description to place on the transfer.
   */
  description: string;
};

/** @internal */
export const RunTransfer$inboundSchema: z.ZodType<
  RunTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: Amount$inboundSchema,
  destination: SchedulePaymentMethod$inboundSchema,
  partnerAccountID: z.string(),
  source: SchedulePaymentMethod$inboundSchema,
  description: z.string(),
});

/** @internal */
export type RunTransfer$Outbound = {
  amount: Amount$Outbound;
  destination: SchedulePaymentMethod$Outbound;
  partnerAccountID: string;
  source: SchedulePaymentMethod$Outbound;
  description: string;
};

/** @internal */
export const RunTransfer$outboundSchema: z.ZodType<
  RunTransfer$Outbound,
  z.ZodTypeDef,
  RunTransfer
> = z.object({
  amount: Amount$outboundSchema,
  destination: SchedulePaymentMethod$outboundSchema,
  partnerAccountID: z.string(),
  source: SchedulePaymentMethod$outboundSchema,
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunTransfer$ {
  /** @deprecated use `RunTransfer$inboundSchema` instead. */
  export const inboundSchema = RunTransfer$inboundSchema;
  /** @deprecated use `RunTransfer$outboundSchema` instead. */
  export const outboundSchema = RunTransfer$outboundSchema;
  /** @deprecated use `RunTransfer$Outbound` instead. */
  export type Outbound = RunTransfer$Outbound;
}

export function runTransferToJSON(runTransfer: RunTransfer): string {
  return JSON.stringify(RunTransfer$outboundSchema.parse(runTransfer));
}

export function runTransferFromJSON(
  jsonString: string,
): SafeParseResult<RunTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunTransfer' from JSON`,
  );
}
