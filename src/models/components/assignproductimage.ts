/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssignProductImage = {
  /**
   * Unique identifier for a product or product option image resource.
   */
  imageID: string;
};

/** @internal */
export const AssignProductImage$inboundSchema: z.ZodType<
  AssignProductImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  imageID: z.string(),
});

/** @internal */
export type AssignProductImage$Outbound = {
  imageID: string;
};

/** @internal */
export const AssignProductImage$outboundSchema: z.ZodType<
  AssignProductImage$Outbound,
  z.ZodTypeDef,
  AssignProductImage
> = z.object({
  imageID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignProductImage$ {
  /** @deprecated use `AssignProductImage$inboundSchema` instead. */
  export const inboundSchema = AssignProductImage$inboundSchema;
  /** @deprecated use `AssignProductImage$outboundSchema` instead. */
  export const outboundSchema = AssignProductImage$outboundSchema;
  /** @deprecated use `AssignProductImage$Outbound` instead. */
  export type Outbound = AssignProductImage$Outbound;
}

export function assignProductImageToJSON(
  assignProductImage: AssignProductImage,
): string {
  return JSON.stringify(
    AssignProductImage$outboundSchema.parse(assignProductImage),
  );
}

export function assignProductImageFromJSON(
  jsonString: string,
): SafeParseResult<AssignProductImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignProductImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignProductImage' from JSON`,
  );
}
