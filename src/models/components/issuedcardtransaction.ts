/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IssuingMerchantData,
  IssuingMerchantData$inboundSchema,
  IssuingMerchantData$Outbound,
  IssuingMerchantData$outboundSchema,
} from "./issuingmerchantdata.js";

export type IssuedCardTransaction = {
  cardTransactionID: string;
  issuedCardID: string;
  fundingWalletID: string;
  /**
   * A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
   */
  amount: string;
  authorizationID?: string | undefined;
  authorizedOn: Date;
  merchantData: IssuingMerchantData;
  createdOn: Date;
};

/** @internal */
export const IssuedCardTransaction$inboundSchema: z.ZodType<
  IssuedCardTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  cardTransactionID: z.string(),
  issuedCardID: z.string(),
  fundingWalletID: z.string(),
  amount: z.string(),
  authorizationID: z.string().optional(),
  authorizedOn: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  merchantData: IssuingMerchantData$inboundSchema,
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type IssuedCardTransaction$Outbound = {
  cardTransactionID: string;
  issuedCardID: string;
  fundingWalletID: string;
  amount: string;
  authorizationID?: string | undefined;
  authorizedOn: string;
  merchantData: IssuingMerchantData$Outbound;
  createdOn: string;
};

/** @internal */
export const IssuedCardTransaction$outboundSchema: z.ZodType<
  IssuedCardTransaction$Outbound,
  z.ZodTypeDef,
  IssuedCardTransaction
> = z.object({
  cardTransactionID: z.string(),
  issuedCardID: z.string(),
  fundingWalletID: z.string(),
  amount: z.string(),
  authorizationID: z.string().optional(),
  authorizedOn: z.date().transform(v => v.toISOString()),
  merchantData: IssuingMerchantData$outboundSchema,
  createdOn: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssuedCardTransaction$ {
  /** @deprecated use `IssuedCardTransaction$inboundSchema` instead. */
  export const inboundSchema = IssuedCardTransaction$inboundSchema;
  /** @deprecated use `IssuedCardTransaction$outboundSchema` instead. */
  export const outboundSchema = IssuedCardTransaction$outboundSchema;
  /** @deprecated use `IssuedCardTransaction$Outbound` instead. */
  export type Outbound = IssuedCardTransaction$Outbound;
}

export function issuedCardTransactionToJSON(
  issuedCardTransaction: IssuedCardTransaction,
): string {
  return JSON.stringify(
    IssuedCardTransaction$outboundSchema.parse(issuedCardTransaction),
  );
}

export function issuedCardTransactionFromJSON(
  jsonString: string,
): SafeParseResult<IssuedCardTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IssuedCardTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IssuedCardTransaction' from JSON`,
  );
}
