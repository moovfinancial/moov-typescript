/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { ClosedEnum } from "../../types/enums.js";

export const RefundPolicy = {
  ConditionalRefund: "conditional-refund",
  CustomPolicy: "custom-policy",
  EventBasedPolicy: "event-based-policy",
  FullRefundExtendedWindow: "full-refund-extended-window",
  FullRefundWithin30Days: "full-refund-within-30-days",
  NoRefunds: "no-refunds",
  PartialRefund: "partial-refund",
  ProratedRefund: "prorated-refund",
  StoreCreditOnly: "store-credit-only",
} as const;
export type RefundPolicy = ClosedEnum<typeof RefundPolicy>;

/** @internal */
export const RefundPolicy$inboundSchema: z.ZodNativeEnum<typeof RefundPolicy> =
  z.nativeEnum(RefundPolicy);

/** @internal */
export const RefundPolicy$outboundSchema: z.ZodNativeEnum<typeof RefundPolicy> =
  RefundPolicy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundPolicy$ {
  /** @deprecated use `RefundPolicy$inboundSchema` instead. */
  export const inboundSchema = RefundPolicy$inboundSchema;
  /** @deprecated use `RefundPolicy$outboundSchema` instead. */
  export const outboundSchema = RefundPolicy$outboundSchema;
}
