/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CapabilityID,
  CapabilityID$inboundSchema,
  CapabilityID$outboundSchema,
} from "./capabilityid.js";
import {
  CreateAccountType,
  CreateAccountType$inboundSchema,
  CreateAccountType$outboundSchema,
} from "./createaccounttype.js";
import {
  CreateProfile,
  CreateProfile$inboundSchema,
  CreateProfile$Outbound,
  CreateProfile$outboundSchema,
} from "./createprofile.js";
import {
  CustomerSupport,
  CustomerSupport$inboundSchema,
  CustomerSupport$Outbound,
  CustomerSupport$outboundSchema,
} from "./customersupport.js";
import {
  ManualTermsOfService,
  ManualTermsOfService$inboundSchema,
  ManualTermsOfService$Outbound,
  ManualTermsOfService$outboundSchema,
} from "./manualtermsofservice.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  Settings,
  Settings$inboundSchema,
  Settings$Outbound,
  Settings$outboundSchema,
} from "./settings.js";
import {
  TermsOfServiceToken,
  TermsOfServiceToken$inboundSchema,
  TermsOfServiceToken$Outbound,
  TermsOfServiceToken$outboundSchema,
} from "./termsofservicetoken.js";

export type CreateAccountTermsOfService =
  | ManualTermsOfService
  | TermsOfServiceToken;

export type CreateAccount = {
  accountType: CreateAccountType;
  profile: CreateProfile;
  /**
   * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
   */
  metadata?: { [k: string]: string } | undefined;
  termsOfService?: ManualTermsOfService | TermsOfServiceToken | undefined;
  /**
   * Optional alias from a foreign/external system which can be used to reference this resource.
   */
  foreignID?: string | undefined;
  /**
   * User-provided information that can be displayed on credit card transactions for customers to use when
   *
   * @remarks
   * contacting a customer support team. This data is only allowed on a business account.
   */
  customerSupport?: CustomerSupport | undefined;
  /**
   * User provided settings to manage an account.
   */
  settings?: Settings | undefined;
  capabilities?: Array<CapabilityID> | undefined;
  /**
   * The operating mode for an account.
   */
  mode?: Mode | undefined;
};

/** @internal */
export const CreateAccountTermsOfService$inboundSchema: z.ZodType<
  CreateAccountTermsOfService,
  z.ZodTypeDef,
  unknown
> = z.union([
  ManualTermsOfService$inboundSchema,
  TermsOfServiceToken$inboundSchema,
]);

/** @internal */
export type CreateAccountTermsOfService$Outbound =
  | ManualTermsOfService$Outbound
  | TermsOfServiceToken$Outbound;

/** @internal */
export const CreateAccountTermsOfService$outboundSchema: z.ZodType<
  CreateAccountTermsOfService$Outbound,
  z.ZodTypeDef,
  CreateAccountTermsOfService
> = z.union([
  ManualTermsOfService$outboundSchema,
  TermsOfServiceToken$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountTermsOfService$ {
  /** @deprecated use `CreateAccountTermsOfService$inboundSchema` instead. */
  export const inboundSchema = CreateAccountTermsOfService$inboundSchema;
  /** @deprecated use `CreateAccountTermsOfService$outboundSchema` instead. */
  export const outboundSchema = CreateAccountTermsOfService$outboundSchema;
  /** @deprecated use `CreateAccountTermsOfService$Outbound` instead. */
  export type Outbound = CreateAccountTermsOfService$Outbound;
}

export function createAccountTermsOfServiceToJSON(
  createAccountTermsOfService: CreateAccountTermsOfService,
): string {
  return JSON.stringify(
    CreateAccountTermsOfService$outboundSchema.parse(
      createAccountTermsOfService,
    ),
  );
}

export function createAccountTermsOfServiceFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountTermsOfService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountTermsOfService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountTermsOfService' from JSON`,
  );
}

/** @internal */
export const CreateAccount$inboundSchema: z.ZodType<
  CreateAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountType: CreateAccountType$inboundSchema,
  profile: CreateProfile$inboundSchema,
  metadata: z.record(z.string()).optional(),
  termsOfService: z.union([
    ManualTermsOfService$inboundSchema,
    TermsOfServiceToken$inboundSchema,
  ]).optional(),
  foreignID: z.string().optional(),
  customerSupport: CustomerSupport$inboundSchema.optional(),
  settings: Settings$inboundSchema.optional(),
  capabilities: z.array(CapabilityID$inboundSchema).optional(),
  mode: Mode$inboundSchema.optional(),
});

/** @internal */
export type CreateAccount$Outbound = {
  accountType: string;
  profile: CreateProfile$Outbound;
  metadata?: { [k: string]: string } | undefined;
  termsOfService?:
    | ManualTermsOfService$Outbound
    | TermsOfServiceToken$Outbound
    | undefined;
  foreignID?: string | undefined;
  customerSupport?: CustomerSupport$Outbound | undefined;
  settings?: Settings$Outbound | undefined;
  capabilities?: Array<string> | undefined;
  mode?: string | undefined;
};

/** @internal */
export const CreateAccount$outboundSchema: z.ZodType<
  CreateAccount$Outbound,
  z.ZodTypeDef,
  CreateAccount
> = z.object({
  accountType: CreateAccountType$outboundSchema,
  profile: CreateProfile$outboundSchema,
  metadata: z.record(z.string()).optional(),
  termsOfService: z.union([
    ManualTermsOfService$outboundSchema,
    TermsOfServiceToken$outboundSchema,
  ]).optional(),
  foreignID: z.string().optional(),
  customerSupport: CustomerSupport$outboundSchema.optional(),
  settings: Settings$outboundSchema.optional(),
  capabilities: z.array(CapabilityID$outboundSchema).optional(),
  mode: Mode$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccount$ {
  /** @deprecated use `CreateAccount$inboundSchema` instead. */
  export const inboundSchema = CreateAccount$inboundSchema;
  /** @deprecated use `CreateAccount$outboundSchema` instead. */
  export const outboundSchema = CreateAccount$outboundSchema;
  /** @deprecated use `CreateAccount$Outbound` instead. */
  export type Outbound = CreateAccount$Outbound;
}

export function createAccountToJSON(createAccount: CreateAccount): string {
  return JSON.stringify(CreateAccount$outboundSchema.parse(createAccount));
}

export function createAccountFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccount' from JSON`,
  );
}
