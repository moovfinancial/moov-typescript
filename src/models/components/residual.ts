/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AmountDecimal,
  AmountDecimal$inboundSchema,
  AmountDecimal$Outbound,
  AmountDecimal$outboundSchema,
} from "./amountdecimal.js";

export type Residual = {
  residualID: string;
  partnerAccountID: string;
  periodStart: Date;
  periodEnd: Date;
  merchantFees: AmountDecimal;
  partnerCost: AmountDecimal;
  netIncome: AmountDecimal;
  /**
   *   The decimal-formatted numerical string of the revenue split for partner.
   *
   * @remarks
   *
   *   For example, 2.25% is '2.25'.
   */
  revenueShare: string;
  residualAmount: AmountDecimal;
  moovShare: AmountDecimal;
  createdOn: Date;
  updatedOn: Date;
};

/** @internal */
export const Residual$inboundSchema: z.ZodType<
  Residual,
  z.ZodTypeDef,
  unknown
> = z.object({
  residualID: z.string(),
  partnerAccountID: z.string(),
  periodStart: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  periodEnd: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  merchantFees: AmountDecimal$inboundSchema,
  partnerCost: AmountDecimal$inboundSchema,
  netIncome: AmountDecimal$inboundSchema,
  revenueShare: z.string(),
  residualAmount: AmountDecimal$inboundSchema,
  moovShare: AmountDecimal$inboundSchema,
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type Residual$Outbound = {
  residualID: string;
  partnerAccountID: string;
  periodStart: string;
  periodEnd: string;
  merchantFees: AmountDecimal$Outbound;
  partnerCost: AmountDecimal$Outbound;
  netIncome: AmountDecimal$Outbound;
  revenueShare: string;
  residualAmount: AmountDecimal$Outbound;
  moovShare: AmountDecimal$Outbound;
  createdOn: string;
  updatedOn: string;
};

/** @internal */
export const Residual$outboundSchema: z.ZodType<
  Residual$Outbound,
  z.ZodTypeDef,
  Residual
> = z.object({
  residualID: z.string(),
  partnerAccountID: z.string(),
  periodStart: z.date().transform(v => v.toISOString()),
  periodEnd: z.date().transform(v => v.toISOString()),
  merchantFees: AmountDecimal$outboundSchema,
  partnerCost: AmountDecimal$outboundSchema,
  netIncome: AmountDecimal$outboundSchema,
  revenueShare: z.string(),
  residualAmount: AmountDecimal$outboundSchema,
  moovShare: AmountDecimal$outboundSchema,
  createdOn: z.date().transform(v => v.toISOString()),
  updatedOn: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Residual$ {
  /** @deprecated use `Residual$inboundSchema` instead. */
  export const inboundSchema = Residual$inboundSchema;
  /** @deprecated use `Residual$outboundSchema` instead. */
  export const outboundSchema = Residual$outboundSchema;
  /** @deprecated use `Residual$Outbound` instead. */
  export type Outbound = Residual$Outbound;
}

export function residualToJSON(residual: Residual): string {
  return JSON.stringify(Residual$outboundSchema.parse(residual));
}

export function residualFromJSON(
  jsonString: string,
): SafeParseResult<Residual, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Residual$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Residual' from JSON`,
  );
}
