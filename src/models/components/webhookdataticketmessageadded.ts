/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookDataTicketMessageAdded = {
  accountID: string;
  ticketID: string;
  foreignID?: string | undefined;
};

/** @internal */
export const WebhookDataTicketMessageAdded$inboundSchema: z.ZodType<
  WebhookDataTicketMessageAdded,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
  foreignID: z.string().optional(),
});

/** @internal */
export type WebhookDataTicketMessageAdded$Outbound = {
  accountID: string;
  ticketID: string;
  foreignID?: string | undefined;
};

/** @internal */
export const WebhookDataTicketMessageAdded$outboundSchema: z.ZodType<
  WebhookDataTicketMessageAdded$Outbound,
  z.ZodTypeDef,
  WebhookDataTicketMessageAdded
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
  foreignID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataTicketMessageAdded$ {
  /** @deprecated use `WebhookDataTicketMessageAdded$inboundSchema` instead. */
  export const inboundSchema = WebhookDataTicketMessageAdded$inboundSchema;
  /** @deprecated use `WebhookDataTicketMessageAdded$outboundSchema` instead. */
  export const outboundSchema = WebhookDataTicketMessageAdded$outboundSchema;
  /** @deprecated use `WebhookDataTicketMessageAdded$Outbound` instead. */
  export type Outbound = WebhookDataTicketMessageAdded$Outbound;
}

export function webhookDataTicketMessageAddedToJSON(
  webhookDataTicketMessageAdded: WebhookDataTicketMessageAdded,
): string {
  return JSON.stringify(
    WebhookDataTicketMessageAdded$outboundSchema.parse(
      webhookDataTicketMessageAdded,
    ),
  );
}

export function webhookDataTicketMessageAddedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataTicketMessageAdded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataTicketMessageAdded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataTicketMessageAdded' from JSON`,
  );
}
