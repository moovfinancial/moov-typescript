/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegisterApplePayMerchantDomains = {
  /**
   * A UTF-8 string to display in the Buy button.
   */
  displayName?: string | undefined;
  /**
   * A unique list of fully-qualified, top-level or sub-domain names where you will accept Apple Pay.
   */
  domains?: Array<string> | undefined;
};

/** @internal */
export const RegisterApplePayMerchantDomains$inboundSchema: z.ZodType<
  RegisterApplePayMerchantDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string().optional(),
  domains: z.array(z.string()).optional(),
});

/** @internal */
export type RegisterApplePayMerchantDomains$Outbound = {
  displayName?: string | undefined;
  domains?: Array<string> | undefined;
};

/** @internal */
export const RegisterApplePayMerchantDomains$outboundSchema: z.ZodType<
  RegisterApplePayMerchantDomains$Outbound,
  z.ZodTypeDef,
  RegisterApplePayMerchantDomains
> = z.object({
  displayName: z.string().optional(),
  domains: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterApplePayMerchantDomains$ {
  /** @deprecated use `RegisterApplePayMerchantDomains$inboundSchema` instead. */
  export const inboundSchema = RegisterApplePayMerchantDomains$inboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomains$outboundSchema` instead. */
  export const outboundSchema = RegisterApplePayMerchantDomains$outboundSchema;
  /** @deprecated use `RegisterApplePayMerchantDomains$Outbound` instead. */
  export type Outbound = RegisterApplePayMerchantDomains$Outbound;
}

export function registerApplePayMerchantDomainsToJSON(
  registerApplePayMerchantDomains: RegisterApplePayMerchantDomains,
): string {
  return JSON.stringify(
    RegisterApplePayMerchantDomains$outboundSchema.parse(
      registerApplePayMerchantDomains,
    ),
  );
}

export function registerApplePayMerchantDomainsFromJSON(
  jsonString: string,
): SafeParseResult<RegisterApplePayMerchantDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterApplePayMerchantDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterApplePayMerchantDomains' from JSON`,
  );
}
