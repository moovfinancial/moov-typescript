/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketContact,
  TicketContact$inboundSchema,
  TicketContact$Outbound,
  TicketContact$outboundSchema,
} from "./ticketcontact.js";
import {
  TicketStatus,
  TicketStatus$inboundSchema,
  TicketStatus$outboundSchema,
} from "./ticketstatus.js";

export type Ticket = {
  ticketID: string;
  number: number;
  title: string;
  contact: TicketContact;
  status: TicketStatus;
  createdOn: Date;
  updatedOn: Date;
  latestMessageOn?: Date | undefined;
  closedOn?: Date | undefined;
};

/** @internal */
export const Ticket$inboundSchema: z.ZodType<Ticket, z.ZodTypeDef, unknown> = z
  .object({
    ticketID: z.string(),
    number: z.number().int(),
    title: z.string(),
    contact: TicketContact$inboundSchema,
    status: TicketStatus$inboundSchema,
    createdOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updatedOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    latestMessageOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    closedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Ticket$Outbound = {
  ticketID: string;
  number: number;
  title: string;
  contact: TicketContact$Outbound;
  status: string;
  createdOn: string;
  updatedOn: string;
  latestMessageOn?: string | undefined;
  closedOn?: string | undefined;
};

/** @internal */
export const Ticket$outboundSchema: z.ZodType<
  Ticket$Outbound,
  z.ZodTypeDef,
  Ticket
> = z.object({
  ticketID: z.string(),
  number: z.number().int(),
  title: z.string(),
  contact: TicketContact$outboundSchema,
  status: TicketStatus$outboundSchema,
  createdOn: z.date().transform(v => v.toISOString()),
  updatedOn: z.date().transform(v => v.toISOString()),
  latestMessageOn: z.date().transform(v => v.toISOString()).optional(),
  closedOn: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ticket$ {
  /** @deprecated use `Ticket$inboundSchema` instead. */
  export const inboundSchema = Ticket$inboundSchema;
  /** @deprecated use `Ticket$outboundSchema` instead. */
  export const outboundSchema = Ticket$outboundSchema;
  /** @deprecated use `Ticket$Outbound` instead. */
  export type Outbound = Ticket$Outbound;
}

export function ticketToJSON(ticket: Ticket): string {
  return JSON.stringify(Ticket$outboundSchema.parse(ticket));
}

export function ticketFromJSON(
  jsonString: string,
): SafeParseResult<Ticket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ticket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ticket' from JSON`,
  );
}
