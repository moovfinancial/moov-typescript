/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCardExpiration = {
  month?: string | undefined;
  year?: string | undefined;
};

/** @internal */
export const UpdateCardExpiration$inboundSchema: z.ZodType<
  UpdateCardExpiration,
  z.ZodTypeDef,
  unknown
> = z.object({
  month: z.string().optional(),
  year: z.string().optional(),
});

/** @internal */
export type UpdateCardExpiration$Outbound = {
  month?: string | undefined;
  year?: string | undefined;
};

/** @internal */
export const UpdateCardExpiration$outboundSchema: z.ZodType<
  UpdateCardExpiration$Outbound,
  z.ZodTypeDef,
  UpdateCardExpiration
> = z.object({
  month: z.string().optional(),
  year: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCardExpiration$ {
  /** @deprecated use `UpdateCardExpiration$inboundSchema` instead. */
  export const inboundSchema = UpdateCardExpiration$inboundSchema;
  /** @deprecated use `UpdateCardExpiration$outboundSchema` instead. */
  export const outboundSchema = UpdateCardExpiration$outboundSchema;
  /** @deprecated use `UpdateCardExpiration$Outbound` instead. */
  export type Outbound = UpdateCardExpiration$Outbound;
}

export function updateCardExpirationToJSON(
  updateCardExpiration: UpdateCardExpiration,
): string {
  return JSON.stringify(
    UpdateCardExpiration$outboundSchema.parse(updateCardExpiration),
  );
}

export function updateCardExpirationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCardExpiration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCardExpiration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCardExpiration' from JSON`,
  );
}
