/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RunTransfer,
  RunTransfer$inboundSchema,
  RunTransfer$Outbound,
  RunTransfer$outboundSchema,
} from "./runtransfer.js";

/**
 * Defines configuration for recurring transfers.
 */
export type Recur = {
  /**
   *   RRule as defined by RFC 5545 (https://www.rfc-editor.org/rfc/rfc5545#section-3.3.10).
   *
   * @remarks
   *   Generators available online at the following sites - https://freetools.textmagic.com/rrule-generator, https://jkbrzt.github.io/rrule/
   */
  recurrenceRule: string;
  /**
   * Defines the attributes of a transfer.
   */
  runTransfer: RunTransfer;
  /**
   * True if the RRule set runs indefinitely.
   */
  indefinite?: boolean | undefined;
  start?: Date | undefined;
};

/** @internal */
export const Recur$inboundSchema: z.ZodType<Recur, z.ZodTypeDef, unknown> = z
  .object({
    recurrenceRule: z.string(),
    runTransfer: RunTransfer$inboundSchema,
    indefinite: z.boolean().optional(),
    start: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Recur$Outbound = {
  recurrenceRule: string;
  runTransfer: RunTransfer$Outbound;
  indefinite?: boolean | undefined;
  start?: string | undefined;
};

/** @internal */
export const Recur$outboundSchema: z.ZodType<
  Recur$Outbound,
  z.ZodTypeDef,
  Recur
> = z.object({
  recurrenceRule: z.string(),
  runTransfer: RunTransfer$outboundSchema,
  indefinite: z.boolean().optional(),
  start: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recur$ {
  /** @deprecated use `Recur$inboundSchema` instead. */
  export const inboundSchema = Recur$inboundSchema;
  /** @deprecated use `Recur$outboundSchema` instead. */
  export const outboundSchema = Recur$outboundSchema;
  /** @deprecated use `Recur$Outbound` instead. */
  export type Outbound = Recur$Outbound;
}

export function recurToJSON(recur: Recur): string {
  return JSON.stringify(Recur$outboundSchema.parse(recur));
}

export function recurFromJSON(
  jsonString: string,
): SafeParseResult<Recur, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Recur$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Recur' from JSON`,
  );
}
