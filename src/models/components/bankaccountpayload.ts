/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccountIntegration,
  BankAccountIntegration$inboundSchema,
  BankAccountIntegration$Outbound,
  BankAccountIntegration$outboundSchema,
} from "./bankaccountintegration.js";

/**
 * Describes the bank account to link to the Moov account.
 */
export type BankAccountPayload = {
  account: BankAccountIntegration;
};

/** @internal */
export const BankAccountPayload$inboundSchema: z.ZodType<
  BankAccountPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  account: BankAccountIntegration$inboundSchema,
});

/** @internal */
export type BankAccountPayload$Outbound = {
  account: BankAccountIntegration$Outbound;
};

/** @internal */
export const BankAccountPayload$outboundSchema: z.ZodType<
  BankAccountPayload$Outbound,
  z.ZodTypeDef,
  BankAccountPayload
> = z.object({
  account: BankAccountIntegration$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountPayload$ {
  /** @deprecated use `BankAccountPayload$inboundSchema` instead. */
  export const inboundSchema = BankAccountPayload$inboundSchema;
  /** @deprecated use `BankAccountPayload$outboundSchema` instead. */
  export const outboundSchema = BankAccountPayload$outboundSchema;
  /** @deprecated use `BankAccountPayload$Outbound` instead. */
  export type Outbound = BankAccountPayload$Outbound;
}

export function bankAccountPayloadToJSON(
  bankAccountPayload: BankAccountPayload,
): string {
  return JSON.stringify(
    BankAccountPayload$outboundSchema.parse(bankAccountPayload),
  );
}

export function bankAccountPayloadFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountPayload' from JSON`,
  );
}
