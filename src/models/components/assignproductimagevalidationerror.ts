/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssignProductImageValidationError = {
  imageID?: string | undefined;
};

/** @internal */
export const AssignProductImageValidationError$inboundSchema: z.ZodType<
  AssignProductImageValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  imageID: z.string().optional(),
});

/** @internal */
export type AssignProductImageValidationError$Outbound = {
  imageID?: string | undefined;
};

/** @internal */
export const AssignProductImageValidationError$outboundSchema: z.ZodType<
  AssignProductImageValidationError$Outbound,
  z.ZodTypeDef,
  AssignProductImageValidationError
> = z.object({
  imageID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignProductImageValidationError$ {
  /** @deprecated use `AssignProductImageValidationError$inboundSchema` instead. */
  export const inboundSchema = AssignProductImageValidationError$inboundSchema;
  /** @deprecated use `AssignProductImageValidationError$outboundSchema` instead. */
  export const outboundSchema =
    AssignProductImageValidationError$outboundSchema;
  /** @deprecated use `AssignProductImageValidationError$Outbound` instead. */
  export type Outbound = AssignProductImageValidationError$Outbound;
}

export function assignProductImageValidationErrorToJSON(
  assignProductImageValidationError: AssignProductImageValidationError,
): string {
  return JSON.stringify(
    AssignProductImageValidationError$outboundSchema.parse(
      assignProductImageValidationError,
    ),
  );
}

export function assignProductImageValidationErrorFromJSON(
  jsonString: string,
): SafeParseResult<AssignProductImageValidationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignProductImageValidationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignProductImageValidationError' from JSON`,
  );
}
