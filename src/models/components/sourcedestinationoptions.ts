/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SourceDestinationOptions = {
  accountID?: string | undefined;
  paymentMethodID?: string | undefined;
};

/** @internal */
export const SourceDestinationOptions$inboundSchema: z.ZodType<
  SourceDestinationOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string().optional(),
  paymentMethodID: z.string().optional(),
});

/** @internal */
export type SourceDestinationOptions$Outbound = {
  accountID?: string | undefined;
  paymentMethodID?: string | undefined;
};

/** @internal */
export const SourceDestinationOptions$outboundSchema: z.ZodType<
  SourceDestinationOptions$Outbound,
  z.ZodTypeDef,
  SourceDestinationOptions
> = z.object({
  accountID: z.string().optional(),
  paymentMethodID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceDestinationOptions$ {
  /** @deprecated use `SourceDestinationOptions$inboundSchema` instead. */
  export const inboundSchema = SourceDestinationOptions$inboundSchema;
  /** @deprecated use `SourceDestinationOptions$outboundSchema` instead. */
  export const outboundSchema = SourceDestinationOptions$outboundSchema;
  /** @deprecated use `SourceDestinationOptions$Outbound` instead. */
  export type Outbound = SourceDestinationOptions$Outbound;
}

export function sourceDestinationOptionsToJSON(
  sourceDestinationOptions: SourceDestinationOptions,
): string {
  return JSON.stringify(
    SourceDestinationOptions$outboundSchema.parse(sourceDestinationOptions),
  );
}

export function sourceDestinationOptionsFromJSON(
  jsonString: string,
): SafeParseResult<SourceDestinationOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceDestinationOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceDestinationOptions' from JSON`,
  );
}
