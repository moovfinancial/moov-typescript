/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FulfillmentDetailsError = {
  shipmentDurationDays?: string | undefined;
  returnPolicy?: string | undefined;
};

/** @internal */
export const FulfillmentDetailsError$inboundSchema: z.ZodType<
  FulfillmentDetailsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  shipmentDurationDays: z.string().optional(),
  returnPolicy: z.string().optional(),
});

/** @internal */
export type FulfillmentDetailsError$Outbound = {
  shipmentDurationDays?: string | undefined;
  returnPolicy?: string | undefined;
};

/** @internal */
export const FulfillmentDetailsError$outboundSchema: z.ZodType<
  FulfillmentDetailsError$Outbound,
  z.ZodTypeDef,
  FulfillmentDetailsError
> = z.object({
  shipmentDurationDays: z.string().optional(),
  returnPolicy: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FulfillmentDetailsError$ {
  /** @deprecated use `FulfillmentDetailsError$inboundSchema` instead. */
  export const inboundSchema = FulfillmentDetailsError$inboundSchema;
  /** @deprecated use `FulfillmentDetailsError$outboundSchema` instead. */
  export const outboundSchema = FulfillmentDetailsError$outboundSchema;
  /** @deprecated use `FulfillmentDetailsError$Outbound` instead. */
  export type Outbound = FulfillmentDetailsError$Outbound;
}

export function fulfillmentDetailsErrorToJSON(
  fulfillmentDetailsError: FulfillmentDetailsError,
): string {
  return JSON.stringify(
    FulfillmentDetailsError$outboundSchema.parse(fulfillmentDetailsError),
  );
}

export function fulfillmentDetailsErrorFromJSON(
  jsonString: string,
): SafeParseResult<FulfillmentDetailsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FulfillmentDetailsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FulfillmentDetailsError' from JSON`,
  );
}
