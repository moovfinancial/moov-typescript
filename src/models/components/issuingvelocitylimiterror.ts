/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IssuingVelocityLimitError = {
  amount?: string | undefined;
  interval?: string | undefined;
};

/** @internal */
export const IssuingVelocityLimitError$inboundSchema: z.ZodType<
  IssuingVelocityLimitError,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  interval: z.string().optional(),
});

/** @internal */
export type IssuingVelocityLimitError$Outbound = {
  amount?: string | undefined;
  interval?: string | undefined;
};

/** @internal */
export const IssuingVelocityLimitError$outboundSchema: z.ZodType<
  IssuingVelocityLimitError$Outbound,
  z.ZodTypeDef,
  IssuingVelocityLimitError
> = z.object({
  amount: z.string().optional(),
  interval: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssuingVelocityLimitError$ {
  /** @deprecated use `IssuingVelocityLimitError$inboundSchema` instead. */
  export const inboundSchema = IssuingVelocityLimitError$inboundSchema;
  /** @deprecated use `IssuingVelocityLimitError$outboundSchema` instead. */
  export const outboundSchema = IssuingVelocityLimitError$outboundSchema;
  /** @deprecated use `IssuingVelocityLimitError$Outbound` instead. */
  export type Outbound = IssuingVelocityLimitError$Outbound;
}

export function issuingVelocityLimitErrorToJSON(
  issuingVelocityLimitError: IssuingVelocityLimitError,
): string {
  return JSON.stringify(
    IssuingVelocityLimitError$outboundSchema.parse(issuingVelocityLimitError),
  );
}

export function issuingVelocityLimitErrorFromJSON(
  jsonString: string,
): SafeParseResult<IssuingVelocityLimitError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IssuingVelocityLimitError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IssuingVelocityLimitError' from JSON`,
  );
}
