/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CountriesErrors = {
  countries: { [k: string]: string };
};

/** @internal */
export const CountriesErrors$inboundSchema: z.ZodType<
  CountriesErrors,
  z.ZodTypeDef,
  unknown
> = z.object({
  countries: z.record(z.string()),
});

/** @internal */
export type CountriesErrors$Outbound = {
  countries: { [k: string]: string };
};

/** @internal */
export const CountriesErrors$outboundSchema: z.ZodType<
  CountriesErrors$Outbound,
  z.ZodTypeDef,
  CountriesErrors
> = z.object({
  countries: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountriesErrors$ {
  /** @deprecated use `CountriesErrors$inboundSchema` instead. */
  export const inboundSchema = CountriesErrors$inboundSchema;
  /** @deprecated use `CountriesErrors$outboundSchema` instead. */
  export const outboundSchema = CountriesErrors$outboundSchema;
  /** @deprecated use `CountriesErrors$Outbound` instead. */
  export type Outbound = CountriesErrors$Outbound;
}

export function countriesErrorsToJSON(
  countriesErrors: CountriesErrors,
): string {
  return JSON.stringify(CountriesErrors$outboundSchema.parse(countriesErrors));
}

export function countriesErrorsFromJSON(
  jsonString: string,
): SafeParseResult<CountriesErrors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountriesErrors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountriesErrors' from JSON`,
  );
}
