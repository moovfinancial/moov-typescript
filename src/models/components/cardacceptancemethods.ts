/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the distribution of card transactions by payment method.
 */
export type CardAcceptanceMethods = {
  /**
   * Percentage of card transactions that are in-person payments. Minimum value is 0, maximum is 100.
   */
  inPersonPercentage?: number | undefined;
  /**
   * Percentage of card transactions that are mail or phone payments. Minimum value is 0, maximum is 100.
   */
  mailOrPhonePercentage?: number | undefined;
  /**
   * Percentage of card transactions that are online payments. Minimum value is 0, maximum is 100.
   */
  onlinePercentage?: number | undefined;
};

/** @internal */
export const CardAcceptanceMethods$inboundSchema: z.ZodType<
  CardAcceptanceMethods,
  z.ZodTypeDef,
  unknown
> = z.object({
  inPersonPercentage: z.number().int().optional(),
  mailOrPhonePercentage: z.number().int().optional(),
  onlinePercentage: z.number().int().optional(),
});

/** @internal */
export type CardAcceptanceMethods$Outbound = {
  inPersonPercentage?: number | undefined;
  mailOrPhonePercentage?: number | undefined;
  onlinePercentage?: number | undefined;
};

/** @internal */
export const CardAcceptanceMethods$outboundSchema: z.ZodType<
  CardAcceptanceMethods$Outbound,
  z.ZodTypeDef,
  CardAcceptanceMethods
> = z.object({
  inPersonPercentage: z.number().int().optional(),
  mailOrPhonePercentage: z.number().int().optional(),
  onlinePercentage: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAcceptanceMethods$ {
  /** @deprecated use `CardAcceptanceMethods$inboundSchema` instead. */
  export const inboundSchema = CardAcceptanceMethods$inboundSchema;
  /** @deprecated use `CardAcceptanceMethods$outboundSchema` instead. */
  export const outboundSchema = CardAcceptanceMethods$outboundSchema;
  /** @deprecated use `CardAcceptanceMethods$Outbound` instead. */
  export type Outbound = CardAcceptanceMethods$Outbound;
}

export function cardAcceptanceMethodsToJSON(
  cardAcceptanceMethods: CardAcceptanceMethods,
): string {
  return JSON.stringify(
    CardAcceptanceMethods$outboundSchema.parse(cardAcceptanceMethods),
  );
}

export function cardAcceptanceMethodsFromJSON(
  jsonString: string,
): SafeParseResult<CardAcceptanceMethods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAcceptanceMethods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAcceptanceMethods' from JSON`,
  );
}
