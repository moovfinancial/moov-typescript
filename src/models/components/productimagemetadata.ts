/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ProductImageMetadata = {
  /**
   * Unique identifier for a product or product option image resource.
   */
  imageID: string;
  /**
   * Alternative text for the image.
   */
  altText?: string | undefined;
  /**
   * The image's public URL.
   */
  link: string;
};

/** @internal */
export const ProductImageMetadata$inboundSchema: z.ZodType<
  ProductImageMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  imageID: z.string(),
  altText: z.string().optional(),
  link: z.string(),
});

/** @internal */
export type ProductImageMetadata$Outbound = {
  imageID: string;
  altText?: string | undefined;
  link: string;
};

/** @internal */
export const ProductImageMetadata$outboundSchema: z.ZodType<
  ProductImageMetadata$Outbound,
  z.ZodTypeDef,
  ProductImageMetadata
> = z.object({
  imageID: z.string(),
  altText: z.string().optional(),
  link: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductImageMetadata$ {
  /** @deprecated use `ProductImageMetadata$inboundSchema` instead. */
  export const inboundSchema = ProductImageMetadata$inboundSchema;
  /** @deprecated use `ProductImageMetadata$outboundSchema` instead. */
  export const outboundSchema = ProductImageMetadata$outboundSchema;
  /** @deprecated use `ProductImageMetadata$Outbound` instead. */
  export type Outbound = ProductImageMetadata$Outbound;
}

export function productImageMetadataToJSON(
  productImageMetadata: ProductImageMetadata,
): string {
  return JSON.stringify(
    ProductImageMetadata$outboundSchema.parse(productImageMetadata),
  );
}

export function productImageMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProductImageMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductImageMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductImageMetadata' from JSON`,
  );
}
