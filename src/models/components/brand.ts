/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Colors,
  Colors$inboundSchema,
  Colors$Outbound,
  Colors$outboundSchema,
} from "./colors.js";

export type Brand = {
  /**
   * Set brand accent colors for light and dark modes.
   */
  colors: Colors;
};

/** @internal */
export const Brand$inboundSchema: z.ZodType<Brand, z.ZodTypeDef, unknown> = z
  .object({
    colors: Colors$inboundSchema,
  });

/** @internal */
export type Brand$Outbound = {
  colors: Colors$Outbound;
};

/** @internal */
export const Brand$outboundSchema: z.ZodType<
  Brand$Outbound,
  z.ZodTypeDef,
  Brand
> = z.object({
  colors: Colors$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Brand$ {
  /** @deprecated use `Brand$inboundSchema` instead. */
  export const inboundSchema = Brand$inboundSchema;
  /** @deprecated use `Brand$outboundSchema` instead. */
  export const outboundSchema = Brand$outboundSchema;
  /** @deprecated use `Brand$Outbound` instead. */
  export type Outbound = Brand$Outbound;
}

export function brandToJSON(brand: Brand): string {
  return JSON.stringify(Brand$outboundSchema.parse(brand));
}

export function brandFromJSON(
  jsonString: string,
): SafeParseResult<Brand, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Brand$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Brand' from JSON`,
  );
}
