/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CancellationStatus,
  CancellationStatus$inboundSchema,
  CancellationStatus$outboundSchema,
} from "./cancellationstatus.js";

export type Cancellation = {
  cancellationID: string;
  status: CancellationStatus;
  createdOn: Date;
};

/** @internal */
export const Cancellation$inboundSchema: z.ZodType<
  Cancellation,
  z.ZodTypeDef,
  unknown
> = z.object({
  cancellationID: z.string(),
  status: CancellationStatus$inboundSchema,
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type Cancellation$Outbound = {
  cancellationID: string;
  status: string;
  createdOn: string;
};

/** @internal */
export const Cancellation$outboundSchema: z.ZodType<
  Cancellation$Outbound,
  z.ZodTypeDef,
  Cancellation
> = z.object({
  cancellationID: z.string(),
  status: CancellationStatus$outboundSchema,
  createdOn: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cancellation$ {
  /** @deprecated use `Cancellation$inboundSchema` instead. */
  export const inboundSchema = Cancellation$inboundSchema;
  /** @deprecated use `Cancellation$outboundSchema` instead. */
  export const outboundSchema = Cancellation$outboundSchema;
  /** @deprecated use `Cancellation$Outbound` instead. */
  export type Outbound = Cancellation$Outbound;
}

export function cancellationToJSON(cancellation: Cancellation): string {
  return JSON.stringify(Cancellation$outboundSchema.parse(cancellation));
}

export function cancellationFromJSON(
  jsonString: string,
): SafeParseResult<Cancellation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cancellation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cancellation' from JSON`,
  );
}
