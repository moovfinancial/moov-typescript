/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplePayMerchantDomains = {
  accountID: string;
  /**
   * A UTF-8 string to display in the Buy button.
   */
  displayName: string;
  /**
   * A unique list of fully-qualified, top-level or sub-domain names where you will accept Apple Pay.
   */
  domains: Array<string>;
  createdOn: Date;
  updatedOn: Date;
};

/** @internal */
export const ApplePayMerchantDomains$inboundSchema: z.ZodType<
  ApplePayMerchantDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  displayName: z.string(),
  domains: z.array(z.string()),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ApplePayMerchantDomains$Outbound = {
  accountID: string;
  displayName: string;
  domains: Array<string>;
  createdOn: string;
  updatedOn: string;
};

/** @internal */
export const ApplePayMerchantDomains$outboundSchema: z.ZodType<
  ApplePayMerchantDomains$Outbound,
  z.ZodTypeDef,
  ApplePayMerchantDomains
> = z.object({
  accountID: z.string(),
  displayName: z.string(),
  domains: z.array(z.string()),
  createdOn: z.date().transform(v => v.toISOString()),
  updatedOn: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplePayMerchantDomains$ {
  /** @deprecated use `ApplePayMerchantDomains$inboundSchema` instead. */
  export const inboundSchema = ApplePayMerchantDomains$inboundSchema;
  /** @deprecated use `ApplePayMerchantDomains$outboundSchema` instead. */
  export const outboundSchema = ApplePayMerchantDomains$outboundSchema;
  /** @deprecated use `ApplePayMerchantDomains$Outbound` instead. */
  export type Outbound = ApplePayMerchantDomains$Outbound;
}

export function applePayMerchantDomainsToJSON(
  applePayMerchantDomains: ApplePayMerchantDomains,
): string {
  return JSON.stringify(
    ApplePayMerchantDomains$outboundSchema.parse(applePayMerchantDomains),
  );
}

export function applePayMerchantDomainsFromJSON(
  jsonString: string,
): SafeParseResult<ApplePayMerchantDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplePayMerchantDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplePayMerchantDomains' from JSON`,
  );
}
