/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BrandColor,
  BrandColor$inboundSchema,
  BrandColor$Outbound,
  BrandColor$outboundSchema,
} from "./brandcolor.js";

export type Colors = {
  dark: BrandColor;
  light: BrandColor;
};

/** @internal */
export const Colors$inboundSchema: z.ZodType<Colors, z.ZodTypeDef, unknown> = z
  .object({
    dark: BrandColor$inboundSchema,
    light: BrandColor$inboundSchema,
  });

/** @internal */
export type Colors$Outbound = {
  dark: BrandColor$Outbound;
  light: BrandColor$Outbound;
};

/** @internal */
export const Colors$outboundSchema: z.ZodType<
  Colors$Outbound,
  z.ZodTypeDef,
  Colors
> = z.object({
  dark: BrandColor$outboundSchema,
  light: BrandColor$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Colors$ {
  /** @deprecated use `Colors$inboundSchema` instead. */
  export const inboundSchema = Colors$inboundSchema;
  /** @deprecated use `Colors$outboundSchema` instead. */
  export const outboundSchema = Colors$outboundSchema;
  /** @deprecated use `Colors$Outbound` instead. */
  export type Outbound = Colors$Outbound;
}

export function colorsToJSON(colors: Colors): string {
  return JSON.stringify(Colors$outboundSchema.parse(colors));
}

export function colorsFromJSON(
  jsonString: string,
): SafeParseResult<Colors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Colors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Colors' from JSON`,
  );
}
