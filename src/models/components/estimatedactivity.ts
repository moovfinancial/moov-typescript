/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MonthlyVolumeRange,
  MonthlyVolumeRange$inboundSchema,
  MonthlyVolumeRange$outboundSchema,
} from "./monthlyvolumerange.js";

export type EstimatedActivity = {
  averageTransactionAmount?: number | undefined;
  maximumTransactionAmount?: number | undefined;
  /**
   * The low value in each range is included. The high value in each range is excluded.
   */
  monthlyVolumeRange?: MonthlyVolumeRange | undefined;
};

/** @internal */
export const EstimatedActivity$inboundSchema: z.ZodType<
  EstimatedActivity,
  z.ZodTypeDef,
  unknown
> = z.object({
  averageTransactionAmount: z.number().int().optional(),
  maximumTransactionAmount: z.number().int().optional(),
  monthlyVolumeRange: MonthlyVolumeRange$inboundSchema.optional(),
});

/** @internal */
export type EstimatedActivity$Outbound = {
  averageTransactionAmount?: number | undefined;
  maximumTransactionAmount?: number | undefined;
  monthlyVolumeRange?: string | undefined;
};

/** @internal */
export const EstimatedActivity$outboundSchema: z.ZodType<
  EstimatedActivity$Outbound,
  z.ZodTypeDef,
  EstimatedActivity
> = z.object({
  averageTransactionAmount: z.number().int().optional(),
  maximumTransactionAmount: z.number().int().optional(),
  monthlyVolumeRange: MonthlyVolumeRange$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EstimatedActivity$ {
  /** @deprecated use `EstimatedActivity$inboundSchema` instead. */
  export const inboundSchema = EstimatedActivity$inboundSchema;
  /** @deprecated use `EstimatedActivity$outboundSchema` instead. */
  export const outboundSchema = EstimatedActivity$outboundSchema;
  /** @deprecated use `EstimatedActivity$Outbound` instead. */
  export type Outbound = EstimatedActivity$Outbound;
}

export function estimatedActivityToJSON(
  estimatedActivity: EstimatedActivity,
): string {
  return JSON.stringify(
    EstimatedActivity$outboundSchema.parse(estimatedActivity),
  );
}

export function estimatedActivityFromJSON(
  jsonString: string,
): SafeParseResult<EstimatedActivity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EstimatedActivity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EstimatedActivity' from JSON`,
  );
}
