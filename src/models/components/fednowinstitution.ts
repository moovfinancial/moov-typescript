/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FedNowServices,
  FedNowServices$inboundSchema,
  FedNowServices$Outbound,
  FedNowServices$outboundSchema,
} from "./fednowservices.js";

export type FedNowInstitution = {
  /**
   * Name of the financial institution.
   */
  name: string;
  routingNumber: string;
  services: FedNowServices;
};

/** @internal */
export const FedNowInstitution$inboundSchema: z.ZodType<
  FedNowInstitution,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  routingNumber: z.string(),
  services: FedNowServices$inboundSchema,
});

/** @internal */
export type FedNowInstitution$Outbound = {
  name: string;
  routingNumber: string;
  services: FedNowServices$Outbound;
};

/** @internal */
export const FedNowInstitution$outboundSchema: z.ZodType<
  FedNowInstitution$Outbound,
  z.ZodTypeDef,
  FedNowInstitution
> = z.object({
  name: z.string(),
  routingNumber: z.string(),
  services: FedNowServices$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FedNowInstitution$ {
  /** @deprecated use `FedNowInstitution$inboundSchema` instead. */
  export const inboundSchema = FedNowInstitution$inboundSchema;
  /** @deprecated use `FedNowInstitution$outboundSchema` instead. */
  export const outboundSchema = FedNowInstitution$outboundSchema;
  /** @deprecated use `FedNowInstitution$Outbound` instead. */
  export type Outbound = FedNowInstitution$Outbound;
}

export function fedNowInstitutionToJSON(
  fedNowInstitution: FedNowInstitution,
): string {
  return JSON.stringify(
    FedNowInstitution$outboundSchema.parse(fedNowInstitution),
  );
}

export function fedNowInstitutionFromJSON(
  jsonString: string,
): SafeParseResult<FedNowInstitution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FedNowInstitution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FedNowInstitution' from JSON`,
  );
}
