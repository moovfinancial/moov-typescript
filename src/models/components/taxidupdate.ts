/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaxIDUpdateEin = {
  number?: string | undefined;
};

/**
 * An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
 */
export type TaxIDUpdate = {
  ein?: TaxIDUpdateEin | undefined;
};

/** @internal */
export const TaxIDUpdateEin$inboundSchema: z.ZodType<
  TaxIDUpdateEin,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.string().optional(),
});

/** @internal */
export type TaxIDUpdateEin$Outbound = {
  number?: string | undefined;
};

/** @internal */
export const TaxIDUpdateEin$outboundSchema: z.ZodType<
  TaxIDUpdateEin$Outbound,
  z.ZodTypeDef,
  TaxIDUpdateEin
> = z.object({
  number: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxIDUpdateEin$ {
  /** @deprecated use `TaxIDUpdateEin$inboundSchema` instead. */
  export const inboundSchema = TaxIDUpdateEin$inboundSchema;
  /** @deprecated use `TaxIDUpdateEin$outboundSchema` instead. */
  export const outboundSchema = TaxIDUpdateEin$outboundSchema;
  /** @deprecated use `TaxIDUpdateEin$Outbound` instead. */
  export type Outbound = TaxIDUpdateEin$Outbound;
}

export function taxIDUpdateEinToJSON(taxIDUpdateEin: TaxIDUpdateEin): string {
  return JSON.stringify(TaxIDUpdateEin$outboundSchema.parse(taxIDUpdateEin));
}

export function taxIDUpdateEinFromJSON(
  jsonString: string,
): SafeParseResult<TaxIDUpdateEin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxIDUpdateEin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxIDUpdateEin' from JSON`,
  );
}

/** @internal */
export const TaxIDUpdate$inboundSchema: z.ZodType<
  TaxIDUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  ein: z.lazy(() => TaxIDUpdateEin$inboundSchema).optional(),
});

/** @internal */
export type TaxIDUpdate$Outbound = {
  ein?: TaxIDUpdateEin$Outbound | undefined;
};

/** @internal */
export const TaxIDUpdate$outboundSchema: z.ZodType<
  TaxIDUpdate$Outbound,
  z.ZodTypeDef,
  TaxIDUpdate
> = z.object({
  ein: z.lazy(() => TaxIDUpdateEin$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxIDUpdate$ {
  /** @deprecated use `TaxIDUpdate$inboundSchema` instead. */
  export const inboundSchema = TaxIDUpdate$inboundSchema;
  /** @deprecated use `TaxIDUpdate$outboundSchema` instead. */
  export const outboundSchema = TaxIDUpdate$outboundSchema;
  /** @deprecated use `TaxIDUpdate$Outbound` instead. */
  export type Outbound = TaxIDUpdate$Outbound;
}

export function taxIDUpdateToJSON(taxIDUpdate: TaxIDUpdate): string {
  return JSON.stringify(TaxIDUpdate$outboundSchema.parse(taxIDUpdate));
}

export function taxIDUpdateFromJSON(
  jsonString: string,
): SafeParseResult<TaxIDUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxIDUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxIDUpdate' from JSON`,
  );
}
