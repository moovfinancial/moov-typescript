/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Ein = {
  number?: string | undefined;
};

/**
 * An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
 */
export type TaxIDUpdate = {
  ein?: Ein | undefined;
};

/** @internal */
export const Ein$inboundSchema: z.ZodType<Ein, z.ZodTypeDef, unknown> = z
  .object({
    number: z.string().optional(),
  });

/** @internal */
export type Ein$Outbound = {
  number?: string | undefined;
};

/** @internal */
export const Ein$outboundSchema: z.ZodType<Ein$Outbound, z.ZodTypeDef, Ein> = z
  .object({
    number: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ein$ {
  /** @deprecated use `Ein$inboundSchema` instead. */
  export const inboundSchema = Ein$inboundSchema;
  /** @deprecated use `Ein$outboundSchema` instead. */
  export const outboundSchema = Ein$outboundSchema;
  /** @deprecated use `Ein$Outbound` instead. */
  export type Outbound = Ein$Outbound;
}

export function einToJSON(ein: Ein): string {
  return JSON.stringify(Ein$outboundSchema.parse(ein));
}

export function einFromJSON(
  jsonString: string,
): SafeParseResult<Ein, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ein$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ein' from JSON`,
  );
}

/** @internal */
export const TaxIDUpdate$inboundSchema: z.ZodType<
  TaxIDUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  ein: z.lazy(() => Ein$inboundSchema).optional(),
});

/** @internal */
export type TaxIDUpdate$Outbound = {
  ein?: Ein$Outbound | undefined;
};

/** @internal */
export const TaxIDUpdate$outboundSchema: z.ZodType<
  TaxIDUpdate$Outbound,
  z.ZodTypeDef,
  TaxIDUpdate
> = z.object({
  ein: z.lazy(() => Ein$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxIDUpdate$ {
  /** @deprecated use `TaxIDUpdate$inboundSchema` instead. */
  export const inboundSchema = TaxIDUpdate$inboundSchema;
  /** @deprecated use `TaxIDUpdate$outboundSchema` instead. */
  export const outboundSchema = TaxIDUpdate$outboundSchema;
  /** @deprecated use `TaxIDUpdate$Outbound` instead. */
  export type Outbound = TaxIDUpdate$Outbound;
}

export function taxIDUpdateToJSON(taxIDUpdate: TaxIDUpdate): string {
  return JSON.stringify(TaxIDUpdate$outboundSchema.parse(taxIDUpdate));
}

export function taxIDUpdateFromJSON(
  jsonString: string,
): SafeParseResult<TaxIDUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxIDUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxIDUpdate' from JSON`,
  );
}
