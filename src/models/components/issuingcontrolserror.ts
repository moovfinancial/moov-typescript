/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IssuingVelocityLimitError,
  IssuingVelocityLimitError$inboundSchema,
  IssuingVelocityLimitError$Outbound,
  IssuingVelocityLimitError$outboundSchema,
} from "./issuingvelocitylimiterror.js";

export type IssuingControlsError = {
  velocityLimits?: { [k: string]: IssuingVelocityLimitError } | undefined;
};

/** @internal */
export const IssuingControlsError$inboundSchema: z.ZodType<
  IssuingControlsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  velocityLimits: z.record(IssuingVelocityLimitError$inboundSchema).optional(),
});

/** @internal */
export type IssuingControlsError$Outbound = {
  velocityLimits?:
    | { [k: string]: IssuingVelocityLimitError$Outbound }
    | undefined;
};

/** @internal */
export const IssuingControlsError$outboundSchema: z.ZodType<
  IssuingControlsError$Outbound,
  z.ZodTypeDef,
  IssuingControlsError
> = z.object({
  velocityLimits: z.record(IssuingVelocityLimitError$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssuingControlsError$ {
  /** @deprecated use `IssuingControlsError$inboundSchema` instead. */
  export const inboundSchema = IssuingControlsError$inboundSchema;
  /** @deprecated use `IssuingControlsError$outboundSchema` instead. */
  export const outboundSchema = IssuingControlsError$outboundSchema;
  /** @deprecated use `IssuingControlsError$Outbound` instead. */
  export type Outbound = IssuingControlsError$Outbound;
}

export function issuingControlsErrorToJSON(
  issuingControlsError: IssuingControlsError,
): string {
  return JSON.stringify(
    IssuingControlsError$outboundSchema.parse(issuingControlsError),
  );
}

export function issuingControlsErrorFromJSON(
  jsonString: string,
): SafeParseResult<IssuingControlsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IssuingControlsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IssuingControlsError' from JSON`,
  );
}
