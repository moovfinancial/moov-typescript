/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the acceptance of the Terms of Service.
 */
export type TermsOfService = {
  /**
   * The date and time the terms of service were accepted.
   */
  acceptedDate: Date;
  /**
   * The IP address from which the terms of service were accepted.
   */
  acceptedIP: string;
};

/** @internal */
export const TermsOfService$inboundSchema: z.ZodType<
  TermsOfService,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptedDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  acceptedIP: z.string(),
});

/** @internal */
export type TermsOfService$Outbound = {
  acceptedDate: string;
  acceptedIP: string;
};

/** @internal */
export const TermsOfService$outboundSchema: z.ZodType<
  TermsOfService$Outbound,
  z.ZodTypeDef,
  TermsOfService
> = z.object({
  acceptedDate: z.date().transform(v => v.toISOString()),
  acceptedIP: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TermsOfService$ {
  /** @deprecated use `TermsOfService$inboundSchema` instead. */
  export const inboundSchema = TermsOfService$inboundSchema;
  /** @deprecated use `TermsOfService$outboundSchema` instead. */
  export const outboundSchema = TermsOfService$outboundSchema;
  /** @deprecated use `TermsOfService$Outbound` instead. */
  export type Outbound = TermsOfService$Outbound;
}

export function termsOfServiceToJSON(termsOfService: TermsOfService): string {
  return JSON.stringify(TermsOfService$outboundSchema.parse(termsOfService));
}

export function termsOfServiceFromJSON(
  jsonString: string,
): SafeParseResult<TermsOfService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TermsOfService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TermsOfService' from JSON`,
  );
}
