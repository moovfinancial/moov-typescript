/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequirementErrorCode,
  RequirementErrorCode$inboundSchema,
  RequirementErrorCode$outboundSchema,
} from "./requirementerrorcode.js";
import {
  RequirementID,
  RequirementID$inboundSchema,
  RequirementID$outboundSchema,
} from "./requirementid.js";

export type RequirementError = {
  /**
   * The unique ID of what the requirement is asking to be filled out.
   */
  requirement: RequirementID;
  errorCode?: RequirementErrorCode | undefined;
};

/** @internal */
export const RequirementError$inboundSchema: z.ZodType<
  RequirementError,
  z.ZodTypeDef,
  unknown
> = z.object({
  requirement: RequirementID$inboundSchema,
  errorCode: RequirementErrorCode$inboundSchema.optional(),
});

/** @internal */
export type RequirementError$Outbound = {
  requirement: string;
  errorCode?: string | undefined;
};

/** @internal */
export const RequirementError$outboundSchema: z.ZodType<
  RequirementError$Outbound,
  z.ZodTypeDef,
  RequirementError
> = z.object({
  requirement: RequirementID$outboundSchema,
  errorCode: RequirementErrorCode$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequirementError$ {
  /** @deprecated use `RequirementError$inboundSchema` instead. */
  export const inboundSchema = RequirementError$inboundSchema;
  /** @deprecated use `RequirementError$outboundSchema` instead. */
  export const outboundSchema = RequirementError$outboundSchema;
  /** @deprecated use `RequirementError$Outbound` instead. */
  export type Outbound = RequirementError$Outbound;
}

export function requirementErrorToJSON(
  requirementError: RequirementError,
): string {
  return JSON.stringify(
    RequirementError$outboundSchema.parse(requirementError),
  );
}

export function requirementErrorFromJSON(
  jsonString: string,
): SafeParseResult<RequirementError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequirementError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequirementError' from JSON`,
  );
}
