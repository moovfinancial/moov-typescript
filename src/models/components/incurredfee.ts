/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AmountDecimal,
  AmountDecimal$inboundSchema,
  AmountDecimal$Outbound,
  AmountDecimal$outboundSchema,
} from "./amountdecimal.js";
import {
  GeneratedBy,
  GeneratedBy$inboundSchema,
  GeneratedBy$Outbound,
  GeneratedBy$outboundSchema,
} from "./generatedby.js";

/**
 * A fee incurred by a user.
 */
export type IncurredFee = {
  feeID?: string | undefined;
  accountID?: string | undefined;
  walletID?: string | undefined;
  createdOn?: Date | undefined;
  feeName?: string | undefined;
  amount?: AmountDecimal | undefined;
  /**
   * The entity that generated the fee.
   */
  generatedBy?: GeneratedBy | undefined;
};

/** @internal */
export const IncurredFee$inboundSchema: z.ZodType<
  IncurredFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  feeID: z.string().optional(),
  accountID: z.string().optional(),
  walletID: z.string().optional(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  feeName: z.string().optional(),
  amount: AmountDecimal$inboundSchema.optional(),
  generatedBy: GeneratedBy$inboundSchema.optional(),
});

/** @internal */
export type IncurredFee$Outbound = {
  feeID?: string | undefined;
  accountID?: string | undefined;
  walletID?: string | undefined;
  createdOn?: string | undefined;
  feeName?: string | undefined;
  amount?: AmountDecimal$Outbound | undefined;
  generatedBy?: GeneratedBy$Outbound | undefined;
};

/** @internal */
export const IncurredFee$outboundSchema: z.ZodType<
  IncurredFee$Outbound,
  z.ZodTypeDef,
  IncurredFee
> = z.object({
  feeID: z.string().optional(),
  accountID: z.string().optional(),
  walletID: z.string().optional(),
  createdOn: z.date().transform(v => v.toISOString()).optional(),
  feeName: z.string().optional(),
  amount: AmountDecimal$outboundSchema.optional(),
  generatedBy: GeneratedBy$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncurredFee$ {
  /** @deprecated use `IncurredFee$inboundSchema` instead. */
  export const inboundSchema = IncurredFee$inboundSchema;
  /** @deprecated use `IncurredFee$outboundSchema` instead. */
  export const outboundSchema = IncurredFee$outboundSchema;
  /** @deprecated use `IncurredFee$Outbound` instead. */
  export type Outbound = IncurredFee$Outbound;
}

export function incurredFeeToJSON(incurredFee: IncurredFee): string {
  return JSON.stringify(IncurredFee$outboundSchema.parse(incurredFee));
}

export function incurredFeeFromJSON(
  jsonString: string,
): SafeParseResult<IncurredFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncurredFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncurredFee' from JSON`,
  );
}
