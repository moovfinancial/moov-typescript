/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The countries in which an account operates.
 */
export type AccountCountries = {
  countries: Array<string>;
};

/** @internal */
export const AccountCountries$inboundSchema: z.ZodType<
  AccountCountries,
  z.ZodTypeDef,
  unknown
> = z.object({
  countries: z.array(z.string()),
});

/** @internal */
export type AccountCountries$Outbound = {
  countries: Array<string>;
};

/** @internal */
export const AccountCountries$outboundSchema: z.ZodType<
  AccountCountries$Outbound,
  z.ZodTypeDef,
  AccountCountries
> = z.object({
  countries: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountCountries$ {
  /** @deprecated use `AccountCountries$inboundSchema` instead. */
  export const inboundSchema = AccountCountries$inboundSchema;
  /** @deprecated use `AccountCountries$outboundSchema` instead. */
  export const outboundSchema = AccountCountries$outboundSchema;
  /** @deprecated use `AccountCountries$Outbound` instead. */
  export type Outbound = AccountCountries$Outbound;
}

export function accountCountriesToJSON(
  accountCountries: AccountCountries,
): string {
  return JSON.stringify(
    AccountCountries$outboundSchema.parse(accountCountries),
  );
}

export function accountCountriesFromJSON(
  jsonString: string,
): SafeParseResult<AccountCountries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountCountries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountCountries' from JSON`,
  );
}
