/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BirthDate = {
  day: number;
  month: number;
  year: number;
};

/** @internal */
export const BirthDate$inboundSchema: z.ZodType<
  BirthDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int(),
  month: z.number().int(),
  year: z.number().int(),
});

/** @internal */
export type BirthDate$Outbound = {
  day: number;
  month: number;
  year: number;
};

/** @internal */
export const BirthDate$outboundSchema: z.ZodType<
  BirthDate$Outbound,
  z.ZodTypeDef,
  BirthDate
> = z.object({
  day: z.number().int(),
  month: z.number().int(),
  year: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BirthDate$ {
  /** @deprecated use `BirthDate$inboundSchema` instead. */
  export const inboundSchema = BirthDate$inboundSchema;
  /** @deprecated use `BirthDate$outboundSchema` instead. */
  export const outboundSchema = BirthDate$outboundSchema;
  /** @deprecated use `BirthDate$Outbound` instead. */
  export type Outbound = BirthDate$Outbound;
}

export function birthDateToJSON(birthDate: BirthDate): string {
  return JSON.stringify(BirthDate$outboundSchema.parse(birthDate));
}

export function birthDateFromJSON(
  jsonString: string,
): SafeParseResult<BirthDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BirthDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BirthDate' from JSON`,
  );
}
