/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes an action or set of actions that an account is permitted to perform.
 */
export type AccountCapability = {
  capability: string;
  status: string;
};

/** @internal */
export const AccountCapability$inboundSchema: z.ZodType<
  AccountCapability,
  z.ZodTypeDef,
  unknown
> = z.object({
  capability: z.string(),
  status: z.string(),
});

/** @internal */
export type AccountCapability$Outbound = {
  capability: string;
  status: string;
};

/** @internal */
export const AccountCapability$outboundSchema: z.ZodType<
  AccountCapability$Outbound,
  z.ZodTypeDef,
  AccountCapability
> = z.object({
  capability: z.string(),
  status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountCapability$ {
  /** @deprecated use `AccountCapability$inboundSchema` instead. */
  export const inboundSchema = AccountCapability$inboundSchema;
  /** @deprecated use `AccountCapability$outboundSchema` instead. */
  export const outboundSchema = AccountCapability$outboundSchema;
  /** @deprecated use `AccountCapability$Outbound` instead. */
  export type Outbound = AccountCapability$Outbound;
}

export function accountCapabilityToJSON(
  accountCapability: AccountCapability,
): string {
  return JSON.stringify(
    AccountCapability$outboundSchema.parse(accountCapability),
  );
}

export function accountCapabilityFromJSON(
  jsonString: string,
): SafeParseResult<AccountCapability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountCapability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountCapability' from JSON`,
  );
}
