/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardVolumeDistribution,
  CardVolumeDistribution$inboundSchema,
  CardVolumeDistribution$Outbound,
  CardVolumeDistribution$outboundSchema,
} from "./cardvolumedistribution.js";
import {
  FulfillmentDetails,
  FulfillmentDetails$inboundSchema,
  FulfillmentDetails$Outbound,
  FulfillmentDetails$outboundSchema,
} from "./fulfillmentdetails.js";
import {
  UnderwritingStatus,
  UnderwritingStatus$inboundSchema,
  UnderwritingStatus$outboundSchema,
} from "./underwritingstatus.js";
import {
  VolumeByCustomerType,
  VolumeByCustomerType$inboundSchema,
  VolumeByCustomerType$Outbound,
  VolumeByCustomerType$outboundSchema,
} from "./volumebycustomertype.js";

/**
 * Describes underwriting values (in USD) used for card payment acceptance.
 */
export type Underwriting = {
  averageTransactionSize: number;
  maxTransactionSize: number;
  averageMonthlyTransactionVolume: number;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status: UnderwritingStatus;
  volumeByCustomerType: VolumeByCustomerType;
  cardVolumeDistribution: CardVolumeDistribution;
  fulfillment: FulfillmentDetails;
};

/** @internal */
export const Underwriting$inboundSchema: z.ZodType<
  Underwriting,
  z.ZodTypeDef,
  unknown
> = z.object({
  averageTransactionSize: z.number().int(),
  maxTransactionSize: z.number().int(),
  averageMonthlyTransactionVolume: z.number().int(),
  status: UnderwritingStatus$inboundSchema,
  volumeByCustomerType: VolumeByCustomerType$inboundSchema,
  cardVolumeDistribution: CardVolumeDistribution$inboundSchema,
  fulfillment: FulfillmentDetails$inboundSchema,
});

/** @internal */
export type Underwriting$Outbound = {
  averageTransactionSize: number;
  maxTransactionSize: number;
  averageMonthlyTransactionVolume: number;
  status: string;
  volumeByCustomerType: VolumeByCustomerType$Outbound;
  cardVolumeDistribution: CardVolumeDistribution$Outbound;
  fulfillment: FulfillmentDetails$Outbound;
};

/** @internal */
export const Underwriting$outboundSchema: z.ZodType<
  Underwriting$Outbound,
  z.ZodTypeDef,
  Underwriting
> = z.object({
  averageTransactionSize: z.number().int(),
  maxTransactionSize: z.number().int(),
  averageMonthlyTransactionVolume: z.number().int(),
  status: UnderwritingStatus$outboundSchema,
  volumeByCustomerType: VolumeByCustomerType$outboundSchema,
  cardVolumeDistribution: CardVolumeDistribution$outboundSchema,
  fulfillment: FulfillmentDetails$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Underwriting$ {
  /** @deprecated use `Underwriting$inboundSchema` instead. */
  export const inboundSchema = Underwriting$inboundSchema;
  /** @deprecated use `Underwriting$outboundSchema` instead. */
  export const outboundSchema = Underwriting$outboundSchema;
  /** @deprecated use `Underwriting$Outbound` instead. */
  export type Outbound = Underwriting$Outbound;
}

export function underwritingToJSON(underwriting: Underwriting): string {
  return JSON.stringify(Underwriting$outboundSchema.parse(underwriting));
}

export function underwritingFromJSON(
  jsonString: string,
): SafeParseResult<Underwriting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Underwriting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Underwriting' from JSON`,
  );
}
