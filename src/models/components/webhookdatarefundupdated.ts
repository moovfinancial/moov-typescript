/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RefundStatus,
  RefundStatus$inboundSchema,
  RefundStatus$outboundSchema,
} from "./refundstatus.js";

export type WebhookDataRefundUpdated = {
  accountID: string;
  transferID: string;
  refundID: string;
  status: RefundStatus;
};

/** @internal */
export const WebhookDataRefundUpdated$inboundSchema: z.ZodType<
  WebhookDataRefundUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  refundID: z.string(),
  status: RefundStatus$inboundSchema,
});

/** @internal */
export type WebhookDataRefundUpdated$Outbound = {
  accountID: string;
  transferID: string;
  refundID: string;
  status: string;
};

/** @internal */
export const WebhookDataRefundUpdated$outboundSchema: z.ZodType<
  WebhookDataRefundUpdated$Outbound,
  z.ZodTypeDef,
  WebhookDataRefundUpdated
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  refundID: z.string(),
  status: RefundStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataRefundUpdated$ {
  /** @deprecated use `WebhookDataRefundUpdated$inboundSchema` instead. */
  export const inboundSchema = WebhookDataRefundUpdated$inboundSchema;
  /** @deprecated use `WebhookDataRefundUpdated$outboundSchema` instead. */
  export const outboundSchema = WebhookDataRefundUpdated$outboundSchema;
  /** @deprecated use `WebhookDataRefundUpdated$Outbound` instead. */
  export type Outbound = WebhookDataRefundUpdated$Outbound;
}

export function webhookDataRefundUpdatedToJSON(
  webhookDataRefundUpdated: WebhookDataRefundUpdated,
): string {
  return JSON.stringify(
    WebhookDataRefundUpdated$outboundSchema.parse(webhookDataRefundUpdated),
  );
}

export function webhookDataRefundUpdatedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataRefundUpdated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataRefundUpdated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataRefundUpdated' from JSON`,
  );
}
