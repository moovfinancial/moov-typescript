/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BirthDateError,
  BirthDateError$inboundSchema,
  BirthDateError$Outbound,
  BirthDateError$outboundSchema,
} from "./birthdateerror.js";

export type CreateAuthorizedUserError = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  birthDate?: BirthDateError | undefined;
};

/** @internal */
export const CreateAuthorizedUserError$inboundSchema: z.ZodType<
  CreateAuthorizedUserError,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  birthDate: BirthDateError$inboundSchema.optional(),
});

/** @internal */
export type CreateAuthorizedUserError$Outbound = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  birthDate?: BirthDateError$Outbound | undefined;
};

/** @internal */
export const CreateAuthorizedUserError$outboundSchema: z.ZodType<
  CreateAuthorizedUserError$Outbound,
  z.ZodTypeDef,
  CreateAuthorizedUserError
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  birthDate: BirthDateError$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthorizedUserError$ {
  /** @deprecated use `CreateAuthorizedUserError$inboundSchema` instead. */
  export const inboundSchema = CreateAuthorizedUserError$inboundSchema;
  /** @deprecated use `CreateAuthorizedUserError$outboundSchema` instead. */
  export const outboundSchema = CreateAuthorizedUserError$outboundSchema;
  /** @deprecated use `CreateAuthorizedUserError$Outbound` instead. */
  export type Outbound = CreateAuthorizedUserError$Outbound;
}

export function createAuthorizedUserErrorToJSON(
  createAuthorizedUserError: CreateAuthorizedUserError,
): string {
  return JSON.stringify(
    CreateAuthorizedUserError$outboundSchema.parse(createAuthorizedUserError),
  );
}

export function createAuthorizedUserErrorFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthorizedUserError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAuthorizedUserError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthorizedUserError' from JSON`,
  );
}
