/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ImageUpdateRequestMultiPartImage = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/**
 * JSON-encoded metadata to update for the image.
 *
 * @remarks
 *
 * Omit this field if not updating metadata, or send `null` to clear existing metadata.
 */
export type Metadata = {
  /**
   * Alternative text for the image.
   */
  altText?: string | undefined;
};

/**
 * Multipart request body for updating an image and/or its metadata.
 */
export type ImageUpdateRequestMultiPart = {
  image?: ImageUpdateRequestMultiPartImage | Blob | undefined;
  /**
   * JSON-encoded metadata to update for the image.
   *
   * @remarks
   *
   * Omit this field if not updating metadata, or send `null` to clear existing metadata.
   */
  metadata?: Metadata | null | undefined;
};

/** @internal */
export const ImageUpdateRequestMultiPartImage$inboundSchema: z.ZodType<
  ImageUpdateRequestMultiPartImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type ImageUpdateRequestMultiPartImage$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const ImageUpdateRequestMultiPartImage$outboundSchema: z.ZodType<
  ImageUpdateRequestMultiPartImage$Outbound,
  z.ZodTypeDef,
  ImageUpdateRequestMultiPartImage
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageUpdateRequestMultiPartImage$ {
  /** @deprecated use `ImageUpdateRequestMultiPartImage$inboundSchema` instead. */
  export const inboundSchema = ImageUpdateRequestMultiPartImage$inboundSchema;
  /** @deprecated use `ImageUpdateRequestMultiPartImage$outboundSchema` instead. */
  export const outboundSchema = ImageUpdateRequestMultiPartImage$outboundSchema;
  /** @deprecated use `ImageUpdateRequestMultiPartImage$Outbound` instead. */
  export type Outbound = ImageUpdateRequestMultiPartImage$Outbound;
}

export function imageUpdateRequestMultiPartImageToJSON(
  imageUpdateRequestMultiPartImage: ImageUpdateRequestMultiPartImage,
): string {
  return JSON.stringify(
    ImageUpdateRequestMultiPartImage$outboundSchema.parse(
      imageUpdateRequestMultiPartImage,
    ),
  );
}

export function imageUpdateRequestMultiPartImageFromJSON(
  jsonString: string,
): SafeParseResult<ImageUpdateRequestMultiPartImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageUpdateRequestMultiPartImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageUpdateRequestMultiPartImage' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  altText: z.string().optional(),
});

/** @internal */
export type Metadata$Outbound = {
  altText?: string | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  altText: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const ImageUpdateRequestMultiPart$inboundSchema: z.ZodType<
  ImageUpdateRequestMultiPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.lazy(() => ImageUpdateRequestMultiPartImage$inboundSchema)
    .optional(),
  metadata: z.nullable(z.lazy(() => Metadata$inboundSchema)).optional(),
});

/** @internal */
export type ImageUpdateRequestMultiPart$Outbound = {
  image?: ImageUpdateRequestMultiPartImage$Outbound | Blob | undefined;
  metadata?: Metadata$Outbound | null | undefined;
};

/** @internal */
export const ImageUpdateRequestMultiPart$outboundSchema: z.ZodType<
  ImageUpdateRequestMultiPart$Outbound,
  z.ZodTypeDef,
  ImageUpdateRequestMultiPart
> = z.object({
  image: z.lazy(() => ImageUpdateRequestMultiPartImage$outboundSchema).or(
    blobLikeSchema,
  ).optional(),
  metadata: z.nullable(z.lazy(() => Metadata$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageUpdateRequestMultiPart$ {
  /** @deprecated use `ImageUpdateRequestMultiPart$inboundSchema` instead. */
  export const inboundSchema = ImageUpdateRequestMultiPart$inboundSchema;
  /** @deprecated use `ImageUpdateRequestMultiPart$outboundSchema` instead. */
  export const outboundSchema = ImageUpdateRequestMultiPart$outboundSchema;
  /** @deprecated use `ImageUpdateRequestMultiPart$Outbound` instead. */
  export type Outbound = ImageUpdateRequestMultiPart$Outbound;
}

export function imageUpdateRequestMultiPartToJSON(
  imageUpdateRequestMultiPart: ImageUpdateRequestMultiPart,
): string {
  return JSON.stringify(
    ImageUpdateRequestMultiPart$outboundSchema.parse(
      imageUpdateRequestMultiPart,
    ),
  );
}

export function imageUpdateRequestMultiPartFromJSON(
  jsonString: string,
): SafeParseResult<ImageUpdateRequestMultiPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageUpdateRequestMultiPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageUpdateRequestMultiPart' from JSON`,
  );
}
