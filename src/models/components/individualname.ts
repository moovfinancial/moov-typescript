/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IndividualName = {
  /**
   * The individual's first given name.
   */
  firstName: string;
  /**
   * The individual's second given name, if any.
   */
  middleName?: string | undefined;
  /**
   * The individual's family name.
   */
  lastName: string;
  /**
   * Suffix of a given name.
   */
  suffix?: string | undefined;
};

/** @internal */
export const IndividualName$inboundSchema: z.ZodType<
  IndividualName,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  middleName: z.string().optional(),
  lastName: z.string(),
  suffix: z.string().optional(),
});

/** @internal */
export type IndividualName$Outbound = {
  firstName: string;
  middleName?: string | undefined;
  lastName: string;
  suffix?: string | undefined;
};

/** @internal */
export const IndividualName$outboundSchema: z.ZodType<
  IndividualName$Outbound,
  z.ZodTypeDef,
  IndividualName
> = z.object({
  firstName: z.string(),
  middleName: z.string().optional(),
  lastName: z.string(),
  suffix: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndividualName$ {
  /** @deprecated use `IndividualName$inboundSchema` instead. */
  export const inboundSchema = IndividualName$inboundSchema;
  /** @deprecated use `IndividualName$outboundSchema` instead. */
  export const outboundSchema = IndividualName$outboundSchema;
  /** @deprecated use `IndividualName$Outbound` instead. */
  export type Outbound = IndividualName$Outbound;
}

export function individualNameToJSON(individualName: IndividualName): string {
  return JSON.stringify(IndividualName$outboundSchema.parse(individualName));
}

export function individualNameFromJSON(
  jsonString: string,
): SafeParseResult<IndividualName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndividualName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndividualName' from JSON`,
  );
}
