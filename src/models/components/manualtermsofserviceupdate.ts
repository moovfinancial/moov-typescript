/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the acceptance of the Terms of Service. All data is required, and must be from the user.
 */
export type ManualTermsOfServiceUpdate = {
  /**
   * The date and time the terms of service were accepted.
   */
  acceptedDate?: Date | undefined;
  /**
   * The IP address from which the terms of service were accepted.
   */
  acceptedIP?: string | undefined;
  /**
   * The user-agent of the user making the request.
   */
  acceptedUserAgent?: string | undefined;
  acceptedDomain?: string | undefined;
};

/** @internal */
export const ManualTermsOfServiceUpdate$inboundSchema: z.ZodType<
  ManualTermsOfServiceUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptedDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  acceptedIP: z.string().optional(),
  acceptedUserAgent: z.string().optional(),
  acceptedDomain: z.string().optional(),
});

/** @internal */
export type ManualTermsOfServiceUpdate$Outbound = {
  acceptedDate?: string | undefined;
  acceptedIP?: string | undefined;
  acceptedUserAgent?: string | undefined;
  acceptedDomain?: string | undefined;
};

/** @internal */
export const ManualTermsOfServiceUpdate$outboundSchema: z.ZodType<
  ManualTermsOfServiceUpdate$Outbound,
  z.ZodTypeDef,
  ManualTermsOfServiceUpdate
> = z.object({
  acceptedDate: z.date().transform(v => v.toISOString()).optional(),
  acceptedIP: z.string().optional(),
  acceptedUserAgent: z.string().optional(),
  acceptedDomain: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManualTermsOfServiceUpdate$ {
  /** @deprecated use `ManualTermsOfServiceUpdate$inboundSchema` instead. */
  export const inboundSchema = ManualTermsOfServiceUpdate$inboundSchema;
  /** @deprecated use `ManualTermsOfServiceUpdate$outboundSchema` instead. */
  export const outboundSchema = ManualTermsOfServiceUpdate$outboundSchema;
  /** @deprecated use `ManualTermsOfServiceUpdate$Outbound` instead. */
  export type Outbound = ManualTermsOfServiceUpdate$Outbound;
}

export function manualTermsOfServiceUpdateToJSON(
  manualTermsOfServiceUpdate: ManualTermsOfServiceUpdate,
): string {
  return JSON.stringify(
    ManualTermsOfServiceUpdate$outboundSchema.parse(manualTermsOfServiceUpdate),
  );
}

export function manualTermsOfServiceUpdateFromJSON(
  jsonString: string,
): SafeParseResult<ManualTermsOfServiceUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ManualTermsOfServiceUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ManualTermsOfServiceUpdate' from JSON`,
  );
}
