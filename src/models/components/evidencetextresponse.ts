/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvidenceType,
  EvidenceType$inboundSchema,
  EvidenceType$outboundSchema,
} from "./evidencetype.js";

export type EvidenceTextResponse = {
  evidenceID: string;
  disputeID: string;
  evidenceType: EvidenceType;
  text: string;
  createdOn: Date;
};

/** @internal */
export const EvidenceTextResponse$inboundSchema: z.ZodType<
  EvidenceTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  evidenceType: EvidenceType$inboundSchema,
  text: z.string(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type EvidenceTextResponse$Outbound = {
  evidenceID: string;
  disputeID: string;
  evidenceType: string;
  text: string;
  createdOn: string;
};

/** @internal */
export const EvidenceTextResponse$outboundSchema: z.ZodType<
  EvidenceTextResponse$Outbound,
  z.ZodTypeDef,
  EvidenceTextResponse
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  evidenceType: EvidenceType$outboundSchema,
  text: z.string(),
  createdOn: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvidenceTextResponse$ {
  /** @deprecated use `EvidenceTextResponse$inboundSchema` instead. */
  export const inboundSchema = EvidenceTextResponse$inboundSchema;
  /** @deprecated use `EvidenceTextResponse$outboundSchema` instead. */
  export const outboundSchema = EvidenceTextResponse$outboundSchema;
  /** @deprecated use `EvidenceTextResponse$Outbound` instead. */
  export type Outbound = EvidenceTextResponse$Outbound;
}

export function evidenceTextResponseToJSON(
  evidenceTextResponse: EvidenceTextResponse,
): string {
  return JSON.stringify(
    EvidenceTextResponse$outboundSchema.parse(evidenceTextResponse),
  );
}

export function evidenceTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<EvidenceTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvidenceTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvidenceTextResponse' from JSON`,
  );
}
