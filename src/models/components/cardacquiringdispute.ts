/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";

/**
 * Details of a card dispute.
 */
export type CardAcquiringDispute = {
  disputeID: string;
  createdOn: Date;
  amount: Amount;
};

/** @internal */
export const CardAcquiringDispute$inboundSchema: z.ZodType<
  CardAcquiringDispute,
  z.ZodTypeDef,
  unknown
> = z.object({
  disputeID: z.string(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  amount: Amount$inboundSchema,
});

/** @internal */
export type CardAcquiringDispute$Outbound = {
  disputeID: string;
  createdOn: string;
  amount: Amount$Outbound;
};

/** @internal */
export const CardAcquiringDispute$outboundSchema: z.ZodType<
  CardAcquiringDispute$Outbound,
  z.ZodTypeDef,
  CardAcquiringDispute
> = z.object({
  disputeID: z.string(),
  createdOn: z.date().transform(v => v.toISOString()),
  amount: Amount$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAcquiringDispute$ {
  /** @deprecated use `CardAcquiringDispute$inboundSchema` instead. */
  export const inboundSchema = CardAcquiringDispute$inboundSchema;
  /** @deprecated use `CardAcquiringDispute$outboundSchema` instead. */
  export const outboundSchema = CardAcquiringDispute$outboundSchema;
  /** @deprecated use `CardAcquiringDispute$Outbound` instead. */
  export type Outbound = CardAcquiringDispute$Outbound;
}

export function cardAcquiringDisputeToJSON(
  cardAcquiringDispute: CardAcquiringDispute,
): string {
  return JSON.stringify(
    CardAcquiringDispute$outboundSchema.parse(cardAcquiringDispute),
  );
}

export function cardAcquiringDisputeFromJSON(
  jsonString: string,
): SafeParseResult<CardAcquiringDispute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAcquiringDispute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAcquiringDispute' from JSON`,
  );
}
