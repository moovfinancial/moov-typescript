/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AmountDecimalValidationError = {
  currency?: string | undefined;
  valueDecimal?: string | undefined;
};

/** @internal */
export const AmountDecimalValidationError$inboundSchema: z.ZodType<
  AmountDecimalValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  valueDecimal: z.string().optional(),
});

/** @internal */
export type AmountDecimalValidationError$Outbound = {
  currency?: string | undefined;
  valueDecimal?: string | undefined;
};

/** @internal */
export const AmountDecimalValidationError$outboundSchema: z.ZodType<
  AmountDecimalValidationError$Outbound,
  z.ZodTypeDef,
  AmountDecimalValidationError
> = z.object({
  currency: z.string().optional(),
  valueDecimal: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountDecimalValidationError$ {
  /** @deprecated use `AmountDecimalValidationError$inboundSchema` instead. */
  export const inboundSchema = AmountDecimalValidationError$inboundSchema;
  /** @deprecated use `AmountDecimalValidationError$outboundSchema` instead. */
  export const outboundSchema = AmountDecimalValidationError$outboundSchema;
  /** @deprecated use `AmountDecimalValidationError$Outbound` instead. */
  export type Outbound = AmountDecimalValidationError$Outbound;
}

export function amountDecimalValidationErrorToJSON(
  amountDecimalValidationError: AmountDecimalValidationError,
): string {
  return JSON.stringify(
    AmountDecimalValidationError$outboundSchema.parse(
      amountDecimalValidationError,
    ),
  );
}

export function amountDecimalValidationErrorFromJSON(
  jsonString: string,
): SafeParseResult<AmountDecimalValidationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AmountDecimalValidationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AmountDecimalValidationError' from JSON`,
  );
}
