/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AddressUpdate,
  AddressUpdate$inboundSchema,
  AddressUpdate$Outbound,
  AddressUpdate$outboundSchema,
} from "./addressupdate.js";
import {
  PhoneNumber,
  PhoneNumber$inboundSchema,
  PhoneNumber$Outbound,
  PhoneNumber$outboundSchema,
} from "./phonenumber.js";

/**
 * User-provided information that can be displayed on credit card transactions for customers to use when
 *
 * @remarks
 * contacting a customer support team. This data is only allowed on a business account.
 */
export type CustomerSupportUpdate = {
  phone?: PhoneNumber | undefined;
  email?: string | undefined;
  address?: AddressUpdate | undefined;
  website?: string | undefined;
};

/** @internal */
export const CustomerSupportUpdate$inboundSchema: z.ZodType<
  CustomerSupportUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  phone: PhoneNumber$inboundSchema.optional(),
  email: z.string().optional(),
  address: AddressUpdate$inboundSchema.optional(),
  website: z.string().optional(),
});

/** @internal */
export type CustomerSupportUpdate$Outbound = {
  phone?: PhoneNumber$Outbound | undefined;
  email?: string | undefined;
  address?: AddressUpdate$Outbound | undefined;
  website?: string | undefined;
};

/** @internal */
export const CustomerSupportUpdate$outboundSchema: z.ZodType<
  CustomerSupportUpdate$Outbound,
  z.ZodTypeDef,
  CustomerSupportUpdate
> = z.object({
  phone: PhoneNumber$outboundSchema.optional(),
  email: z.string().optional(),
  address: AddressUpdate$outboundSchema.optional(),
  website: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerSupportUpdate$ {
  /** @deprecated use `CustomerSupportUpdate$inboundSchema` instead. */
  export const inboundSchema = CustomerSupportUpdate$inboundSchema;
  /** @deprecated use `CustomerSupportUpdate$outboundSchema` instead. */
  export const outboundSchema = CustomerSupportUpdate$outboundSchema;
  /** @deprecated use `CustomerSupportUpdate$Outbound` instead. */
  export type Outbound = CustomerSupportUpdate$Outbound;
}

export function customerSupportUpdateToJSON(
  customerSupportUpdate: CustomerSupportUpdate,
): string {
  return JSON.stringify(
    CustomerSupportUpdate$outboundSchema.parse(customerSupportUpdate),
  );
}

export function customerSupportUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CustomerSupportUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerSupportUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerSupportUpdate' from JSON`,
  );
}
