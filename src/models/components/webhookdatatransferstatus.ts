/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const WebhookDataTransferStatus = {
  Created: "created",
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
  Reversed: "reversed",
  Queued: "queued",
  Canceled: "canceled",
  SourceCompleted: "source.completed",
  SourceCorrected: "source.corrected",
  SourceInitiated: "source.initiated",
  SourceReturned: "source.returned",
  SourceOriginated: "source.originated",
  SourceConfirmed: "source.confirmed",
  SourceSettled: "source.settled",
  SourceFailed: "source.failed",
  SourceCanceled: "source.canceled",
  DestinationCompleted: "destination.completed",
  DestinationCorrected: "destination.corrected",
  DestinationInitiated: "destination.initiated",
  DestinationReturned: "destination.returned",
  DestinationOriginated: "destination.originated",
  DestinationConfirmed: "destination.confirmed",
  DestinationFailed: "destination.failed",
  DestinationAcceptedWithoutPosting: "destination.accepted-without-posting",
} as const;
export type WebhookDataTransferStatus = ClosedEnum<
  typeof WebhookDataTransferStatus
>;

/** @internal */
export const WebhookDataTransferStatus$inboundSchema: z.ZodNativeEnum<
  typeof WebhookDataTransferStatus
> = z.nativeEnum(WebhookDataTransferStatus);

/** @internal */
export const WebhookDataTransferStatus$outboundSchema: z.ZodNativeEnum<
  typeof WebhookDataTransferStatus
> = WebhookDataTransferStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataTransferStatus$ {
  /** @deprecated use `WebhookDataTransferStatus$inboundSchema` instead. */
  export const inboundSchema = WebhookDataTransferStatus$inboundSchema;
  /** @deprecated use `WebhookDataTransferStatus$outboundSchema` instead. */
  export const outboundSchema = WebhookDataTransferStatus$outboundSchema;
}
