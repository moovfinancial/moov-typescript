/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A structured industry taxonomy entry with category and mapped to a default MCC code.
 */
export type IndustryTaxonomy = {
  /**
   * Classification identifier for the industry.
   */
  industry: string;
  /**
   * Display name of the industry
   */
  displayName: string;
  /**
   * Category slug
   */
  category: string;
  /**
   * Human-readable category label
   */
  categoryDisplayName: string;
  /**
   * Default Merchant Category Code
   */
  defaultMcc: string;
};

/** @internal */
export const IndustryTaxonomy$inboundSchema: z.ZodType<
  IndustryTaxonomy,
  z.ZodTypeDef,
  unknown
> = z.object({
  industry: z.string(),
  displayName: z.string(),
  category: z.string(),
  categoryDisplayName: z.string(),
  defaultMcc: z.string(),
});

/** @internal */
export type IndustryTaxonomy$Outbound = {
  industry: string;
  displayName: string;
  category: string;
  categoryDisplayName: string;
  defaultMcc: string;
};

/** @internal */
export const IndustryTaxonomy$outboundSchema: z.ZodType<
  IndustryTaxonomy$Outbound,
  z.ZodTypeDef,
  IndustryTaxonomy
> = z.object({
  industry: z.string(),
  displayName: z.string(),
  category: z.string(),
  categoryDisplayName: z.string(),
  defaultMcc: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndustryTaxonomy$ {
  /** @deprecated use `IndustryTaxonomy$inboundSchema` instead. */
  export const inboundSchema = IndustryTaxonomy$inboundSchema;
  /** @deprecated use `IndustryTaxonomy$outboundSchema` instead. */
  export const outboundSchema = IndustryTaxonomy$outboundSchema;
  /** @deprecated use `IndustryTaxonomy$Outbound` instead. */
  export type Outbound = IndustryTaxonomy$Outbound;
}

export function industryTaxonomyToJSON(
  industryTaxonomy: IndustryTaxonomy,
): string {
  return JSON.stringify(
    IndustryTaxonomy$outboundSchema.parse(industryTaxonomy),
  );
}

export function industryTaxonomyFromJSON(
  jsonString: string,
): SafeParseResult<IndustryTaxonomy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndustryTaxonomy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndustryTaxonomy' from JSON`,
  );
}
