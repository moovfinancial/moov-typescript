/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DisbursementPaymentMethodType,
  DisbursementPaymentMethodType$inboundSchema,
  DisbursementPaymentMethodType$outboundSchema,
} from "./disbursementpaymentmethodtype.js";
import {
  PayoutRecipient,
  PayoutRecipient$inboundSchema,
  PayoutRecipient$Outbound,
  PayoutRecipient$outboundSchema,
} from "./payoutrecipient.js";

export type PaymentLinkPayoutDetails = {
  /**
   * A list of payment methods that should be supported for this payment link.
   */
  allowedMethods: Array<DisbursementPaymentMethodType>;
  /**
   * Specify the intended recipient of the payout.
   *
   * @remarks
   * Either `email` or `phone` must be specified, but not both.
   *
   * This information will be used to authenticate the end user when they follow the payment link.
   */
  recipient: PayoutRecipient;
};

/** @internal */
export const PaymentLinkPayoutDetails$inboundSchema: z.ZodType<
  PaymentLinkPayoutDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowedMethods: z.array(DisbursementPaymentMethodType$inboundSchema),
  recipient: PayoutRecipient$inboundSchema,
});

/** @internal */
export type PaymentLinkPayoutDetails$Outbound = {
  allowedMethods: Array<string>;
  recipient: PayoutRecipient$Outbound;
};

/** @internal */
export const PaymentLinkPayoutDetails$outboundSchema: z.ZodType<
  PaymentLinkPayoutDetails$Outbound,
  z.ZodTypeDef,
  PaymentLinkPayoutDetails
> = z.object({
  allowedMethods: z.array(DisbursementPaymentMethodType$outboundSchema),
  recipient: PayoutRecipient$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentLinkPayoutDetails$ {
  /** @deprecated use `PaymentLinkPayoutDetails$inboundSchema` instead. */
  export const inboundSchema = PaymentLinkPayoutDetails$inboundSchema;
  /** @deprecated use `PaymentLinkPayoutDetails$outboundSchema` instead. */
  export const outboundSchema = PaymentLinkPayoutDetails$outboundSchema;
  /** @deprecated use `PaymentLinkPayoutDetails$Outbound` instead. */
  export type Outbound = PaymentLinkPayoutDetails$Outbound;
}

export function paymentLinkPayoutDetailsToJSON(
  paymentLinkPayoutDetails: PaymentLinkPayoutDetails,
): string {
  return JSON.stringify(
    PaymentLinkPayoutDetails$outboundSchema.parse(paymentLinkPayoutDetails),
  );
}

export function paymentLinkPayoutDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentLinkPayoutDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentLinkPayoutDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentLinkPayoutDetails' from JSON`,
  );
}
