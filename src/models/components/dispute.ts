/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  DisputePhase,
  DisputePhase$inboundSchema,
  DisputePhase$outboundSchema,
} from "./disputephase.js";
import {
  DisputeStatus,
  DisputeStatus$inboundSchema,
  DisputeStatus$outboundSchema,
} from "./disputestatus.js";
import {
  DisputeTransferDetails,
  DisputeTransferDetails$inboundSchema,
  DisputeTransferDetails$Outbound,
  DisputeTransferDetails$outboundSchema,
} from "./disputetransferdetails.js";

/**
 * Details of a card transaction dispute.
 */
export type Dispute = {
  disputeID: string;
  merchantAccountID: string;
  amount: Amount;
  /**
   * Indicates the card network's category for the dispute.
   *
   * @remarks
   *
   * These codes may differ between card brands. You can find more information on the code from the networkReasonDescription field.
   */
  networkReasonCode: string;
  /**
   * Provides detail on the card network's categorization of the dispute.
   */
  networkReasonDescription?: string | undefined;
  transfer: DisputeTransferDetails;
  respondBy: Date;
  /**
   * The status of a particular dispute.
   *
   * @remarks
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
   */
  status: DisputeStatus;
  /**
   * The phase of a dispute within the dispute lifecycle.
   */
  phase: DisputePhase;
  createdOn: Date;
  submittedOn?: Date | undefined;
};

/** @internal */
export const Dispute$inboundSchema: z.ZodType<Dispute, z.ZodTypeDef, unknown> =
  z.object({
    disputeID: z.string(),
    merchantAccountID: z.string(),
    amount: Amount$inboundSchema,
    networkReasonCode: z.string(),
    networkReasonDescription: z.string().optional(),
    transfer: DisputeTransferDetails$inboundSchema,
    respondBy: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    status: DisputeStatus$inboundSchema,
    phase: DisputePhase$inboundSchema,
    createdOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    submittedOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type Dispute$Outbound = {
  disputeID: string;
  merchantAccountID: string;
  amount: Amount$Outbound;
  networkReasonCode: string;
  networkReasonDescription?: string | undefined;
  transfer: DisputeTransferDetails$Outbound;
  respondBy: string;
  status: string;
  phase: string;
  createdOn: string;
  submittedOn?: string | undefined;
};

/** @internal */
export const Dispute$outboundSchema: z.ZodType<
  Dispute$Outbound,
  z.ZodTypeDef,
  Dispute
> = z.object({
  disputeID: z.string(),
  merchantAccountID: z.string(),
  amount: Amount$outboundSchema,
  networkReasonCode: z.string(),
  networkReasonDescription: z.string().optional(),
  transfer: DisputeTransferDetails$outboundSchema,
  respondBy: z.date().transform(v => v.toISOString()),
  status: DisputeStatus$outboundSchema,
  phase: DisputePhase$outboundSchema,
  createdOn: z.date().transform(v => v.toISOString()),
  submittedOn: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dispute$ {
  /** @deprecated use `Dispute$inboundSchema` instead. */
  export const inboundSchema = Dispute$inboundSchema;
  /** @deprecated use `Dispute$outboundSchema` instead. */
  export const outboundSchema = Dispute$outboundSchema;
  /** @deprecated use `Dispute$Outbound` instead. */
  export type Outbound = Dispute$Outbound;
}

export function disputeToJSON(dispute: Dispute): string {
  return JSON.stringify(Dispute$outboundSchema.parse(dispute));
}

export function disputeFromJSON(
  jsonString: string,
): SafeParseResult<Dispute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Dispute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Dispute' from JSON`,
  );
}
