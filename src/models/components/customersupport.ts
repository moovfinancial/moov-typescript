/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  PhoneNumber,
  PhoneNumber$inboundSchema,
  PhoneNumber$Outbound,
  PhoneNumber$outboundSchema,
} from "./phonenumber.js";

/**
 * User-provided information that can be displayed on credit card transactions for customers to use when
 *
 * @remarks
 * contacting a customer support team. This data is only allowed on a business account.
 */
export type CustomerSupport = {
  phone?: PhoneNumber | undefined;
  email?: string | undefined;
  address?: Address | undefined;
  website?: string | undefined;
};

/** @internal */
export const CustomerSupport$inboundSchema: z.ZodType<
  CustomerSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  phone: PhoneNumber$inboundSchema.optional(),
  email: z.string().optional(),
  address: Address$inboundSchema.optional(),
  website: z.string().optional(),
});

/** @internal */
export type CustomerSupport$Outbound = {
  phone?: PhoneNumber$Outbound | undefined;
  email?: string | undefined;
  address?: Address$Outbound | undefined;
  website?: string | undefined;
};

/** @internal */
export const CustomerSupport$outboundSchema: z.ZodType<
  CustomerSupport$Outbound,
  z.ZodTypeDef,
  CustomerSupport
> = z.object({
  phone: PhoneNumber$outboundSchema.optional(),
  email: z.string().optional(),
  address: Address$outboundSchema.optional(),
  website: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerSupport$ {
  /** @deprecated use `CustomerSupport$inboundSchema` instead. */
  export const inboundSchema = CustomerSupport$inboundSchema;
  /** @deprecated use `CustomerSupport$outboundSchema` instead. */
  export const outboundSchema = CustomerSupport$outboundSchema;
  /** @deprecated use `CustomerSupport$Outbound` instead. */
  export type Outbound = CustomerSupport$Outbound;
}

export function customerSupportToJSON(
  customerSupport: CustomerSupport,
): string {
  return JSON.stringify(CustomerSupport$outboundSchema.parse(customerSupport));
}

export function customerSupportFromJSON(
  jsonString: string,
): SafeParseResult<CustomerSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerSupport' from JSON`,
  );
}
