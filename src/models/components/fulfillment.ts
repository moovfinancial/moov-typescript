/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FulfillmentMethod,
  FulfillmentMethod$inboundSchema,
  FulfillmentMethod$outboundSchema,
} from "./fulfillmentmethod.js";
import {
  FulfillmentTimeframe,
  FulfillmentTimeframe$inboundSchema,
  FulfillmentTimeframe$outboundSchema,
} from "./fulfillmenttimeframe.js";

export type Fulfillment = {
  method?: FulfillmentMethod | undefined;
  timeframe?: FulfillmentTimeframe | undefined;
};

/** @internal */
export const Fulfillment$inboundSchema: z.ZodType<
  Fulfillment,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: FulfillmentMethod$inboundSchema.optional(),
  timeframe: FulfillmentTimeframe$inboundSchema.optional(),
});

/** @internal */
export type Fulfillment$Outbound = {
  method?: string | undefined;
  timeframe?: string | undefined;
};

/** @internal */
export const Fulfillment$outboundSchema: z.ZodType<
  Fulfillment$Outbound,
  z.ZodTypeDef,
  Fulfillment
> = z.object({
  method: FulfillmentMethod$outboundSchema.optional(),
  timeframe: FulfillmentTimeframe$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fulfillment$ {
  /** @deprecated use `Fulfillment$inboundSchema` instead. */
  export const inboundSchema = Fulfillment$inboundSchema;
  /** @deprecated use `Fulfillment$outboundSchema` instead. */
  export const outboundSchema = Fulfillment$outboundSchema;
  /** @deprecated use `Fulfillment$Outbound` instead. */
  export type Outbound = Fulfillment$Outbound;
}

export function fulfillmentToJSON(fulfillment: Fulfillment): string {
  return JSON.stringify(Fulfillment$outboundSchema.parse(fulfillment));
}

export function fulfillmentFromJSON(
  jsonString: string,
): SafeParseResult<Fulfillment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fulfillment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fulfillment' from JSON`,
  );
}
