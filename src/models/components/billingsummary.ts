/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AmountDecimal,
  AmountDecimal$inboundSchema,
  AmountDecimal$Outbound,
  AmountDecimal$outboundSchema,
} from "./amountdecimal.js";
import {
  BillingSummaryDetails,
  BillingSummaryDetails$inboundSchema,
  BillingSummaryDetails$Outbound,
  BillingSummaryDetails$outboundSchema,
} from "./billingsummarydetails.js";
import {
  BillingSummaryInterchange,
  BillingSummaryInterchange$inboundSchema,
  BillingSummaryInterchange$Outbound,
  BillingSummaryInterchange$outboundSchema,
} from "./billingsummaryinterchange.js";

/**
 * A summary of card acquiring volume and fees.
 */
export type CardAcquiring = {
  /**
   * The total transaction volume amount.
   */
  volumeAmount?: AmountDecimal | undefined;
  /**
   * The total number of transactions.
   */
  volumeCount?: number | undefined;
  /**
   * The total fee amount.
   */
  feeAmount?: AmountDecimal | undefined;
  /**
   * A summary of interchange fees by card brand.
   */
  interchangeFees?: BillingSummaryInterchange | undefined;
};

/**
 * A summary of all fees included in a statement.
 */
export type BillingSummary = {
  /**
   * A summary of card acquiring volume and fees.
   */
  cardAcquiring?: CardAcquiring | undefined;
  /**
   * A summary of ACH volume and fees.
   */
  ach?: BillingSummaryDetails | undefined;
  /**
   * A summary of instant payment volume and fees.
   */
  instantPayments?: BillingSummaryDetails | undefined;
  /**
   * The total amount of platform fees.
   */
  platformFees?: AmountDecimal | undefined;
  /**
   * The total amount of adjustment fees.
   */
  adjustmentFees?: AmountDecimal | undefined;
  /**
   * The total amount of other fees.
   */
  otherFees?: AmountDecimal | undefined;
  /**
   * The total amount of all fees.
   */
  total?: AmountDecimal | undefined;
};

/** @internal */
export const CardAcquiring$inboundSchema: z.ZodType<
  CardAcquiring,
  z.ZodTypeDef,
  unknown
> = z.object({
  volumeAmount: AmountDecimal$inboundSchema.optional(),
  volumeCount: z.number().int().optional(),
  feeAmount: AmountDecimal$inboundSchema.optional(),
  interchangeFees: BillingSummaryInterchange$inboundSchema.optional(),
});

/** @internal */
export type CardAcquiring$Outbound = {
  volumeAmount?: AmountDecimal$Outbound | undefined;
  volumeCount?: number | undefined;
  feeAmount?: AmountDecimal$Outbound | undefined;
  interchangeFees?: BillingSummaryInterchange$Outbound | undefined;
};

/** @internal */
export const CardAcquiring$outboundSchema: z.ZodType<
  CardAcquiring$Outbound,
  z.ZodTypeDef,
  CardAcquiring
> = z.object({
  volumeAmount: AmountDecimal$outboundSchema.optional(),
  volumeCount: z.number().int().optional(),
  feeAmount: AmountDecimal$outboundSchema.optional(),
  interchangeFees: BillingSummaryInterchange$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAcquiring$ {
  /** @deprecated use `CardAcquiring$inboundSchema` instead. */
  export const inboundSchema = CardAcquiring$inboundSchema;
  /** @deprecated use `CardAcquiring$outboundSchema` instead. */
  export const outboundSchema = CardAcquiring$outboundSchema;
  /** @deprecated use `CardAcquiring$Outbound` instead. */
  export type Outbound = CardAcquiring$Outbound;
}

export function cardAcquiringToJSON(cardAcquiring: CardAcquiring): string {
  return JSON.stringify(CardAcquiring$outboundSchema.parse(cardAcquiring));
}

export function cardAcquiringFromJSON(
  jsonString: string,
): SafeParseResult<CardAcquiring, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAcquiring$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAcquiring' from JSON`,
  );
}

/** @internal */
export const BillingSummary$inboundSchema: z.ZodType<
  BillingSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  cardAcquiring: z.lazy(() => CardAcquiring$inboundSchema).optional(),
  ach: BillingSummaryDetails$inboundSchema.optional(),
  instantPayments: BillingSummaryDetails$inboundSchema.optional(),
  platformFees: AmountDecimal$inboundSchema.optional(),
  adjustmentFees: AmountDecimal$inboundSchema.optional(),
  otherFees: AmountDecimal$inboundSchema.optional(),
  total: AmountDecimal$inboundSchema.optional(),
});

/** @internal */
export type BillingSummary$Outbound = {
  cardAcquiring?: CardAcquiring$Outbound | undefined;
  ach?: BillingSummaryDetails$Outbound | undefined;
  instantPayments?: BillingSummaryDetails$Outbound | undefined;
  platformFees?: AmountDecimal$Outbound | undefined;
  adjustmentFees?: AmountDecimal$Outbound | undefined;
  otherFees?: AmountDecimal$Outbound | undefined;
  total?: AmountDecimal$Outbound | undefined;
};

/** @internal */
export const BillingSummary$outboundSchema: z.ZodType<
  BillingSummary$Outbound,
  z.ZodTypeDef,
  BillingSummary
> = z.object({
  cardAcquiring: z.lazy(() => CardAcquiring$outboundSchema).optional(),
  ach: BillingSummaryDetails$outboundSchema.optional(),
  instantPayments: BillingSummaryDetails$outboundSchema.optional(),
  platformFees: AmountDecimal$outboundSchema.optional(),
  adjustmentFees: AmountDecimal$outboundSchema.optional(),
  otherFees: AmountDecimal$outboundSchema.optional(),
  total: AmountDecimal$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingSummary$ {
  /** @deprecated use `BillingSummary$inboundSchema` instead. */
  export const inboundSchema = BillingSummary$inboundSchema;
  /** @deprecated use `BillingSummary$outboundSchema` instead. */
  export const outboundSchema = BillingSummary$outboundSchema;
  /** @deprecated use `BillingSummary$Outbound` instead. */
  export type Outbound = BillingSummary$Outbound;
}

export function billingSummaryToJSON(billingSummary: BillingSummary): string {
  return JSON.stringify(BillingSummary$outboundSchema.parse(billingSummary));
}

export function billingSummaryFromJSON(
  jsonString: string,
): SafeParseResult<BillingSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingSummary' from JSON`,
  );
}
