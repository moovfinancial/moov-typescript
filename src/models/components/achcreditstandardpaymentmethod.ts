/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentMethodsBankAccount,
  PaymentMethodsBankAccount$inboundSchema,
  PaymentMethodsBankAccount$Outbound,
  PaymentMethodsBankAccount$outboundSchema,
} from "./paymentmethodsbankaccount.js";

export const AchCreditStandardPaymentMethodPaymentMethodType = {
  AchCreditStandard: "ach-credit-standard",
} as const;
export type AchCreditStandardPaymentMethodPaymentMethodType = ClosedEnum<
  typeof AchCreditStandardPaymentMethodPaymentMethodType
>;

export type AchCreditStandardPaymentMethod = {
  /**
   * ID of the payment method.
   */
  paymentMethodID: string;
  paymentMethodType: AchCreditStandardPaymentMethodPaymentMethodType;
  /**
   * A bank account as contained within a payment method.
   */
  bankAccount: PaymentMethodsBankAccount;
};

/** @internal */
export const AchCreditStandardPaymentMethodPaymentMethodType$inboundSchema:
  z.ZodNativeEnum<typeof AchCreditStandardPaymentMethodPaymentMethodType> = z
    .nativeEnum(AchCreditStandardPaymentMethodPaymentMethodType);

/** @internal */
export const AchCreditStandardPaymentMethodPaymentMethodType$outboundSchema:
  z.ZodNativeEnum<typeof AchCreditStandardPaymentMethodPaymentMethodType> =
    AchCreditStandardPaymentMethodPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AchCreditStandardPaymentMethodPaymentMethodType$ {
  /** @deprecated use `AchCreditStandardPaymentMethodPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema =
    AchCreditStandardPaymentMethodPaymentMethodType$inboundSchema;
  /** @deprecated use `AchCreditStandardPaymentMethodPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema =
    AchCreditStandardPaymentMethodPaymentMethodType$outboundSchema;
}

/** @internal */
export const AchCreditStandardPaymentMethod$inboundSchema: z.ZodType<
  AchCreditStandardPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType:
    AchCreditStandardPaymentMethodPaymentMethodType$inboundSchema,
  bankAccount: PaymentMethodsBankAccount$inboundSchema,
});

/** @internal */
export type AchCreditStandardPaymentMethod$Outbound = {
  paymentMethodID: string;
  paymentMethodType: string;
  bankAccount: PaymentMethodsBankAccount$Outbound;
};

/** @internal */
export const AchCreditStandardPaymentMethod$outboundSchema: z.ZodType<
  AchCreditStandardPaymentMethod$Outbound,
  z.ZodTypeDef,
  AchCreditStandardPaymentMethod
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType:
    AchCreditStandardPaymentMethodPaymentMethodType$outboundSchema,
  bankAccount: PaymentMethodsBankAccount$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AchCreditStandardPaymentMethod$ {
  /** @deprecated use `AchCreditStandardPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = AchCreditStandardPaymentMethod$inboundSchema;
  /** @deprecated use `AchCreditStandardPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = AchCreditStandardPaymentMethod$outboundSchema;
  /** @deprecated use `AchCreditStandardPaymentMethod$Outbound` instead. */
  export type Outbound = AchCreditStandardPaymentMethod$Outbound;
}

export function achCreditStandardPaymentMethodToJSON(
  achCreditStandardPaymentMethod: AchCreditStandardPaymentMethod,
): string {
  return JSON.stringify(
    AchCreditStandardPaymentMethod$outboundSchema.parse(
      achCreditStandardPaymentMethod,
    ),
  );
}

export function achCreditStandardPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<AchCreditStandardPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AchCreditStandardPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AchCreditStandardPaymentMethod' from JSON`,
  );
}
