/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SendFundsAch,
  SendFundsAch$inboundSchema,
  SendFundsAch$Outbound,
  SendFundsAch$outboundSchema,
} from "./sendfundsach.js";
import {
  SendFundsInstantBank,
  SendFundsInstantBank$inboundSchema,
  SendFundsInstantBank$Outbound,
  SendFundsInstantBank$outboundSchema,
} from "./sendfundsinstantbank.js";
import {
  SendFundsPushToCard,
  SendFundsPushToCard$inboundSchema,
  SendFundsPushToCard$Outbound,
  SendFundsPushToCard$outboundSchema,
} from "./sendfundspushtocard.js";
import {
  SendFundsRtp,
  SendFundsRtp$inboundSchema,
  SendFundsRtp$Outbound,
  SendFundsRtp$outboundSchema,
} from "./sendfundsrtp.js";

export type SendFunds = {
  ach?: SendFundsAch | undefined;
  pushToCard?: SendFundsPushToCard | undefined;
  rtp?: SendFundsRtp | undefined;
  instantBank?: SendFundsInstantBank | undefined;
};

/** @internal */
export const SendFunds$inboundSchema: z.ZodType<
  SendFunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  ach: SendFundsAch$inboundSchema.optional(),
  pushToCard: SendFundsPushToCard$inboundSchema.optional(),
  rtp: SendFundsRtp$inboundSchema.optional(),
  instantBank: SendFundsInstantBank$inboundSchema.optional(),
});

/** @internal */
export type SendFunds$Outbound = {
  ach?: SendFundsAch$Outbound | undefined;
  pushToCard?: SendFundsPushToCard$Outbound | undefined;
  rtp?: SendFundsRtp$Outbound | undefined;
  instantBank?: SendFundsInstantBank$Outbound | undefined;
};

/** @internal */
export const SendFunds$outboundSchema: z.ZodType<
  SendFunds$Outbound,
  z.ZodTypeDef,
  SendFunds
> = z.object({
  ach: SendFundsAch$outboundSchema.optional(),
  pushToCard: SendFundsPushToCard$outboundSchema.optional(),
  rtp: SendFundsRtp$outboundSchema.optional(),
  instantBank: SendFundsInstantBank$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendFunds$ {
  /** @deprecated use `SendFunds$inboundSchema` instead. */
  export const inboundSchema = SendFunds$inboundSchema;
  /** @deprecated use `SendFunds$outboundSchema` instead. */
  export const outboundSchema = SendFunds$outboundSchema;
  /** @deprecated use `SendFunds$Outbound` instead. */
  export type Outbound = SendFunds$Outbound;
}

export function sendFundsToJSON(sendFunds: SendFunds): string {
  return JSON.stringify(SendFunds$outboundSchema.parse(sendFunds));
}

export function sendFundsFromJSON(
  jsonString: string,
): SafeParseResult<SendFunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendFunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendFunds' from JSON`,
  );
}
