/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An industry's MCC/SIC/NAICS codes, along with descriptive title.
 */
export type EnrichedIndustry = {
  title: string;
  /**
   * North American Industry Classification System
   */
  naics: string;
  /**
   * Standard Industrial Classification
   */
  sic: string;
  /**
   * Merchant Category Code
   */
  mcc: string;
};

/** @internal */
export const EnrichedIndustry$inboundSchema: z.ZodType<
  EnrichedIndustry,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  naics: z.string(),
  sic: z.string(),
  mcc: z.string(),
});

/** @internal */
export type EnrichedIndustry$Outbound = {
  title: string;
  naics: string;
  sic: string;
  mcc: string;
};

/** @internal */
export const EnrichedIndustry$outboundSchema: z.ZodType<
  EnrichedIndustry$Outbound,
  z.ZodTypeDef,
  EnrichedIndustry
> = z.object({
  title: z.string(),
  naics: z.string(),
  sic: z.string(),
  mcc: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrichedIndustry$ {
  /** @deprecated use `EnrichedIndustry$inboundSchema` instead. */
  export const inboundSchema = EnrichedIndustry$inboundSchema;
  /** @deprecated use `EnrichedIndustry$outboundSchema` instead. */
  export const outboundSchema = EnrichedIndustry$outboundSchema;
  /** @deprecated use `EnrichedIndustry$Outbound` instead. */
  export type Outbound = EnrichedIndustry$Outbound;
}

export function enrichedIndustryToJSON(
  enrichedIndustry: EnrichedIndustry,
): string {
  return JSON.stringify(
    EnrichedIndustry$outboundSchema.parse(enrichedIndustry),
  );
}

export function enrichedIndustryFromJSON(
  jsonString: string,
): SafeParseResult<EnrichedIndustry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnrichedIndustry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnrichedIndustry' from JSON`,
  );
}
