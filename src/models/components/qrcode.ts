/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type QRCode = {
  /**
   * A base64-encoded PNG image of the QR code.
   */
  qrCode: string;
};

/** @internal */
export const QRCode$inboundSchema: z.ZodType<QRCode, z.ZodTypeDef, unknown> = z
  .object({
    qrCode: z.string(),
  });

/** @internal */
export type QRCode$Outbound = {
  qrCode: string;
};

/** @internal */
export const QRCode$outboundSchema: z.ZodType<
  QRCode$Outbound,
  z.ZodTypeDef,
  QRCode
> = z.object({
  qrCode: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QRCode$ {
  /** @deprecated use `QRCode$inboundSchema` instead. */
  export const inboundSchema = QRCode$inboundSchema;
  /** @deprecated use `QRCode$outboundSchema` instead. */
  export const outboundSchema = QRCode$outboundSchema;
  /** @deprecated use `QRCode$Outbound` instead. */
  export type Outbound = QRCode$Outbound;
}

export function qrCodeToJSON(qrCode: QRCode): string {
  return JSON.stringify(QRCode$outboundSchema.parse(qrCode));
}

export function qrCodeFromJSON(
  jsonString: string,
): SafeParseResult<QRCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QRCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QRCode' from JSON`,
  );
}
