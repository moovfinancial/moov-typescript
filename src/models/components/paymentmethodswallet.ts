/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaymentMethodsWallet = {
  walletID: string;
};

/** @internal */
export const PaymentMethodsWallet$inboundSchema: z.ZodType<
  PaymentMethodsWallet,
  z.ZodTypeDef,
  unknown
> = z.object({
  walletID: z.string(),
});

/** @internal */
export type PaymentMethodsWallet$Outbound = {
  walletID: string;
};

/** @internal */
export const PaymentMethodsWallet$outboundSchema: z.ZodType<
  PaymentMethodsWallet$Outbound,
  z.ZodTypeDef,
  PaymentMethodsWallet
> = z.object({
  walletID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodsWallet$ {
  /** @deprecated use `PaymentMethodsWallet$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodsWallet$inboundSchema;
  /** @deprecated use `PaymentMethodsWallet$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodsWallet$outboundSchema;
  /** @deprecated use `PaymentMethodsWallet$Outbound` instead. */
  export type Outbound = PaymentMethodsWallet$Outbound;
}

export function paymentMethodsWalletToJSON(
  paymentMethodsWallet: PaymentMethodsWallet,
): string {
  return JSON.stringify(
    PaymentMethodsWallet$outboundSchema.parse(paymentMethodsWallet),
  );
}

export function paymentMethodsWalletFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodsWallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodsWallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodsWallet' from JSON`,
  );
}
