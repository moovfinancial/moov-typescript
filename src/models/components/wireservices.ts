/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WireServices = {
  /**
   * The institution's capability to process standard Fedwire funds transfers.
   */
  fundsTransferStatus: boolean;
  /**
   * The institution's capability for settlement-only transfers.
   */
  fundsSettlementOnlyStatus: boolean;
  /**
   * The institution's capability to handle transfers of securities.
   */
  bookEntrySecuritiesTransferStatus: boolean;
};

/** @internal */
export const WireServices$inboundSchema: z.ZodType<
  WireServices,
  z.ZodTypeDef,
  unknown
> = z.object({
  fundsTransferStatus: z.boolean(),
  fundsSettlementOnlyStatus: z.boolean(),
  bookEntrySecuritiesTransferStatus: z.boolean(),
});

/** @internal */
export type WireServices$Outbound = {
  fundsTransferStatus: boolean;
  fundsSettlementOnlyStatus: boolean;
  bookEntrySecuritiesTransferStatus: boolean;
};

/** @internal */
export const WireServices$outboundSchema: z.ZodType<
  WireServices$Outbound,
  z.ZodTypeDef,
  WireServices
> = z.object({
  fundsTransferStatus: z.boolean(),
  fundsSettlementOnlyStatus: z.boolean(),
  bookEntrySecuritiesTransferStatus: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WireServices$ {
  /** @deprecated use `WireServices$inboundSchema` instead. */
  export const inboundSchema = WireServices$inboundSchema;
  /** @deprecated use `WireServices$outboundSchema` instead. */
  export const outboundSchema = WireServices$outboundSchema;
  /** @deprecated use `WireServices$Outbound` instead. */
  export type Outbound = WireServices$Outbound;
}

export function wireServicesToJSON(wireServices: WireServices): string {
  return JSON.stringify(WireServices$outboundSchema.parse(wireServices));
}

export function wireServicesFromJSON(
  jsonString: string,
): SafeParseResult<WireServices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WireServices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WireServices' from JSON`,
  );
}
