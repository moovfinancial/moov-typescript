/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvidenceType,
  EvidenceType$inboundSchema,
  EvidenceType$outboundSchema,
} from "./evidencetype.js";

export type DisputeEvidenceMetadata = {
  evidenceID: string;
  disputeID: string;
  mimeType: string;
  filename: string;
  size: number;
  evidenceType: EvidenceType;
  /**
   * The text submited as evidence.
   */
  text: string;
  createdOn: Date;
  updatedOn: Date;
};

/** @internal */
export const DisputeEvidenceMetadata$inboundSchema: z.ZodType<
  DisputeEvidenceMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  mimeType: z.string(),
  filename: z.string(),
  size: z.number().int(),
  evidenceType: EvidenceType$inboundSchema,
  text: z.string(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type DisputeEvidenceMetadata$Outbound = {
  evidenceID: string;
  disputeID: string;
  mimeType: string;
  filename: string;
  size: number;
  evidenceType: string;
  text: string;
  createdOn: string;
  updatedOn: string;
};

/** @internal */
export const DisputeEvidenceMetadata$outboundSchema: z.ZodType<
  DisputeEvidenceMetadata$Outbound,
  z.ZodTypeDef,
  DisputeEvidenceMetadata
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  mimeType: z.string(),
  filename: z.string(),
  size: z.number().int(),
  evidenceType: EvidenceType$outboundSchema,
  text: z.string(),
  createdOn: z.date().transform(v => v.toISOString()),
  updatedOn: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisputeEvidenceMetadata$ {
  /** @deprecated use `DisputeEvidenceMetadata$inboundSchema` instead. */
  export const inboundSchema = DisputeEvidenceMetadata$inboundSchema;
  /** @deprecated use `DisputeEvidenceMetadata$outboundSchema` instead. */
  export const outboundSchema = DisputeEvidenceMetadata$outboundSchema;
  /** @deprecated use `DisputeEvidenceMetadata$Outbound` instead. */
  export type Outbound = DisputeEvidenceMetadata$Outbound;
}

export function disputeEvidenceMetadataToJSON(
  disputeEvidenceMetadata: DisputeEvidenceMetadata,
): string {
  return JSON.stringify(
    DisputeEvidenceMetadata$outboundSchema.parse(disputeEvidenceMetadata),
  );
}

export function disputeEvidenceMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DisputeEvidenceMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisputeEvidenceMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisputeEvidenceMetadata' from JSON`,
  );
}
