/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CardPaymentDetailsError = {
  dynamicDescriptor?: string | undefined;
};

/** @internal */
export const CardPaymentDetailsError$inboundSchema: z.ZodType<
  CardPaymentDetailsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  dynamicDescriptor: z.string().optional(),
});

/** @internal */
export type CardPaymentDetailsError$Outbound = {
  dynamicDescriptor?: string | undefined;
};

/** @internal */
export const CardPaymentDetailsError$outboundSchema: z.ZodType<
  CardPaymentDetailsError$Outbound,
  z.ZodTypeDef,
  CardPaymentDetailsError
> = z.object({
  dynamicDescriptor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardPaymentDetailsError$ {
  /** @deprecated use `CardPaymentDetailsError$inboundSchema` instead. */
  export const inboundSchema = CardPaymentDetailsError$inboundSchema;
  /** @deprecated use `CardPaymentDetailsError$outboundSchema` instead. */
  export const outboundSchema = CardPaymentDetailsError$outboundSchema;
  /** @deprecated use `CardPaymentDetailsError$Outbound` instead. */
  export type Outbound = CardPaymentDetailsError$Outbound;
}

export function cardPaymentDetailsErrorToJSON(
  cardPaymentDetailsError: CardPaymentDetailsError,
): string {
  return JSON.stringify(
    CardPaymentDetailsError$outboundSchema.parse(cardPaymentDetailsError),
  );
}

export function cardPaymentDetailsErrorFromJSON(
  jsonString: string,
): SafeParseResult<CardPaymentDetailsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardPaymentDetailsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardPaymentDetailsError' from JSON`,
  );
}
