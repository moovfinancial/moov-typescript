/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentMethodType,
  PaymentMethodType$inboundSchema,
  PaymentMethodType$outboundSchema,
} from "./paymentmethodtype.js";

export type BasicPaymentMethod = {
  /**
   * ID of the payment method.
   */
  paymentMethodID: string;
  /**
   * The payment method type that represents a payment rail and directionality
   */
  paymentMethodType: PaymentMethodType;
};

/** @internal */
export const BasicPaymentMethod$inboundSchema: z.ZodType<
  BasicPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType: PaymentMethodType$inboundSchema,
});

/** @internal */
export type BasicPaymentMethod$Outbound = {
  paymentMethodID: string;
  paymentMethodType: string;
};

/** @internal */
export const BasicPaymentMethod$outboundSchema: z.ZodType<
  BasicPaymentMethod$Outbound,
  z.ZodTypeDef,
  BasicPaymentMethod
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType: PaymentMethodType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicPaymentMethod$ {
  /** @deprecated use `BasicPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = BasicPaymentMethod$inboundSchema;
  /** @deprecated use `BasicPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = BasicPaymentMethod$outboundSchema;
  /** @deprecated use `BasicPaymentMethod$Outbound` instead. */
  export type Outbound = BasicPaymentMethod$Outbound;
}

export function basicPaymentMethodToJSON(
  basicPaymentMethod: BasicPaymentMethod,
): string {
  return JSON.stringify(
    BasicPaymentMethod$outboundSchema.parse(basicPaymentMethod),
  );
}

export function basicPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<BasicPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasicPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasicPaymentMethod' from JSON`,
  );
}
