/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ApplicationScope,
  ApplicationScope$inboundSchema,
  ApplicationScope$outboundSchema,
} from "./applicationscope.js";
import {
  CapabilityID,
  CapabilityID$inboundSchema,
  CapabilityID$outboundSchema,
} from "./capabilityid.js";
import {
  CreateAccount,
  CreateAccount$inboundSchema,
  CreateAccount$Outbound,
  CreateAccount$outboundSchema,
} from "./createaccount.js";

/**
 * Request to create an onboarding invite.
 */
export type OnboardingInviteRequest = {
  /**
   * Optional URL to redirect the user to after they complete the onboarding process.
   */
  returnURL?: string | undefined;
  /**
   * Optional URL to your organization's terms of service.
   */
  termsOfServiceURL?: string | undefined;
  /**
   *   List of [scopes](https://docs.moov.io/api/authentication/scopes/) you request to use on this
   *
   * @remarks
   *   account. These values are used to determine what can be done with the account onboarded.
   */
  scopes: Array<ApplicationScope>;
  /**
   *   List of [capabilities](https://docs.moov.io/guides/accounts/capabilities/) you intend to request for this
   *
   * @remarks
   *   account. These values are used to determine what information to collect from the user during onboarding.
   */
  capabilities: Array<CapabilityID>;
  /**
   * List of fee plan codes to assign the account created by the invitee.
   */
  feePlanCodes: Array<string>;
  prefill?: CreateAccount | undefined;
};

/** @internal */
export const OnboardingInviteRequest$inboundSchema: z.ZodType<
  OnboardingInviteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  returnURL: z.string().optional(),
  termsOfServiceURL: z.string().optional(),
  scopes: z.array(ApplicationScope$inboundSchema),
  capabilities: z.array(CapabilityID$inboundSchema),
  feePlanCodes: z.array(z.string()),
  prefill: CreateAccount$inboundSchema.optional(),
});

/** @internal */
export type OnboardingInviteRequest$Outbound = {
  returnURL?: string | undefined;
  termsOfServiceURL?: string | undefined;
  scopes: Array<string>;
  capabilities: Array<string>;
  feePlanCodes: Array<string>;
  prefill?: CreateAccount$Outbound | undefined;
};

/** @internal */
export const OnboardingInviteRequest$outboundSchema: z.ZodType<
  OnboardingInviteRequest$Outbound,
  z.ZodTypeDef,
  OnboardingInviteRequest
> = z.object({
  returnURL: z.string().optional(),
  termsOfServiceURL: z.string().optional(),
  scopes: z.array(ApplicationScope$outboundSchema),
  capabilities: z.array(CapabilityID$outboundSchema),
  feePlanCodes: z.array(z.string()),
  prefill: CreateAccount$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingInviteRequest$ {
  /** @deprecated use `OnboardingInviteRequest$inboundSchema` instead. */
  export const inboundSchema = OnboardingInviteRequest$inboundSchema;
  /** @deprecated use `OnboardingInviteRequest$outboundSchema` instead. */
  export const outboundSchema = OnboardingInviteRequest$outboundSchema;
  /** @deprecated use `OnboardingInviteRequest$Outbound` instead. */
  export type Outbound = OnboardingInviteRequest$Outbound;
}

export function onboardingInviteRequestToJSON(
  onboardingInviteRequest: OnboardingInviteRequest,
): string {
  return JSON.stringify(
    OnboardingInviteRequest$outboundSchema.parse(onboardingInviteRequest),
  );
}

export function onboardingInviteRequestFromJSON(
  jsonString: string,
): SafeParseResult<OnboardingInviteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnboardingInviteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnboardingInviteRequest' from JSON`,
  );
}
