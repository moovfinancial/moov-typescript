/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DisputePhase,
  DisputePhase$inboundSchema,
  DisputePhase$outboundSchema,
} from "./disputephase.js";
import {
  DisputeStatus,
  DisputeStatus$inboundSchema,
  DisputeStatus$outboundSchema,
} from "./disputestatus.js";

export type WebhookDataDisputeUpdated = {
  accountID: string;
  transferID: string;
  transactionID: string;
  disputeID: string;
  /**
   * The status of a particular dispute.
   *
   * @remarks
   *
   * Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
   */
  status: DisputeStatus;
  /**
   * The phase of a dispute within the dispute lifecycle.
   */
  phase: DisputePhase;
};

/** @internal */
export const WebhookDataDisputeUpdated$inboundSchema: z.ZodType<
  WebhookDataDisputeUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  transactionID: z.string(),
  disputeID: z.string(),
  status: DisputeStatus$inboundSchema,
  phase: DisputePhase$inboundSchema,
});

/** @internal */
export type WebhookDataDisputeUpdated$Outbound = {
  accountID: string;
  transferID: string;
  transactionID: string;
  disputeID: string;
  status: string;
  phase: string;
};

/** @internal */
export const WebhookDataDisputeUpdated$outboundSchema: z.ZodType<
  WebhookDataDisputeUpdated$Outbound,
  z.ZodTypeDef,
  WebhookDataDisputeUpdated
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  transactionID: z.string(),
  disputeID: z.string(),
  status: DisputeStatus$outboundSchema,
  phase: DisputePhase$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataDisputeUpdated$ {
  /** @deprecated use `WebhookDataDisputeUpdated$inboundSchema` instead. */
  export const inboundSchema = WebhookDataDisputeUpdated$inboundSchema;
  /** @deprecated use `WebhookDataDisputeUpdated$outboundSchema` instead. */
  export const outboundSchema = WebhookDataDisputeUpdated$outboundSchema;
  /** @deprecated use `WebhookDataDisputeUpdated$Outbound` instead. */
  export type Outbound = WebhookDataDisputeUpdated$Outbound;
}

export function webhookDataDisputeUpdatedToJSON(
  webhookDataDisputeUpdated: WebhookDataDisputeUpdated,
): string {
  return JSON.stringify(
    WebhookDataDisputeUpdated$outboundSchema.parse(webhookDataDisputeUpdated),
  );
}

export function webhookDataDisputeUpdatedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataDisputeUpdated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataDisputeUpdated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataDisputeUpdated' from JSON`,
  );
}
