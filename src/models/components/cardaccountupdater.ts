/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardUpdateReason,
  CardUpdateReason$inboundSchema,
  CardUpdateReason$outboundSchema,
} from "./cardupdatereason.js";

/**
 * The results of the most recent card update request.
 */
export type CardAccountUpdater = {
  updatedOn?: Date | undefined;
  /**
   * The results of the card update request.
   */
  updateType?: CardUpdateReason | undefined;
};

/** @internal */
export const CardAccountUpdater$inboundSchema: z.ZodType<
  CardAccountUpdater,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updateType: CardUpdateReason$inboundSchema.optional(),
});

/** @internal */
export type CardAccountUpdater$Outbound = {
  updatedOn?: string | undefined;
  updateType?: string | undefined;
};

/** @internal */
export const CardAccountUpdater$outboundSchema: z.ZodType<
  CardAccountUpdater$Outbound,
  z.ZodTypeDef,
  CardAccountUpdater
> = z.object({
  updatedOn: z.date().transform(v => v.toISOString()).optional(),
  updateType: CardUpdateReason$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAccountUpdater$ {
  /** @deprecated use `CardAccountUpdater$inboundSchema` instead. */
  export const inboundSchema = CardAccountUpdater$inboundSchema;
  /** @deprecated use `CardAccountUpdater$outboundSchema` instead. */
  export const outboundSchema = CardAccountUpdater$outboundSchema;
  /** @deprecated use `CardAccountUpdater$Outbound` instead. */
  export type Outbound = CardAccountUpdater$Outbound;
}

export function cardAccountUpdaterToJSON(
  cardAccountUpdater: CardAccountUpdater,
): string {
  return JSON.stringify(
    CardAccountUpdater$outboundSchema.parse(cardAccountUpdater),
  );
}

export function cardAccountUpdaterFromJSON(
  jsonString: string,
): SafeParseResult<CardAccountUpdater, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAccountUpdater$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAccountUpdater' from JSON`,
  );
}
