/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CardAcceptanceMethodsError = {
  inPersonPercentage?: string | undefined;
  mailOrPhonePercentage?: string | undefined;
  onlinePercentage?: string | undefined;
};

/** @internal */
export const CardAcceptanceMethodsError$inboundSchema: z.ZodType<
  CardAcceptanceMethodsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  inPersonPercentage: z.string().optional(),
  mailOrPhonePercentage: z.string().optional(),
  onlinePercentage: z.string().optional(),
});

/** @internal */
export type CardAcceptanceMethodsError$Outbound = {
  inPersonPercentage?: string | undefined;
  mailOrPhonePercentage?: string | undefined;
  onlinePercentage?: string | undefined;
};

/** @internal */
export const CardAcceptanceMethodsError$outboundSchema: z.ZodType<
  CardAcceptanceMethodsError$Outbound,
  z.ZodTypeDef,
  CardAcceptanceMethodsError
> = z.object({
  inPersonPercentage: z.string().optional(),
  mailOrPhonePercentage: z.string().optional(),
  onlinePercentage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAcceptanceMethodsError$ {
  /** @deprecated use `CardAcceptanceMethodsError$inboundSchema` instead. */
  export const inboundSchema = CardAcceptanceMethodsError$inboundSchema;
  /** @deprecated use `CardAcceptanceMethodsError$outboundSchema` instead. */
  export const outboundSchema = CardAcceptanceMethodsError$outboundSchema;
  /** @deprecated use `CardAcceptanceMethodsError$Outbound` instead. */
  export type Outbound = CardAcceptanceMethodsError$Outbound;
}

export function cardAcceptanceMethodsErrorToJSON(
  cardAcceptanceMethodsError: CardAcceptanceMethodsError,
): string {
  return JSON.stringify(
    CardAcceptanceMethodsError$outboundSchema.parse(cardAcceptanceMethodsError),
  );
}

export function cardAcceptanceMethodsErrorFromJSON(
  jsonString: string,
): SafeParseResult<CardAcceptanceMethodsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAcceptanceMethodsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAcceptanceMethodsError' from JSON`,
  );
}
