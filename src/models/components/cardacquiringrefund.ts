/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  RefundCardDetails,
  RefundCardDetails$inboundSchema,
  RefundCardDetails$Outbound,
  RefundCardDetails$outboundSchema,
} from "./refundcarddetails.js";
import {
  RefundStatus,
  RefundStatus$inboundSchema,
  RefundStatus$outboundSchema,
} from "./refundstatus.js";

/**
 * Details of a card refund.
 */
export type CardAcquiringRefund = {
  /**
   * Identifier for the refund.
   */
  refundID: string;
  createdOn: Date;
  updatedOn: Date;
  status: RefundStatus;
  amount: Amount;
  cardDetails?: RefundCardDetails | undefined;
};

/** @internal */
export const CardAcquiringRefund$inboundSchema: z.ZodType<
  CardAcquiringRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  refundID: z.string(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  status: RefundStatus$inboundSchema,
  amount: Amount$inboundSchema,
  cardDetails: RefundCardDetails$inboundSchema.optional(),
});

/** @internal */
export type CardAcquiringRefund$Outbound = {
  refundID: string;
  createdOn: string;
  updatedOn: string;
  status: string;
  amount: Amount$Outbound;
  cardDetails?: RefundCardDetails$Outbound | undefined;
};

/** @internal */
export const CardAcquiringRefund$outboundSchema: z.ZodType<
  CardAcquiringRefund$Outbound,
  z.ZodTypeDef,
  CardAcquiringRefund
> = z.object({
  refundID: z.string(),
  createdOn: z.date().transform(v => v.toISOString()),
  updatedOn: z.date().transform(v => v.toISOString()),
  status: RefundStatus$outboundSchema,
  amount: Amount$outboundSchema,
  cardDetails: RefundCardDetails$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAcquiringRefund$ {
  /** @deprecated use `CardAcquiringRefund$inboundSchema` instead. */
  export const inboundSchema = CardAcquiringRefund$inboundSchema;
  /** @deprecated use `CardAcquiringRefund$outboundSchema` instead. */
  export const outboundSchema = CardAcquiringRefund$outboundSchema;
  /** @deprecated use `CardAcquiringRefund$Outbound` instead. */
  export type Outbound = CardAcquiringRefund$Outbound;
}

export function cardAcquiringRefundToJSON(
  cardAcquiringRefund: CardAcquiringRefund,
): string {
  return JSON.stringify(
    CardAcquiringRefund$outboundSchema.parse(cardAcquiringRefund),
  );
}

export function cardAcquiringRefundFromJSON(
  jsonString: string,
): SafeParseResult<CardAcquiringRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAcquiringRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAcquiringRefund' from JSON`,
  );
}
