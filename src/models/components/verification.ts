/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountVerificationStatus,
  AccountVerificationStatus$inboundSchema,
  AccountVerificationStatus$outboundSchema,
} from "./accountverificationstatus.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  VerificationStatus,
  VerificationStatus$inboundSchema,
  VerificationStatus$outboundSchema,
} from "./verificationstatus.js";
import {
  VerificationStatusDetail,
  VerificationStatusDetail$inboundSchema,
  VerificationStatusDetail$outboundSchema,
} from "./verificationstatusdetail.js";

/**
 * Describes identity verification status and relevant identity verification documents.
 */
export type Verification = {
  /**
   * Possible states an account verification can be in.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  verificationStatus?: AccountVerificationStatus | undefined;
  /**
   * Possible states an account verification can be in.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status: VerificationStatus;
  /**
   * Additional detail for a verification status.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  details?: VerificationStatusDetail | undefined;
  documents?: Array<Document> | undefined;
};

/** @internal */
export const Verification$inboundSchema: z.ZodType<
  Verification,
  z.ZodTypeDef,
  unknown
> = z.object({
  verificationStatus: AccountVerificationStatus$inboundSchema.optional(),
  status: VerificationStatus$inboundSchema,
  details: VerificationStatusDetail$inboundSchema.optional(),
  documents: z.array(Document$inboundSchema).optional(),
});

/** @internal */
export type Verification$Outbound = {
  verificationStatus?: string | undefined;
  status: string;
  details?: string | undefined;
  documents?: Array<Document$Outbound> | undefined;
};

/** @internal */
export const Verification$outboundSchema: z.ZodType<
  Verification$Outbound,
  z.ZodTypeDef,
  Verification
> = z.object({
  verificationStatus: AccountVerificationStatus$outboundSchema.optional(),
  status: VerificationStatus$outboundSchema,
  details: VerificationStatusDetail$outboundSchema.optional(),
  documents: z.array(Document$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verification$ {
  /** @deprecated use `Verification$inboundSchema` instead. */
  export const inboundSchema = Verification$inboundSchema;
  /** @deprecated use `Verification$outboundSchema` instead. */
  export const outboundSchema = Verification$outboundSchema;
  /** @deprecated use `Verification$Outbound` instead. */
  export type Outbound = Verification$Outbound;
}

export function verificationToJSON(verification: Verification): string {
  return JSON.stringify(Verification$outboundSchema.parse(verification));
}

export function verificationFromJSON(
  jsonString: string,
): SafeParseResult<Verification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Verification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Verification' from JSON`,
  );
}
