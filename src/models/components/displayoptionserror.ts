/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DisplayOptionsError = {
  title?: string | undefined;
  description?: string | undefined;
  callToAction?: string | undefined;
};

/** @internal */
export const DisplayOptionsError$inboundSchema: z.ZodType<
  DisplayOptionsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  callToAction: z.string().optional(),
});

/** @internal */
export type DisplayOptionsError$Outbound = {
  title?: string | undefined;
  description?: string | undefined;
  callToAction?: string | undefined;
};

/** @internal */
export const DisplayOptionsError$outboundSchema: z.ZodType<
  DisplayOptionsError$Outbound,
  z.ZodTypeDef,
  DisplayOptionsError
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  callToAction: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisplayOptionsError$ {
  /** @deprecated use `DisplayOptionsError$inboundSchema` instead. */
  export const inboundSchema = DisplayOptionsError$inboundSchema;
  /** @deprecated use `DisplayOptionsError$outboundSchema` instead. */
  export const outboundSchema = DisplayOptionsError$outboundSchema;
  /** @deprecated use `DisplayOptionsError$Outbound` instead. */
  export type Outbound = DisplayOptionsError$Outbound;
}

export function displayOptionsErrorToJSON(
  displayOptionsError: DisplayOptionsError,
): string {
  return JSON.stringify(
    DisplayOptionsError$outboundSchema.parse(displayOptionsError),
  );
}

export function displayOptionsErrorFromJSON(
  jsonString: string,
): SafeParseResult<DisplayOptionsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisplayOptionsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisplayOptionsError' from JSON`,
  );
}
