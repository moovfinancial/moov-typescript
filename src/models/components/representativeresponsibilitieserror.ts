/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RepresentativeResponsibilitiesError = {
  isController?: string | undefined;
  isOwner?: string | undefined;
  ownershipPercentage?: string | undefined;
  jobTitle?: string | undefined;
};

/** @internal */
export const RepresentativeResponsibilitiesError$inboundSchema: z.ZodType<
  RepresentativeResponsibilitiesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  isController: z.string().optional(),
  isOwner: z.string().optional(),
  ownershipPercentage: z.string().optional(),
  jobTitle: z.string().optional(),
});

/** @internal */
export type RepresentativeResponsibilitiesError$Outbound = {
  isController?: string | undefined;
  isOwner?: string | undefined;
  ownershipPercentage?: string | undefined;
  jobTitle?: string | undefined;
};

/** @internal */
export const RepresentativeResponsibilitiesError$outboundSchema: z.ZodType<
  RepresentativeResponsibilitiesError$Outbound,
  z.ZodTypeDef,
  RepresentativeResponsibilitiesError
> = z.object({
  isController: z.string().optional(),
  isOwner: z.string().optional(),
  ownershipPercentage: z.string().optional(),
  jobTitle: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepresentativeResponsibilitiesError$ {
  /** @deprecated use `RepresentativeResponsibilitiesError$inboundSchema` instead. */
  export const inboundSchema =
    RepresentativeResponsibilitiesError$inboundSchema;
  /** @deprecated use `RepresentativeResponsibilitiesError$outboundSchema` instead. */
  export const outboundSchema =
    RepresentativeResponsibilitiesError$outboundSchema;
  /** @deprecated use `RepresentativeResponsibilitiesError$Outbound` instead. */
  export type Outbound = RepresentativeResponsibilitiesError$Outbound;
}

export function representativeResponsibilitiesErrorToJSON(
  representativeResponsibilitiesError: RepresentativeResponsibilitiesError,
): string {
  return JSON.stringify(
    RepresentativeResponsibilitiesError$outboundSchema.parse(
      representativeResponsibilitiesError,
    ),
  );
}

export function representativeResponsibilitiesErrorFromJSON(
  jsonString: string,
): SafeParseResult<RepresentativeResponsibilitiesError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RepresentativeResponsibilitiesError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepresentativeResponsibilitiesError' from JSON`,
  );
}
