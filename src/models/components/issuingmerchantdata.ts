/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IssuingMerchantData = {
  /**
   * External identifier used to identify the merchant with the card brand.
   */
  networkID?: string | undefined;
  /**
   * Name of the merchant.
   */
  name?: string | undefined;
  /**
   * The merchant's location.
   */
  city?: string | undefined;
  /**
   * Two-letter country code.
   */
  country?: string | undefined;
  /**
   * The merchant's five-digit postal code.
   */
  postalCode?: string | undefined;
  /**
   * The merchant's two-letter state abbreviation.
   */
  state?: string | undefined;
  /**
   * The Merchant Category Code.
   */
  mcc?: string | undefined;
};

/** @internal */
export const IssuingMerchantData$inboundSchema: z.ZodType<
  IssuingMerchantData,
  z.ZodTypeDef,
  unknown
> = z.object({
  networkID: z.string().optional(),
  name: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  mcc: z.string().optional(),
});

/** @internal */
export type IssuingMerchantData$Outbound = {
  networkID?: string | undefined;
  name?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  postalCode?: string | undefined;
  state?: string | undefined;
  mcc?: string | undefined;
};

/** @internal */
export const IssuingMerchantData$outboundSchema: z.ZodType<
  IssuingMerchantData$Outbound,
  z.ZodTypeDef,
  IssuingMerchantData
> = z.object({
  networkID: z.string().optional(),
  name: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  mcc: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssuingMerchantData$ {
  /** @deprecated use `IssuingMerchantData$inboundSchema` instead. */
  export const inboundSchema = IssuingMerchantData$inboundSchema;
  /** @deprecated use `IssuingMerchantData$outboundSchema` instead. */
  export const outboundSchema = IssuingMerchantData$outboundSchema;
  /** @deprecated use `IssuingMerchantData$Outbound` instead. */
  export type Outbound = IssuingMerchantData$Outbound;
}

export function issuingMerchantDataToJSON(
  issuingMerchantData: IssuingMerchantData,
): string {
  return JSON.stringify(
    IssuingMerchantData$outboundSchema.parse(issuingMerchantData),
  );
}

export function issuingMerchantDataFromJSON(
  jsonString: string,
): SafeParseResult<IssuingMerchantData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IssuingMerchantData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IssuingMerchantData' from JSON`,
  );
}
