/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillableFee,
  BillableFee$inboundSchema,
  BillableFee$Outbound,
  BillableFee$outboundSchema,
} from "./billablefee.js";
import {
  CardAcquringModel,
  CardAcquringModel$inboundSchema,
  CardAcquringModel$outboundSchema,
} from "./cardacquringmodel.js";
import {
  FeePlanAgreementStatus,
  FeePlanAgreementStatus$inboundSchema,
  FeePlanAgreementStatus$outboundSchema,
} from "./feeplanagreementstatus.js";

export type FeePlanAgreement = {
  aggreementID: string;
  planID: string;
  accountID?: string | undefined;
  acceptedOn: Date;
  status: FeePlanAgreementStatus;
  /**
   * Specifies the card processing pricing model
   */
  cardAcquringModel: CardAcquringModel;
  billableFees: Array<BillableFee>;
};

/** @internal */
export const FeePlanAgreement$inboundSchema: z.ZodType<
  FeePlanAgreement,
  z.ZodTypeDef,
  unknown
> = z.object({
  aggreementID: z.string(),
  planID: z.string(),
  accountID: z.string().optional(),
  acceptedOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  status: FeePlanAgreementStatus$inboundSchema,
  cardAcquringModel: CardAcquringModel$inboundSchema,
  billableFees: z.array(BillableFee$inboundSchema),
});

/** @internal */
export type FeePlanAgreement$Outbound = {
  aggreementID: string;
  planID: string;
  accountID?: string | undefined;
  acceptedOn: string;
  status: string;
  cardAcquringModel: string;
  billableFees: Array<BillableFee$Outbound>;
};

/** @internal */
export const FeePlanAgreement$outboundSchema: z.ZodType<
  FeePlanAgreement$Outbound,
  z.ZodTypeDef,
  FeePlanAgreement
> = z.object({
  aggreementID: z.string(),
  planID: z.string(),
  accountID: z.string().optional(),
  acceptedOn: z.date().transform(v => v.toISOString()),
  status: FeePlanAgreementStatus$outboundSchema,
  cardAcquringModel: CardAcquringModel$outboundSchema,
  billableFees: z.array(BillableFee$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePlanAgreement$ {
  /** @deprecated use `FeePlanAgreement$inboundSchema` instead. */
  export const inboundSchema = FeePlanAgreement$inboundSchema;
  /** @deprecated use `FeePlanAgreement$outboundSchema` instead. */
  export const outboundSchema = FeePlanAgreement$outboundSchema;
  /** @deprecated use `FeePlanAgreement$Outbound` instead. */
  export type Outbound = FeePlanAgreement$Outbound;
}

export function feePlanAgreementToJSON(
  feePlanAgreement: FeePlanAgreement,
): string {
  return JSON.stringify(
    FeePlanAgreement$outboundSchema.parse(feePlanAgreement),
  );
}

export function feePlanAgreementFromJSON(
  jsonString: string,
): SafeParseResult<FeePlanAgreement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeePlanAgreement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePlanAgreement' from JSON`,
  );
}
