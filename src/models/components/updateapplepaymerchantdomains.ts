/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateApplePayMerchantDomains = {
  /**
   * A unique list of fully-qualified, top-level or sub-domain names to add.
   */
  addDomains?: Array<string> | undefined;
  /**
   * A unique list of fully-qualified, top-level or sub-domain names to remove.
   */
  removeDomains?: Array<string> | undefined;
};

/** @internal */
export const UpdateApplePayMerchantDomains$inboundSchema: z.ZodType<
  UpdateApplePayMerchantDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  addDomains: z.array(z.string()).optional(),
  removeDomains: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateApplePayMerchantDomains$Outbound = {
  addDomains?: Array<string> | undefined;
  removeDomains?: Array<string> | undefined;
};

/** @internal */
export const UpdateApplePayMerchantDomains$outboundSchema: z.ZodType<
  UpdateApplePayMerchantDomains$Outbound,
  z.ZodTypeDef,
  UpdateApplePayMerchantDomains
> = z.object({
  addDomains: z.array(z.string()).optional(),
  removeDomains: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplePayMerchantDomains$ {
  /** @deprecated use `UpdateApplePayMerchantDomains$inboundSchema` instead. */
  export const inboundSchema = UpdateApplePayMerchantDomains$inboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomains$outboundSchema` instead. */
  export const outboundSchema = UpdateApplePayMerchantDomains$outboundSchema;
  /** @deprecated use `UpdateApplePayMerchantDomains$Outbound` instead. */
  export type Outbound = UpdateApplePayMerchantDomains$Outbound;
}

export function updateApplePayMerchantDomainsToJSON(
  updateApplePayMerchantDomains: UpdateApplePayMerchantDomains,
): string {
  return JSON.stringify(
    UpdateApplePayMerchantDomains$outboundSchema.parse(
      updateApplePayMerchantDomains,
    ),
  );
}

export function updateApplePayMerchantDomainsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplePayMerchantDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApplePayMerchantDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplePayMerchantDomains' from JSON`,
  );
}
