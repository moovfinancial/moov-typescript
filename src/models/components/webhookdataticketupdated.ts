/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketStatus,
  TicketStatus$inboundSchema,
  TicketStatus$outboundSchema,
} from "./ticketstatus.js";

export type WebhookDataTicketUpdated = {
  accountID: string;
  ticketID: string;
  foreignID?: string | undefined;
  status: TicketStatus;
};

/** @internal */
export const WebhookDataTicketUpdated$inboundSchema: z.ZodType<
  WebhookDataTicketUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
  foreignID: z.string().optional(),
  status: TicketStatus$inboundSchema,
});

/** @internal */
export type WebhookDataTicketUpdated$Outbound = {
  accountID: string;
  ticketID: string;
  foreignID?: string | undefined;
  status: string;
};

/** @internal */
export const WebhookDataTicketUpdated$outboundSchema: z.ZodType<
  WebhookDataTicketUpdated$Outbound,
  z.ZodTypeDef,
  WebhookDataTicketUpdated
> = z.object({
  accountID: z.string(),
  ticketID: z.string(),
  foreignID: z.string().optional(),
  status: TicketStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataTicketUpdated$ {
  /** @deprecated use `WebhookDataTicketUpdated$inboundSchema` instead. */
  export const inboundSchema = WebhookDataTicketUpdated$inboundSchema;
  /** @deprecated use `WebhookDataTicketUpdated$outboundSchema` instead. */
  export const outboundSchema = WebhookDataTicketUpdated$outboundSchema;
  /** @deprecated use `WebhookDataTicketUpdated$Outbound` instead. */
  export type Outbound = WebhookDataTicketUpdated$Outbound;
}

export function webhookDataTicketUpdatedToJSON(
  webhookDataTicketUpdated: WebhookDataTicketUpdated,
): string {
  return JSON.stringify(
    WebhookDataTicketUpdated$outboundSchema.parse(webhookDataTicketUpdated),
  );
}

export function webhookDataTicketUpdatedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataTicketUpdated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataTicketUpdated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataTicketUpdated' from JSON`,
  );
}
