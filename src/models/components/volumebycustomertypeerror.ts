/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VolumeByCustomerTypeError = {
  businessToBusinessPercentage?: string | undefined;
  consumerToBusinessPercentage?: string | undefined;
};

/** @internal */
export const VolumeByCustomerTypeError$inboundSchema: z.ZodType<
  VolumeByCustomerTypeError,
  z.ZodTypeDef,
  unknown
> = z.object({
  businessToBusinessPercentage: z.string().optional(),
  consumerToBusinessPercentage: z.string().optional(),
});

/** @internal */
export type VolumeByCustomerTypeError$Outbound = {
  businessToBusinessPercentage?: string | undefined;
  consumerToBusinessPercentage?: string | undefined;
};

/** @internal */
export const VolumeByCustomerTypeError$outboundSchema: z.ZodType<
  VolumeByCustomerTypeError$Outbound,
  z.ZodTypeDef,
  VolumeByCustomerTypeError
> = z.object({
  businessToBusinessPercentage: z.string().optional(),
  consumerToBusinessPercentage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeByCustomerTypeError$ {
  /** @deprecated use `VolumeByCustomerTypeError$inboundSchema` instead. */
  export const inboundSchema = VolumeByCustomerTypeError$inboundSchema;
  /** @deprecated use `VolumeByCustomerTypeError$outboundSchema` instead. */
  export const outboundSchema = VolumeByCustomerTypeError$outboundSchema;
  /** @deprecated use `VolumeByCustomerTypeError$Outbound` instead. */
  export type Outbound = VolumeByCustomerTypeError$Outbound;
}

export function volumeByCustomerTypeErrorToJSON(
  volumeByCustomerTypeError: VolumeByCustomerTypeError,
): string {
  return JSON.stringify(
    VolumeByCustomerTypeError$outboundSchema.parse(volumeByCustomerTypeError),
  );
}

export function volumeByCustomerTypeErrorFromJSON(
  jsonString: string,
): SafeParseResult<VolumeByCustomerTypeError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VolumeByCustomerTypeError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VolumeByCustomerTypeError' from JSON`,
  );
}
