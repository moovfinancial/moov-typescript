/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AsyncCreatedRefund,
  AsyncCreatedRefund$inboundSchema,
  AsyncCreatedRefund$Outbound,
  AsyncCreatedRefund$outboundSchema,
} from "./asynccreatedrefund.js";
import {
  CardAcquiringRefund,
  CardAcquiringRefund$inboundSchema,
  CardAcquiringRefund$Outbound,
  CardAcquiringRefund$outboundSchema,
} from "./cardacquiringrefund.js";

export type CreateRefundResponse = AsyncCreatedRefund | CardAcquiringRefund;

/** @internal */
export const CreateRefundResponse$inboundSchema: z.ZodType<
  CreateRefundResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  AsyncCreatedRefund$inboundSchema,
  CardAcquiringRefund$inboundSchema,
]);

/** @internal */
export type CreateRefundResponse$Outbound =
  | AsyncCreatedRefund$Outbound
  | CardAcquiringRefund$Outbound;

/** @internal */
export const CreateRefundResponse$outboundSchema: z.ZodType<
  CreateRefundResponse$Outbound,
  z.ZodTypeDef,
  CreateRefundResponse
> = z.union([
  AsyncCreatedRefund$outboundSchema,
  CardAcquiringRefund$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundResponse$ {
  /** @deprecated use `CreateRefundResponse$inboundSchema` instead. */
  export const inboundSchema = CreateRefundResponse$inboundSchema;
  /** @deprecated use `CreateRefundResponse$outboundSchema` instead. */
  export const outboundSchema = CreateRefundResponse$outboundSchema;
  /** @deprecated use `CreateRefundResponse$Outbound` instead. */
  export type Outbound = CreateRefundResponse$Outbound;
}

export function createRefundResponseToJSON(
  createRefundResponse: CreateRefundResponse,
): string {
  return JSON.stringify(
    CreateRefundResponse$outboundSchema.parse(createRefundResponse),
  );
}

export function createRefundResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundResponse' from JSON`,
  );
}
