/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardVolumeDistribution,
  CardVolumeDistribution$inboundSchema,
  CardVolumeDistribution$Outbound,
  CardVolumeDistribution$outboundSchema,
} from "./cardvolumedistribution.js";
import {
  FulfillmentDetails,
  FulfillmentDetails$inboundSchema,
  FulfillmentDetails$Outbound,
  FulfillmentDetails$outboundSchema,
} from "./fulfillmentdetails.js";
import {
  VolumeByCustomerType,
  VolumeByCustomerType$inboundSchema,
  VolumeByCustomerType$Outbound,
  VolumeByCustomerType$outboundSchema,
} from "./volumebycustomertype.js";

export type UpdateUnderwriting = {
  averageTransactionSize: number;
  maxTransactionSize: number;
  averageMonthlyTransactionVolume: number;
  volumeByCustomerType: VolumeByCustomerType;
  cardVolumeDistribution: CardVolumeDistribution;
  fulfillment: FulfillmentDetails;
};

/** @internal */
export const UpdateUnderwriting$inboundSchema: z.ZodType<
  UpdateUnderwriting,
  z.ZodTypeDef,
  unknown
> = z.object({
  averageTransactionSize: z.number().int(),
  maxTransactionSize: z.number().int(),
  averageMonthlyTransactionVolume: z.number().int(),
  volumeByCustomerType: VolumeByCustomerType$inboundSchema,
  cardVolumeDistribution: CardVolumeDistribution$inboundSchema,
  fulfillment: FulfillmentDetails$inboundSchema,
});

/** @internal */
export type UpdateUnderwriting$Outbound = {
  averageTransactionSize: number;
  maxTransactionSize: number;
  averageMonthlyTransactionVolume: number;
  volumeByCustomerType: VolumeByCustomerType$Outbound;
  cardVolumeDistribution: CardVolumeDistribution$Outbound;
  fulfillment: FulfillmentDetails$Outbound;
};

/** @internal */
export const UpdateUnderwriting$outboundSchema: z.ZodType<
  UpdateUnderwriting$Outbound,
  z.ZodTypeDef,
  UpdateUnderwriting
> = z.object({
  averageTransactionSize: z.number().int(),
  maxTransactionSize: z.number().int(),
  averageMonthlyTransactionVolume: z.number().int(),
  volumeByCustomerType: VolumeByCustomerType$outboundSchema,
  cardVolumeDistribution: CardVolumeDistribution$outboundSchema,
  fulfillment: FulfillmentDetails$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUnderwriting$ {
  /** @deprecated use `UpdateUnderwriting$inboundSchema` instead. */
  export const inboundSchema = UpdateUnderwriting$inboundSchema;
  /** @deprecated use `UpdateUnderwriting$outboundSchema` instead. */
  export const outboundSchema = UpdateUnderwriting$outboundSchema;
  /** @deprecated use `UpdateUnderwriting$Outbound` instead. */
  export type Outbound = UpdateUnderwriting$Outbound;
}

export function updateUnderwritingToJSON(
  updateUnderwriting: UpdateUnderwriting,
): string {
  return JSON.stringify(
    UpdateUnderwriting$outboundSchema.parse(updateUnderwriting),
  );
}

export function updateUnderwritingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUnderwriting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUnderwriting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUnderwriting' from JSON`,
  );
}
