/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EstimatedActivityError,
  EstimatedActivityError$inboundSchema,
  EstimatedActivityError$Outbound,
  EstimatedActivityError$outboundSchema,
} from "./estimatedactivityerror.js";

export type MoneyTransferPullFromCardError = {
  estimatedActivity?: EstimatedActivityError | undefined;
};

/** @internal */
export const MoneyTransferPullFromCardError$inboundSchema: z.ZodType<
  MoneyTransferPullFromCardError,
  z.ZodTypeDef,
  unknown
> = z.object({
  estimatedActivity: EstimatedActivityError$inboundSchema.optional(),
});

/** @internal */
export type MoneyTransferPullFromCardError$Outbound = {
  estimatedActivity?: EstimatedActivityError$Outbound | undefined;
};

/** @internal */
export const MoneyTransferPullFromCardError$outboundSchema: z.ZodType<
  MoneyTransferPullFromCardError$Outbound,
  z.ZodTypeDef,
  MoneyTransferPullFromCardError
> = z.object({
  estimatedActivity: EstimatedActivityError$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MoneyTransferPullFromCardError$ {
  /** @deprecated use `MoneyTransferPullFromCardError$inboundSchema` instead. */
  export const inboundSchema = MoneyTransferPullFromCardError$inboundSchema;
  /** @deprecated use `MoneyTransferPullFromCardError$outboundSchema` instead. */
  export const outboundSchema = MoneyTransferPullFromCardError$outboundSchema;
  /** @deprecated use `MoneyTransferPullFromCardError$Outbound` instead. */
  export type Outbound = MoneyTransferPullFromCardError$Outbound;
}

export function moneyTransferPullFromCardErrorToJSON(
  moneyTransferPullFromCardError: MoneyTransferPullFromCardError,
): string {
  return JSON.stringify(
    MoneyTransferPullFromCardError$outboundSchema.parse(
      moneyTransferPullFromCardError,
    ),
  );
}

export function moneyTransferPullFromCardErrorFromJSON(
  jsonString: string,
): SafeParseResult<MoneyTransferPullFromCardError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MoneyTransferPullFromCardError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MoneyTransferPullFromCardError' from JSON`,
  );
}
