/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AmountDecimal,
  AmountDecimal$inboundSchema,
  AmountDecimal$Outbound,
  AmountDecimal$outboundSchema,
} from "./amountdecimal.js";
import {
  ProductImageMetadata,
  ProductImageMetadata$inboundSchema,
  ProductImageMetadata$Outbound,
  ProductImageMetadata$outboundSchema,
} from "./productimagemetadata.js";
import {
  ProductOptionGroup,
  ProductOptionGroup$inboundSchema,
  ProductOptionGroup$Outbound,
  ProductOptionGroup$outboundSchema,
} from "./productoptiongroup.js";

/**
 * A product available for purchase, which may have optional configuration options.
 */
export type Product = {
  /**
   * Unique identifier for a product.
   */
  productID: string;
  title: string;
  /**
   * A detailed description of the product.
   *
   * @remarks
   *
   * - Must be valid UTF-8 text
   * - Supports Markdown for formatting
   * - HTML is not permitted and will be rejected
   */
  description?: string | undefined;
  /**
   * A product's starting price, before applying modifiers.
   */
  basePrice: AmountDecimal;
  /**
   * Optional configuration options for a product, such as size or color.
   */
  optionGroups?: Array<ProductOptionGroup> | undefined;
  /**
   * Optional images associated with the product.
   */
  images?: Array<ProductImageMetadata> | undefined;
  /**
   * The date and time when the product was added.
   */
  createdOn: Date;
  /**
   * The date and time when the product was last updated.
   */
  updatedOn: Date;
  /**
   * The date and time when the product was disabled.
   */
  disabledOn?: Date | undefined;
};

/** @internal */
export const Product$inboundSchema: z.ZodType<Product, z.ZodTypeDef, unknown> =
  z.object({
    productID: z.string(),
    title: z.string(),
    description: z.string().optional(),
    basePrice: AmountDecimal$inboundSchema,
    optionGroups: z.array(ProductOptionGroup$inboundSchema).optional(),
    images: z.array(ProductImageMetadata$inboundSchema).optional(),
    createdOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updatedOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    disabledOn: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type Product$Outbound = {
  productID: string;
  title: string;
  description?: string | undefined;
  basePrice: AmountDecimal$Outbound;
  optionGroups?: Array<ProductOptionGroup$Outbound> | undefined;
  images?: Array<ProductImageMetadata$Outbound> | undefined;
  createdOn: string;
  updatedOn: string;
  disabledOn?: string | undefined;
};

/** @internal */
export const Product$outboundSchema: z.ZodType<
  Product$Outbound,
  z.ZodTypeDef,
  Product
> = z.object({
  productID: z.string(),
  title: z.string(),
  description: z.string().optional(),
  basePrice: AmountDecimal$outboundSchema,
  optionGroups: z.array(ProductOptionGroup$outboundSchema).optional(),
  images: z.array(ProductImageMetadata$outboundSchema).optional(),
  createdOn: z.date().transform(v => v.toISOString()),
  updatedOn: z.date().transform(v => v.toISOString()),
  disabledOn: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Product$ {
  /** @deprecated use `Product$inboundSchema` instead. */
  export const inboundSchema = Product$inboundSchema;
  /** @deprecated use `Product$outboundSchema` instead. */
  export const outboundSchema = Product$outboundSchema;
  /** @deprecated use `Product$Outbound` instead. */
  export type Outbound = Product$Outbound;
}

export function productToJSON(product: Product): string {
  return JSON.stringify(Product$outboundSchema.parse(product));
}

export function productFromJSON(
  jsonString: string,
): SafeParseResult<Product, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Product$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Product' from JSON`,
  );
}
