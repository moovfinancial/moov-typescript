/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ACHPaymentDetailsError = {
  companyEntryDescription?: string | undefined;
  originatingCompanyName?: string | undefined;
};

/** @internal */
export const ACHPaymentDetailsError$inboundSchema: z.ZodType<
  ACHPaymentDetailsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyEntryDescription: z.string().optional(),
  originatingCompanyName: z.string().optional(),
});

/** @internal */
export type ACHPaymentDetailsError$Outbound = {
  companyEntryDescription?: string | undefined;
  originatingCompanyName?: string | undefined;
};

/** @internal */
export const ACHPaymentDetailsError$outboundSchema: z.ZodType<
  ACHPaymentDetailsError$Outbound,
  z.ZodTypeDef,
  ACHPaymentDetailsError
> = z.object({
  companyEntryDescription: z.string().optional(),
  originatingCompanyName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ACHPaymentDetailsError$ {
  /** @deprecated use `ACHPaymentDetailsError$inboundSchema` instead. */
  export const inboundSchema = ACHPaymentDetailsError$inboundSchema;
  /** @deprecated use `ACHPaymentDetailsError$outboundSchema` instead. */
  export const outboundSchema = ACHPaymentDetailsError$outboundSchema;
  /** @deprecated use `ACHPaymentDetailsError$Outbound` instead. */
  export type Outbound = ACHPaymentDetailsError$Outbound;
}

export function achPaymentDetailsErrorToJSON(
  achPaymentDetailsError: ACHPaymentDetailsError,
): string {
  return JSON.stringify(
    ACHPaymentDetailsError$outboundSchema.parse(achPaymentDetailsError),
  );
}

export function achPaymentDetailsErrorFromJSON(
  jsonString: string,
): SafeParseResult<ACHPaymentDetailsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ACHPaymentDetailsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ACHPaymentDetailsError' from JSON`,
  );
}
