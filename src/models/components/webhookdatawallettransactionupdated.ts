/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WalletTransactionStatus,
  WalletTransactionStatus$inboundSchema,
  WalletTransactionStatus$outboundSchema,
} from "./wallettransactionstatus.js";
import {
  WebhookWalletAvailableBalance,
  WebhookWalletAvailableBalance$inboundSchema,
  WebhookWalletAvailableBalance$Outbound,
  WebhookWalletAvailableBalance$outboundSchema,
} from "./webhookwalletavailablebalance.js";

export type WebhookDataWalletTransactionUpdated = {
  accountID: string;
  walletID: string;
  transactionID: string;
  status: WalletTransactionStatus;
  /**
   * The available balance of a wallet.
   */
  availableBalance?: WebhookWalletAvailableBalance | undefined;
};

/** @internal */
export const WebhookDataWalletTransactionUpdated$inboundSchema: z.ZodType<
  WebhookDataWalletTransactionUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
  transactionID: z.string(),
  status: WalletTransactionStatus$inboundSchema,
  availableBalance: WebhookWalletAvailableBalance$inboundSchema.optional(),
});

/** @internal */
export type WebhookDataWalletTransactionUpdated$Outbound = {
  accountID: string;
  walletID: string;
  transactionID: string;
  status: string;
  availableBalance?: WebhookWalletAvailableBalance$Outbound | undefined;
};

/** @internal */
export const WebhookDataWalletTransactionUpdated$outboundSchema: z.ZodType<
  WebhookDataWalletTransactionUpdated$Outbound,
  z.ZodTypeDef,
  WebhookDataWalletTransactionUpdated
> = z.object({
  accountID: z.string(),
  walletID: z.string(),
  transactionID: z.string(),
  status: WalletTransactionStatus$outboundSchema,
  availableBalance: WebhookWalletAvailableBalance$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataWalletTransactionUpdated$ {
  /** @deprecated use `WebhookDataWalletTransactionUpdated$inboundSchema` instead. */
  export const inboundSchema =
    WebhookDataWalletTransactionUpdated$inboundSchema;
  /** @deprecated use `WebhookDataWalletTransactionUpdated$outboundSchema` instead. */
  export const outboundSchema =
    WebhookDataWalletTransactionUpdated$outboundSchema;
  /** @deprecated use `WebhookDataWalletTransactionUpdated$Outbound` instead. */
  export type Outbound = WebhookDataWalletTransactionUpdated$Outbound;
}

export function webhookDataWalletTransactionUpdatedToJSON(
  webhookDataWalletTransactionUpdated: WebhookDataWalletTransactionUpdated,
): string {
  return JSON.stringify(
    WebhookDataWalletTransactionUpdated$outboundSchema.parse(
      webhookDataWalletTransactionUpdated,
    ),
  );
}

export function webhookDataWalletTransactionUpdatedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataWalletTransactionUpdated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WebhookDataWalletTransactionUpdated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataWalletTransactionUpdated' from JSON`,
  );
}
