/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes a terminal application version.
 */
export type TerminalApplicationVersion = {
  /**
   * The app version of the terminal application (version code for Android terminal application).
   */
  version: string;
};

/** @internal */
export const TerminalApplicationVersion$inboundSchema: z.ZodType<
  TerminalApplicationVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
});

/** @internal */
export type TerminalApplicationVersion$Outbound = {
  version: string;
};

/** @internal */
export const TerminalApplicationVersion$outboundSchema: z.ZodType<
  TerminalApplicationVersion$Outbound,
  z.ZodTypeDef,
  TerminalApplicationVersion
> = z.object({
  version: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TerminalApplicationVersion$ {
  /** @deprecated use `TerminalApplicationVersion$inboundSchema` instead. */
  export const inboundSchema = TerminalApplicationVersion$inboundSchema;
  /** @deprecated use `TerminalApplicationVersion$outboundSchema` instead. */
  export const outboundSchema = TerminalApplicationVersion$outboundSchema;
  /** @deprecated use `TerminalApplicationVersion$Outbound` instead. */
  export type Outbound = TerminalApplicationVersion$Outbound;
}

export function terminalApplicationVersionToJSON(
  terminalApplicationVersion: TerminalApplicationVersion,
): string {
  return JSON.stringify(
    TerminalApplicationVersion$outboundSchema.parse(terminalApplicationVersion),
  );
}

export function terminalApplicationVersionFromJSON(
  jsonString: string,
): SafeParseResult<TerminalApplicationVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TerminalApplicationVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TerminalApplicationVersion' from JSON`,
  );
}
