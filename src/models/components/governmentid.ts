/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GovernmentIDSsn = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

export type GovernmentIDItin = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

export type GovernmentID = {
  ssn?: GovernmentIDSsn | undefined;
  itin?: GovernmentIDItin | undefined;
};

/** @internal */
export const GovernmentIDSsn$inboundSchema: z.ZodType<
  GovernmentIDSsn,
  z.ZodTypeDef,
  unknown
> = z.object({
  full: z.string().optional(),
  lastFour: z.string().optional(),
});

/** @internal */
export type GovernmentIDSsn$Outbound = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

/** @internal */
export const GovernmentIDSsn$outboundSchema: z.ZodType<
  GovernmentIDSsn$Outbound,
  z.ZodTypeDef,
  GovernmentIDSsn
> = z.object({
  full: z.string().optional(),
  lastFour: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GovernmentIDSsn$ {
  /** @deprecated use `GovernmentIDSsn$inboundSchema` instead. */
  export const inboundSchema = GovernmentIDSsn$inboundSchema;
  /** @deprecated use `GovernmentIDSsn$outboundSchema` instead. */
  export const outboundSchema = GovernmentIDSsn$outboundSchema;
  /** @deprecated use `GovernmentIDSsn$Outbound` instead. */
  export type Outbound = GovernmentIDSsn$Outbound;
}

export function governmentIDSsnToJSON(
  governmentIDSsn: GovernmentIDSsn,
): string {
  return JSON.stringify(GovernmentIDSsn$outboundSchema.parse(governmentIDSsn));
}

export function governmentIDSsnFromJSON(
  jsonString: string,
): SafeParseResult<GovernmentIDSsn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GovernmentIDSsn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GovernmentIDSsn' from JSON`,
  );
}

/** @internal */
export const GovernmentIDItin$inboundSchema: z.ZodType<
  GovernmentIDItin,
  z.ZodTypeDef,
  unknown
> = z.object({
  full: z.string().optional(),
  lastFour: z.string().optional(),
});

/** @internal */
export type GovernmentIDItin$Outbound = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

/** @internal */
export const GovernmentIDItin$outboundSchema: z.ZodType<
  GovernmentIDItin$Outbound,
  z.ZodTypeDef,
  GovernmentIDItin
> = z.object({
  full: z.string().optional(),
  lastFour: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GovernmentIDItin$ {
  /** @deprecated use `GovernmentIDItin$inboundSchema` instead. */
  export const inboundSchema = GovernmentIDItin$inboundSchema;
  /** @deprecated use `GovernmentIDItin$outboundSchema` instead. */
  export const outboundSchema = GovernmentIDItin$outboundSchema;
  /** @deprecated use `GovernmentIDItin$Outbound` instead. */
  export type Outbound = GovernmentIDItin$Outbound;
}

export function governmentIDItinToJSON(
  governmentIDItin: GovernmentIDItin,
): string {
  return JSON.stringify(
    GovernmentIDItin$outboundSchema.parse(governmentIDItin),
  );
}

export function governmentIDItinFromJSON(
  jsonString: string,
): SafeParseResult<GovernmentIDItin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GovernmentIDItin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GovernmentIDItin' from JSON`,
  );
}

/** @internal */
export const GovernmentID$inboundSchema: z.ZodType<
  GovernmentID,
  z.ZodTypeDef,
  unknown
> = z.object({
  ssn: z.lazy(() => GovernmentIDSsn$inboundSchema).optional(),
  itin: z.lazy(() => GovernmentIDItin$inboundSchema).optional(),
});

/** @internal */
export type GovernmentID$Outbound = {
  ssn?: GovernmentIDSsn$Outbound | undefined;
  itin?: GovernmentIDItin$Outbound | undefined;
};

/** @internal */
export const GovernmentID$outboundSchema: z.ZodType<
  GovernmentID$Outbound,
  z.ZodTypeDef,
  GovernmentID
> = z.object({
  ssn: z.lazy(() => GovernmentIDSsn$outboundSchema).optional(),
  itin: z.lazy(() => GovernmentIDItin$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GovernmentID$ {
  /** @deprecated use `GovernmentID$inboundSchema` instead. */
  export const inboundSchema = GovernmentID$inboundSchema;
  /** @deprecated use `GovernmentID$outboundSchema` instead. */
  export const outboundSchema = GovernmentID$outboundSchema;
  /** @deprecated use `GovernmentID$Outbound` instead. */
  export type Outbound = GovernmentID$Outbound;
}

export function governmentIDToJSON(governmentID: GovernmentID): string {
  return JSON.stringify(GovernmentID$outboundSchema.parse(governmentID));
}

export function governmentIDFromJSON(
  jsonString: string,
): SafeParseResult<GovernmentID, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GovernmentID$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GovernmentID' from JSON`,
  );
}
