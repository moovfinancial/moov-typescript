/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AsyncTransfer = {
  transferID: string;
  createdOn: Date;
  type?: "AsyncTransfer" | undefined;
};

/** @internal */
export const AsyncTransfer$inboundSchema: z.ZodType<
  AsyncTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferID: z.string(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  _type: z.literal("AsyncTransfer").optional(),
}).transform((v) => {
  return remap$(v, {
    "_type": "type",
  });
});

/** @internal */
export type AsyncTransfer$Outbound = {
  transferID: string;
  createdOn: string;
  _type: "AsyncTransfer";
};

/** @internal */
export const AsyncTransfer$outboundSchema: z.ZodType<
  AsyncTransfer$Outbound,
  z.ZodTypeDef,
  AsyncTransfer
> = z.object({
  transferID: z.string(),
  createdOn: z.date().transform(v => v.toISOString()),
  type: z.literal("AsyncTransfer").default("AsyncTransfer" as const),
}).transform((v) => {
  return remap$(v, {
    type: "_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AsyncTransfer$ {
  /** @deprecated use `AsyncTransfer$inboundSchema` instead. */
  export const inboundSchema = AsyncTransfer$inboundSchema;
  /** @deprecated use `AsyncTransfer$outboundSchema` instead. */
  export const outboundSchema = AsyncTransfer$outboundSchema;
  /** @deprecated use `AsyncTransfer$Outbound` instead. */
  export type Outbound = AsyncTransfer$Outbound;
}

export function asyncTransferToJSON(asyncTransfer: AsyncTransfer): string {
  return JSON.stringify(AsyncTransfer$outboundSchema.parse(asyncTransfer));
}

export function asyncTransferFromJSON(
  jsonString: string,
): SafeParseResult<AsyncTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AsyncTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AsyncTransfer' from JSON`,
  );
}
