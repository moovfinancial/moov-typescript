/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Fields for identifying an authorized individual.
 */
export type AuthorizedUser = {
  firstName: string;
  lastName: string;
};

/** @internal */
export const AuthorizedUser$inboundSchema: z.ZodType<
  AuthorizedUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
});

/** @internal */
export type AuthorizedUser$Outbound = {
  firstName: string;
  lastName: string;
};

/** @internal */
export const AuthorizedUser$outboundSchema: z.ZodType<
  AuthorizedUser$Outbound,
  z.ZodTypeDef,
  AuthorizedUser
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizedUser$ {
  /** @deprecated use `AuthorizedUser$inboundSchema` instead. */
  export const inboundSchema = AuthorizedUser$inboundSchema;
  /** @deprecated use `AuthorizedUser$outboundSchema` instead. */
  export const outboundSchema = AuthorizedUser$outboundSchema;
  /** @deprecated use `AuthorizedUser$Outbound` instead. */
  export type Outbound = AuthorizedUser$Outbound;
}

export function authorizedUserToJSON(authorizedUser: AuthorizedUser): string {
  return JSON.stringify(AuthorizedUser$outboundSchema.parse(authorizedUser));
}

export function authorizedUserFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizedUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizedUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizedUser' from JSON`,
  );
}
