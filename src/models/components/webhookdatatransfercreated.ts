/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WebhookDataTransferStatus,
  WebhookDataTransferStatus$inboundSchema,
  WebhookDataTransferStatus$outboundSchema,
} from "./webhookdatatransferstatus.js";

export type WebhookDataTransferCreated = {
  /**
   * The accountID which facilitated the transfer.
   */
  accountID: string;
  transferID: string;
  status: WebhookDataTransferStatus;
  foreignID?: string | undefined;
};

/** @internal */
export const WebhookDataTransferCreated$inboundSchema: z.ZodType<
  WebhookDataTransferCreated,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  status: WebhookDataTransferStatus$inboundSchema,
  foreignID: z.string().optional(),
});

/** @internal */
export type WebhookDataTransferCreated$Outbound = {
  accountID: string;
  transferID: string;
  status: string;
  foreignID?: string | undefined;
};

/** @internal */
export const WebhookDataTransferCreated$outboundSchema: z.ZodType<
  WebhookDataTransferCreated$Outbound,
  z.ZodTypeDef,
  WebhookDataTransferCreated
> = z.object({
  accountID: z.string(),
  transferID: z.string(),
  status: WebhookDataTransferStatus$outboundSchema,
  foreignID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataTransferCreated$ {
  /** @deprecated use `WebhookDataTransferCreated$inboundSchema` instead. */
  export const inboundSchema = WebhookDataTransferCreated$inboundSchema;
  /** @deprecated use `WebhookDataTransferCreated$outboundSchema` instead. */
  export const outboundSchema = WebhookDataTransferCreated$outboundSchema;
  /** @deprecated use `WebhookDataTransferCreated$Outbound` instead. */
  export type Outbound = WebhookDataTransferCreated$Outbound;
}

export function webhookDataTransferCreatedToJSON(
  webhookDataTransferCreated: WebhookDataTransferCreated,
): string {
  return JSON.stringify(
    WebhookDataTransferCreated$outboundSchema.parse(webhookDataTransferCreated),
  );
}

export function webhookDataTransferCreatedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataTransferCreated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataTransferCreated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataTransferCreated' from JSON`,
  );
}
