/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AsyncTransfer,
  AsyncTransfer$inboundSchema,
  AsyncTransfer$Outbound,
  AsyncTransfer$outboundSchema,
} from "./asynctransfer.js";
import {
  Transfer,
  Transfer$inboundSchema,
  Transfer$Outbound,
  Transfer$outboundSchema,
} from "./transfer.js";

export type TransferResponse = AsyncTransfer | Transfer;

/** @internal */
export const TransferResponse$inboundSchema: z.ZodType<
  TransferResponse,
  z.ZodTypeDef,
  unknown
> = z.union([AsyncTransfer$inboundSchema, Transfer$inboundSchema]);

/** @internal */
export type TransferResponse$Outbound =
  | AsyncTransfer$Outbound
  | Transfer$Outbound;

/** @internal */
export const TransferResponse$outboundSchema: z.ZodType<
  TransferResponse$Outbound,
  z.ZodTypeDef,
  TransferResponse
> = z.union([AsyncTransfer$outboundSchema, Transfer$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferResponse$ {
  /** @deprecated use `TransferResponse$inboundSchema` instead. */
  export const inboundSchema = TransferResponse$inboundSchema;
  /** @deprecated use `TransferResponse$outboundSchema` instead. */
  export const outboundSchema = TransferResponse$outboundSchema;
  /** @deprecated use `TransferResponse$Outbound` instead. */
  export type Outbound = TransferResponse$Outbound;
}

export function transferResponseToJSON(
  transferResponse: TransferResponse,
): string {
  return JSON.stringify(
    TransferResponse$outboundSchema.parse(transferResponse),
  );
}

export function transferResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferResponse' from JSON`,
  );
}
