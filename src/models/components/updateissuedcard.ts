/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateAuthorizedUserUpdate,
  CreateAuthorizedUserUpdate$inboundSchema,
  CreateAuthorizedUserUpdate$Outbound,
  CreateAuthorizedUserUpdate$outboundSchema,
} from "./createauthorizeduserupdate.js";
import {
  IssuedCardState,
  IssuedCardState$inboundSchema,
  IssuedCardState$outboundSchema,
} from "./issuedcardstate.js";

export type UpdateIssuedCard = {
  /**
   * The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.
   *
   * @remarks
   *
   * - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
   * - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
   * - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
   * - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
   */
  state?: IssuedCardState | undefined;
  memo?: string | undefined;
  /**
   * Fields for identifying an authorized individual.
   */
  authorizedUser?: CreateAuthorizedUserUpdate | undefined;
};

/** @internal */
export const UpdateIssuedCard$inboundSchema: z.ZodType<
  UpdateIssuedCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: IssuedCardState$inboundSchema.optional(),
  memo: z.string().optional(),
  authorizedUser: CreateAuthorizedUserUpdate$inboundSchema.optional(),
});

/** @internal */
export type UpdateIssuedCard$Outbound = {
  state?: string | undefined;
  memo?: string | undefined;
  authorizedUser?: CreateAuthorizedUserUpdate$Outbound | undefined;
};

/** @internal */
export const UpdateIssuedCard$outboundSchema: z.ZodType<
  UpdateIssuedCard$Outbound,
  z.ZodTypeDef,
  UpdateIssuedCard
> = z.object({
  state: IssuedCardState$outboundSchema.optional(),
  memo: z.string().optional(),
  authorizedUser: CreateAuthorizedUserUpdate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIssuedCard$ {
  /** @deprecated use `UpdateIssuedCard$inboundSchema` instead. */
  export const inboundSchema = UpdateIssuedCard$inboundSchema;
  /** @deprecated use `UpdateIssuedCard$outboundSchema` instead. */
  export const outboundSchema = UpdateIssuedCard$outboundSchema;
  /** @deprecated use `UpdateIssuedCard$Outbound` instead. */
  export type Outbound = UpdateIssuedCard$Outbound;
}

export function updateIssuedCardToJSON(
  updateIssuedCard: UpdateIssuedCard,
): string {
  return JSON.stringify(
    UpdateIssuedCard$outboundSchema.parse(updateIssuedCard),
  );
}

export function updateIssuedCardFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIssuedCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIssuedCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIssuedCard' from JSON`,
  );
}
