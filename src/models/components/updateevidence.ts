/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvidenceType,
  EvidenceType$inboundSchema,
  EvidenceType$outboundSchema,
} from "./evidencetype.js";

/**
 * The template for adding optional properties.
 */
export type UpdateEvidence = {
  /**
   * The text to associate with the dispute as evidence.
   */
  text?: string | undefined;
  evidenceType?: EvidenceType | undefined;
};

/** @internal */
export const UpdateEvidence$inboundSchema: z.ZodType<
  UpdateEvidence,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string().optional(),
  evidenceType: EvidenceType$inboundSchema.optional(),
});

/** @internal */
export type UpdateEvidence$Outbound = {
  text?: string | undefined;
  evidenceType?: string | undefined;
};

/** @internal */
export const UpdateEvidence$outboundSchema: z.ZodType<
  UpdateEvidence$Outbound,
  z.ZodTypeDef,
  UpdateEvidence
> = z.object({
  text: z.string().optional(),
  evidenceType: EvidenceType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEvidence$ {
  /** @deprecated use `UpdateEvidence$inboundSchema` instead. */
  export const inboundSchema = UpdateEvidence$inboundSchema;
  /** @deprecated use `UpdateEvidence$outboundSchema` instead. */
  export const outboundSchema = UpdateEvidence$outboundSchema;
  /** @deprecated use `UpdateEvidence$Outbound` instead. */
  export type Outbound = UpdateEvidence$Outbound;
}

export function updateEvidenceToJSON(updateEvidence: UpdateEvidence): string {
  return JSON.stringify(UpdateEvidence$outboundSchema.parse(updateEvidence));
}

export function updateEvidenceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEvidence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEvidence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEvidence' from JSON`,
  );
}
