/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddressUpdate = {
  addressLine1?: string | undefined;
  addressLine2?: string | undefined;
  city?: string | undefined;
  stateOrProvince?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const AddressUpdate$inboundSchema: z.ZodType<
  AddressUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  addressLine1: z.string().optional(),
  addressLine2: z.string().optional(),
  city: z.string().optional(),
  stateOrProvince: z.string().optional(),
  postalCode: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type AddressUpdate$Outbound = {
  addressLine1?: string | undefined;
  addressLine2?: string | undefined;
  city?: string | undefined;
  stateOrProvince?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const AddressUpdate$outboundSchema: z.ZodType<
  AddressUpdate$Outbound,
  z.ZodTypeDef,
  AddressUpdate
> = z.object({
  addressLine1: z.string().optional(),
  addressLine2: z.string().optional(),
  city: z.string().optional(),
  stateOrProvince: z.string().optional(),
  postalCode: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressUpdate$ {
  /** @deprecated use `AddressUpdate$inboundSchema` instead. */
  export const inboundSchema = AddressUpdate$inboundSchema;
  /** @deprecated use `AddressUpdate$outboundSchema` instead. */
  export const outboundSchema = AddressUpdate$outboundSchema;
  /** @deprecated use `AddressUpdate$Outbound` instead. */
  export type Outbound = AddressUpdate$Outbound;
}

export function addressUpdateToJSON(addressUpdate: AddressUpdate): string {
  return JSON.stringify(AddressUpdate$outboundSchema.parse(addressUpdate));
}

export function addressUpdateFromJSON(
  jsonString: string,
): SafeParseResult<AddressUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressUpdate' from JSON`,
  );
}
