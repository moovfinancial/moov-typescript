/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountType,
  AccountType$inboundSchema,
  AccountType$outboundSchema,
} from "./accounttype.js";
import {
  CapabilityID,
  CapabilityID$inboundSchema,
  CapabilityID$outboundSchema,
} from "./capabilityid.js";
import {
  CreateProfileUpdate,
  CreateProfileUpdate$inboundSchema,
  CreateProfileUpdate$Outbound,
  CreateProfileUpdate$outboundSchema,
} from "./createprofileupdate.js";
import {
  CustomerSupportUpdate,
  CustomerSupportUpdate$inboundSchema,
  CustomerSupportUpdate$Outbound,
  CustomerSupportUpdate$outboundSchema,
} from "./customersupportupdate.js";
import {
  ManualTermsOfServiceUpdate,
  ManualTermsOfServiceUpdate$inboundSchema,
  ManualTermsOfServiceUpdate$Outbound,
  ManualTermsOfServiceUpdate$outboundSchema,
} from "./manualtermsofserviceupdate.js";
import {
  SettingsUpdate,
  SettingsUpdate$inboundSchema,
  SettingsUpdate$Outbound,
  SettingsUpdate$outboundSchema,
} from "./settingsupdate.js";
import {
  TermsOfServiceTokenUpdate,
  TermsOfServiceTokenUpdate$inboundSchema,
  TermsOfServiceTokenUpdate$Outbound,
  TermsOfServiceTokenUpdate$outboundSchema,
} from "./termsofservicetokenupdate.js";

export type CreateAccountUpdateTermsOfService =
  | TermsOfServiceTokenUpdate
  | ManualTermsOfServiceUpdate;

export type CreateAccountUpdate = {
  /**
   * The type of entity represented by this account.
   */
  accountType?: AccountType | undefined;
  profile?: CreateProfileUpdate | undefined;
  /**
   * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
   */
  metadata?: { [k: string]: string } | undefined;
  termsOfService?:
    | TermsOfServiceTokenUpdate
    | ManualTermsOfServiceUpdate
    | undefined;
  /**
   * Optional alias from a foreign/external system which can be used to reference this resource.
   */
  foreignID?: string | undefined;
  /**
   * User-provided information that can be displayed on credit card transactions for customers to use when
   *
   * @remarks
   * contacting a customer support team. This data is only allowed on a business account.
   */
  customerSupport?: CustomerSupportUpdate | undefined;
  /**
   * User provided settings to manage an account.
   */
  settings?: SettingsUpdate | undefined;
  capabilities?: Array<CapabilityID> | undefined;
};

/** @internal */
export const CreateAccountUpdateTermsOfService$inboundSchema: z.ZodType<
  CreateAccountUpdateTermsOfService,
  z.ZodTypeDef,
  unknown
> = z.union([
  TermsOfServiceTokenUpdate$inboundSchema,
  ManualTermsOfServiceUpdate$inboundSchema,
]);

/** @internal */
export type CreateAccountUpdateTermsOfService$Outbound =
  | TermsOfServiceTokenUpdate$Outbound
  | ManualTermsOfServiceUpdate$Outbound;

/** @internal */
export const CreateAccountUpdateTermsOfService$outboundSchema: z.ZodType<
  CreateAccountUpdateTermsOfService$Outbound,
  z.ZodTypeDef,
  CreateAccountUpdateTermsOfService
> = z.union([
  TermsOfServiceTokenUpdate$outboundSchema,
  ManualTermsOfServiceUpdate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountUpdateTermsOfService$ {
  /** @deprecated use `CreateAccountUpdateTermsOfService$inboundSchema` instead. */
  export const inboundSchema = CreateAccountUpdateTermsOfService$inboundSchema;
  /** @deprecated use `CreateAccountUpdateTermsOfService$outboundSchema` instead. */
  export const outboundSchema =
    CreateAccountUpdateTermsOfService$outboundSchema;
  /** @deprecated use `CreateAccountUpdateTermsOfService$Outbound` instead. */
  export type Outbound = CreateAccountUpdateTermsOfService$Outbound;
}

export function createAccountUpdateTermsOfServiceToJSON(
  createAccountUpdateTermsOfService: CreateAccountUpdateTermsOfService,
): string {
  return JSON.stringify(
    CreateAccountUpdateTermsOfService$outboundSchema.parse(
      createAccountUpdateTermsOfService,
    ),
  );
}

export function createAccountUpdateTermsOfServiceFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountUpdateTermsOfService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountUpdateTermsOfService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountUpdateTermsOfService' from JSON`,
  );
}

/** @internal */
export const CreateAccountUpdate$inboundSchema: z.ZodType<
  CreateAccountUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountType: AccountType$inboundSchema.optional(),
  profile: CreateProfileUpdate$inboundSchema.optional(),
  metadata: z.record(z.string()).optional(),
  termsOfService: z.union([
    TermsOfServiceTokenUpdate$inboundSchema,
    ManualTermsOfServiceUpdate$inboundSchema,
  ]).optional(),
  foreignID: z.string().optional(),
  customerSupport: CustomerSupportUpdate$inboundSchema.optional(),
  settings: SettingsUpdate$inboundSchema.optional(),
  capabilities: z.array(CapabilityID$inboundSchema).optional(),
});

/** @internal */
export type CreateAccountUpdate$Outbound = {
  accountType?: string | undefined;
  profile?: CreateProfileUpdate$Outbound | undefined;
  metadata?: { [k: string]: string } | undefined;
  termsOfService?:
    | TermsOfServiceTokenUpdate$Outbound
    | ManualTermsOfServiceUpdate$Outbound
    | undefined;
  foreignID?: string | undefined;
  customerSupport?: CustomerSupportUpdate$Outbound | undefined;
  settings?: SettingsUpdate$Outbound | undefined;
  capabilities?: Array<string> | undefined;
};

/** @internal */
export const CreateAccountUpdate$outboundSchema: z.ZodType<
  CreateAccountUpdate$Outbound,
  z.ZodTypeDef,
  CreateAccountUpdate
> = z.object({
  accountType: AccountType$outboundSchema.optional(),
  profile: CreateProfileUpdate$outboundSchema.optional(),
  metadata: z.record(z.string()).optional(),
  termsOfService: z.union([
    TermsOfServiceTokenUpdate$outboundSchema,
    ManualTermsOfServiceUpdate$outboundSchema,
  ]).optional(),
  foreignID: z.string().optional(),
  customerSupport: CustomerSupportUpdate$outboundSchema.optional(),
  settings: SettingsUpdate$outboundSchema.optional(),
  capabilities: z.array(CapabilityID$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountUpdate$ {
  /** @deprecated use `CreateAccountUpdate$inboundSchema` instead. */
  export const inboundSchema = CreateAccountUpdate$inboundSchema;
  /** @deprecated use `CreateAccountUpdate$outboundSchema` instead. */
  export const outboundSchema = CreateAccountUpdate$outboundSchema;
  /** @deprecated use `CreateAccountUpdate$Outbound` instead. */
  export type Outbound = CreateAccountUpdate$Outbound;
}

export function createAccountUpdateToJSON(
  createAccountUpdate: CreateAccountUpdate,
): string {
  return JSON.stringify(
    CreateAccountUpdate$outboundSchema.parse(createAccountUpdate),
  );
}

export function createAccountUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountUpdate' from JSON`,
  );
}
