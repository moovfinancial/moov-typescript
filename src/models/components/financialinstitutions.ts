/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AchParticipant,
  AchParticipant$inboundSchema,
  AchParticipant$Outbound,
  AchParticipant$outboundSchema,
} from "./achparticipant.js";

export type FinancialInstitutions = {
  achParticipants: Array<AchParticipant>;
};

/** @internal */
export const FinancialInstitutions$inboundSchema: z.ZodType<
  FinancialInstitutions,
  z.ZodTypeDef,
  unknown
> = z.object({
  achParticipants: z.array(AchParticipant$inboundSchema),
});

/** @internal */
export type FinancialInstitutions$Outbound = {
  achParticipants: Array<AchParticipant$Outbound>;
};

/** @internal */
export const FinancialInstitutions$outboundSchema: z.ZodType<
  FinancialInstitutions$Outbound,
  z.ZodTypeDef,
  FinancialInstitutions
> = z.object({
  achParticipants: z.array(AchParticipant$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinancialInstitutions$ {
  /** @deprecated use `FinancialInstitutions$inboundSchema` instead. */
  export const inboundSchema = FinancialInstitutions$inboundSchema;
  /** @deprecated use `FinancialInstitutions$outboundSchema` instead. */
  export const outboundSchema = FinancialInstitutions$outboundSchema;
  /** @deprecated use `FinancialInstitutions$Outbound` instead. */
  export type Outbound = FinancialInstitutions$Outbound;
}

export function financialInstitutionsToJSON(
  financialInstitutions: FinancialInstitutions,
): string {
  return JSON.stringify(
    FinancialInstitutions$outboundSchema.parse(financialInstitutions),
  );
}

export function financialInstitutionsFromJSON(
  jsonString: string,
): SafeParseResult<FinancialInstitutions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FinancialInstitutions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FinancialInstitutions' from JSON`,
  );
}
