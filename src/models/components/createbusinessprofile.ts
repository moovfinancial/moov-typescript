/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  BusinessType,
  BusinessType$inboundSchema,
  BusinessType$outboundSchema,
} from "./businesstype.js";
import {
  IndustryCodes,
  IndustryCodes$inboundSchema,
  IndustryCodes$Outbound,
  IndustryCodes$outboundSchema,
} from "./industrycodes.js";
import {
  PhoneNumber,
  PhoneNumber$inboundSchema,
  PhoneNumber$Outbound,
  PhoneNumber$outboundSchema,
} from "./phonenumber.js";
import {
  PrimaryRegulator,
  PrimaryRegulator$inboundSchema,
  PrimaryRegulator$outboundSchema,
} from "./primaryregulator.js";
import {
  TaxID,
  TaxID$inboundSchema,
  TaxID$Outbound,
  TaxID$outboundSchema,
} from "./taxid.js";

export type CreateBusinessProfile = {
  /**
   * The legal name under which the entity is registered.
   */
  legalBusinessName: string;
  /**
   * A registered trade name under which the business operates, if different from its legal name.
   */
  doingBusinessAs?: string | undefined;
  /**
   * The type of entity represented by this business.
   */
  businessType?: BusinessType | undefined;
  address?: Address | undefined;
  phone?: PhoneNumber | undefined;
  email?: string | undefined;
  website?: string | undefined;
  description?: string | undefined;
  /**
   * An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
   */
  taxID?: TaxID | undefined;
  industryCodes?: IndustryCodes | undefined;
  /**
   * If the business is a financial institution, this field describes its primary regulator.
   */
  primaryRegulator?: PrimaryRegulator | undefined;
};

/** @internal */
export const CreateBusinessProfile$inboundSchema: z.ZodType<
  CreateBusinessProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  legalBusinessName: z.string(),
  doingBusinessAs: z.string().optional(),
  businessType: BusinessType$inboundSchema.optional(),
  address: Address$inboundSchema.optional(),
  phone: PhoneNumber$inboundSchema.optional(),
  email: z.string().optional(),
  website: z.string().optional(),
  description: z.string().optional(),
  taxID: TaxID$inboundSchema.optional(),
  industryCodes: IndustryCodes$inboundSchema.optional(),
  primaryRegulator: PrimaryRegulator$inboundSchema.optional(),
});

/** @internal */
export type CreateBusinessProfile$Outbound = {
  legalBusinessName: string;
  doingBusinessAs?: string | undefined;
  businessType?: string | undefined;
  address?: Address$Outbound | undefined;
  phone?: PhoneNumber$Outbound | undefined;
  email?: string | undefined;
  website?: string | undefined;
  description?: string | undefined;
  taxID?: TaxID$Outbound | undefined;
  industryCodes?: IndustryCodes$Outbound | undefined;
  primaryRegulator?: string | undefined;
};

/** @internal */
export const CreateBusinessProfile$outboundSchema: z.ZodType<
  CreateBusinessProfile$Outbound,
  z.ZodTypeDef,
  CreateBusinessProfile
> = z.object({
  legalBusinessName: z.string(),
  doingBusinessAs: z.string().optional(),
  businessType: BusinessType$outboundSchema.optional(),
  address: Address$outboundSchema.optional(),
  phone: PhoneNumber$outboundSchema.optional(),
  email: z.string().optional(),
  website: z.string().optional(),
  description: z.string().optional(),
  taxID: TaxID$outboundSchema.optional(),
  industryCodes: IndustryCodes$outboundSchema.optional(),
  primaryRegulator: PrimaryRegulator$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBusinessProfile$ {
  /** @deprecated use `CreateBusinessProfile$inboundSchema` instead. */
  export const inboundSchema = CreateBusinessProfile$inboundSchema;
  /** @deprecated use `CreateBusinessProfile$outboundSchema` instead. */
  export const outboundSchema = CreateBusinessProfile$outboundSchema;
  /** @deprecated use `CreateBusinessProfile$Outbound` instead. */
  export type Outbound = CreateBusinessProfile$Outbound;
}

export function createBusinessProfileToJSON(
  createBusinessProfile: CreateBusinessProfile,
): string {
  return JSON.stringify(
    CreateBusinessProfile$outboundSchema.parse(createBusinessProfile),
  );
}

export function createBusinessProfileFromJSON(
  jsonString: string,
): SafeParseResult<CreateBusinessProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBusinessProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBusinessProfile' from JSON`,
  );
}
