/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TransferAccount = {
  accountID: string;
  email: string;
  displayName: string;
};

/** @internal */
export const TransferAccount$inboundSchema: z.ZodType<
  TransferAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  email: z.string(),
  displayName: z.string(),
});

/** @internal */
export type TransferAccount$Outbound = {
  accountID: string;
  email: string;
  displayName: string;
};

/** @internal */
export const TransferAccount$outboundSchema: z.ZodType<
  TransferAccount$Outbound,
  z.ZodTypeDef,
  TransferAccount
> = z.object({
  accountID: z.string(),
  email: z.string(),
  displayName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAccount$ {
  /** @deprecated use `TransferAccount$inboundSchema` instead. */
  export const inboundSchema = TransferAccount$inboundSchema;
  /** @deprecated use `TransferAccount$outboundSchema` instead. */
  export const outboundSchema = TransferAccount$outboundSchema;
  /** @deprecated use `TransferAccount$Outbound` instead. */
  export type Outbound = TransferAccount$Outbound;
}

export function transferAccountToJSON(
  transferAccount: TransferAccount,
): string {
  return JSON.stringify(TransferAccount$outboundSchema.parse(transferAccount));
}

export function transferAccountFromJSON(
  jsonString: string,
): SafeParseResult<TransferAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferAccount' from JSON`,
  );
}
