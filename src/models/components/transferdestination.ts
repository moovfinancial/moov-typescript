/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ACHTransactionDetails,
  ACHTransactionDetails$inboundSchema,
  ACHTransactionDetails$Outbound,
  ACHTransactionDetails$outboundSchema,
} from "./achtransactiondetails.js";
import {
  BankAccount,
  BankAccount$inboundSchema,
  BankAccount$Outbound,
  BankAccount$outboundSchema,
} from "./bankaccount.js";
import {
  CardTransactionDetails,
  CardTransactionDetails$inboundSchema,
  CardTransactionDetails$Outbound,
  CardTransactionDetails$outboundSchema,
} from "./cardtransactiondetails.js";
import {
  RTPTransactionDetails,
  RTPTransactionDetails$inboundSchema,
  RTPTransactionDetails$Outbound,
  RTPTransactionDetails$outboundSchema,
} from "./rtptransactiondetails.js";
import {
  TransferAccount,
  TransferAccount$inboundSchema,
  TransferAccount$Outbound,
  TransferAccount$outboundSchema,
} from "./transferaccount.js";

export type TransferDestination = {
  paymentMethodID: string;
  paymentMethodType: string;
  account: TransferAccount;
  /**
   * Describes a bank account linked to a Moov account.
   */
  bankAccount?: BankAccount | undefined;
  wallet?: any | undefined;
  card?: any | undefined;
  /**
   * ACH specific details about the transaction.
   */
  achDetails?: ACHTransactionDetails | undefined;
  applePay?: any | undefined;
  /**
   * Card-specific details about the transaction.
   */
  cardDetails?: CardTransactionDetails | undefined;
  /**
   * RTP specific details about the transaction.
   */
  rtpDetails?: RTPTransactionDetails | undefined;
};

/** @internal */
export const TransferDestination$inboundSchema: z.ZodType<
  TransferDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType: z.string(),
  account: TransferAccount$inboundSchema,
  bankAccount: BankAccount$inboundSchema.optional(),
  wallet: z.any().optional(),
  card: z.any().optional(),
  achDetails: ACHTransactionDetails$inboundSchema.optional(),
  applePay: z.any().optional(),
  cardDetails: CardTransactionDetails$inboundSchema.optional(),
  rtpDetails: RTPTransactionDetails$inboundSchema.optional(),
});

/** @internal */
export type TransferDestination$Outbound = {
  paymentMethodID: string;
  paymentMethodType: string;
  account: TransferAccount$Outbound;
  bankAccount?: BankAccount$Outbound | undefined;
  wallet?: any | undefined;
  card?: any | undefined;
  achDetails?: ACHTransactionDetails$Outbound | undefined;
  applePay?: any | undefined;
  cardDetails?: CardTransactionDetails$Outbound | undefined;
  rtpDetails?: RTPTransactionDetails$Outbound | undefined;
};

/** @internal */
export const TransferDestination$outboundSchema: z.ZodType<
  TransferDestination$Outbound,
  z.ZodTypeDef,
  TransferDestination
> = z.object({
  paymentMethodID: z.string(),
  paymentMethodType: z.string(),
  account: TransferAccount$outboundSchema,
  bankAccount: BankAccount$outboundSchema.optional(),
  wallet: z.any().optional(),
  card: z.any().optional(),
  achDetails: ACHTransactionDetails$outboundSchema.optional(),
  applePay: z.any().optional(),
  cardDetails: CardTransactionDetails$outboundSchema.optional(),
  rtpDetails: RTPTransactionDetails$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferDestination$ {
  /** @deprecated use `TransferDestination$inboundSchema` instead. */
  export const inboundSchema = TransferDestination$inboundSchema;
  /** @deprecated use `TransferDestination$outboundSchema` instead. */
  export const outboundSchema = TransferDestination$outboundSchema;
  /** @deprecated use `TransferDestination$Outbound` instead. */
  export type Outbound = TransferDestination$Outbound;
}

export function transferDestinationToJSON(
  transferDestination: TransferDestination,
): string {
  return JSON.stringify(
    TransferDestination$outboundSchema.parse(transferDestination),
  );
}

export function transferDestinationFromJSON(
  jsonString: string,
): SafeParseResult<TransferDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferDestination' from JSON`,
  );
}
