/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PayoutRecipientError,
  PayoutRecipientError$inboundSchema,
  PayoutRecipientError$Outbound,
  PayoutRecipientError$outboundSchema,
} from "./payoutrecipienterror.js";

export type PayoutDetailsError = {
  allowedMethods?: string | undefined;
  recipient?: PayoutRecipientError | undefined;
};

/** @internal */
export const PayoutDetailsError$inboundSchema: z.ZodType<
  PayoutDetailsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowedMethods: z.string().optional(),
  recipient: PayoutRecipientError$inboundSchema.optional(),
});

/** @internal */
export type PayoutDetailsError$Outbound = {
  allowedMethods?: string | undefined;
  recipient?: PayoutRecipientError$Outbound | undefined;
};

/** @internal */
export const PayoutDetailsError$outboundSchema: z.ZodType<
  PayoutDetailsError$Outbound,
  z.ZodTypeDef,
  PayoutDetailsError
> = z.object({
  allowedMethods: z.string().optional(),
  recipient: PayoutRecipientError$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutDetailsError$ {
  /** @deprecated use `PayoutDetailsError$inboundSchema` instead. */
  export const inboundSchema = PayoutDetailsError$inboundSchema;
  /** @deprecated use `PayoutDetailsError$outboundSchema` instead. */
  export const outboundSchema = PayoutDetailsError$outboundSchema;
  /** @deprecated use `PayoutDetailsError$Outbound` instead. */
  export type Outbound = PayoutDetailsError$Outbound;
}

export function payoutDetailsErrorToJSON(
  payoutDetailsError: PayoutDetailsError,
): string {
  return JSON.stringify(
    PayoutDetailsError$outboundSchema.parse(payoutDetailsError),
  );
}

export function payoutDetailsErrorFromJSON(
  jsonString: string,
): SafeParseResult<PayoutDetailsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutDetailsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutDetailsError' from JSON`,
  );
}
