/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookDataPaymentMethodEnabled = {
  accountID: string;
  paymentMethodID: string;
  sourceID: string;
};

/** @internal */
export const WebhookDataPaymentMethodEnabled$inboundSchema: z.ZodType<
  WebhookDataPaymentMethodEnabled,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  paymentMethodID: z.string(),
  sourceID: z.string(),
});

/** @internal */
export type WebhookDataPaymentMethodEnabled$Outbound = {
  accountID: string;
  paymentMethodID: string;
  sourceID: string;
};

/** @internal */
export const WebhookDataPaymentMethodEnabled$outboundSchema: z.ZodType<
  WebhookDataPaymentMethodEnabled$Outbound,
  z.ZodTypeDef,
  WebhookDataPaymentMethodEnabled
> = z.object({
  accountID: z.string(),
  paymentMethodID: z.string(),
  sourceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataPaymentMethodEnabled$ {
  /** @deprecated use `WebhookDataPaymentMethodEnabled$inboundSchema` instead. */
  export const inboundSchema = WebhookDataPaymentMethodEnabled$inboundSchema;
  /** @deprecated use `WebhookDataPaymentMethodEnabled$outboundSchema` instead. */
  export const outboundSchema = WebhookDataPaymentMethodEnabled$outboundSchema;
  /** @deprecated use `WebhookDataPaymentMethodEnabled$Outbound` instead. */
  export type Outbound = WebhookDataPaymentMethodEnabled$Outbound;
}

export function webhookDataPaymentMethodEnabledToJSON(
  webhookDataPaymentMethodEnabled: WebhookDataPaymentMethodEnabled,
): string {
  return JSON.stringify(
    WebhookDataPaymentMethodEnabled$outboundSchema.parse(
      webhookDataPaymentMethodEnabled,
    ),
  );
}

export function webhookDataPaymentMethodEnabledFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataPaymentMethodEnabled, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataPaymentMethodEnabled$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataPaymentMethodEnabled' from JSON`,
  );
}
