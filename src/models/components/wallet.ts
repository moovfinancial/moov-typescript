/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WalletAvailableBalance,
  WalletAvailableBalance$inboundSchema,
  WalletAvailableBalance$Outbound,
  WalletAvailableBalance$outboundSchema,
} from "./walletavailablebalance.js";

/**
 * A Moov wallet to store funds for transfers.
 */
export type Wallet = {
  walletID: string;
  availableBalance: WalletAvailableBalance;
};

/** @internal */
export const Wallet$inboundSchema: z.ZodType<Wallet, z.ZodTypeDef, unknown> = z
  .object({
    walletID: z.string(),
    availableBalance: WalletAvailableBalance$inboundSchema,
  });

/** @internal */
export type Wallet$Outbound = {
  walletID: string;
  availableBalance: WalletAvailableBalance$Outbound;
};

/** @internal */
export const Wallet$outboundSchema: z.ZodType<
  Wallet$Outbound,
  z.ZodTypeDef,
  Wallet
> = z.object({
  walletID: z.string(),
  availableBalance: WalletAvailableBalance$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Wallet$ {
  /** @deprecated use `Wallet$inboundSchema` instead. */
  export const inboundSchema = Wallet$inboundSchema;
  /** @deprecated use `Wallet$outboundSchema` instead. */
  export const outboundSchema = Wallet$outboundSchema;
  /** @deprecated use `Wallet$Outbound` instead. */
  export type Outbound = Wallet$Outbound;
}

export function walletToJSON(wallet: Wallet): string {
  return JSON.stringify(Wallet$outboundSchema.parse(wallet));
}

export function walletFromJSON(
  jsonString: string,
): SafeParseResult<Wallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Wallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Wallet' from JSON`,
  );
}
