/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvidenceType,
  EvidenceType$inboundSchema,
  EvidenceType$outboundSchema,
} from "./evidencetype.js";

export type EvidenceText = {
  evidenceID: string;
  disputeID: string;
  evidenceType: EvidenceType;
  text: string;
  createdOn: Date;
};

/** @internal */
export const EvidenceText$inboundSchema: z.ZodType<
  EvidenceText,
  z.ZodTypeDef,
  unknown
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  evidenceType: EvidenceType$inboundSchema,
  text: z.string(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type EvidenceText$Outbound = {
  evidenceID: string;
  disputeID: string;
  evidenceType: string;
  text: string;
  createdOn: string;
};

/** @internal */
export const EvidenceText$outboundSchema: z.ZodType<
  EvidenceText$Outbound,
  z.ZodTypeDef,
  EvidenceText
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  evidenceType: EvidenceType$outboundSchema,
  text: z.string(),
  createdOn: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvidenceText$ {
  /** @deprecated use `EvidenceText$inboundSchema` instead. */
  export const inboundSchema = EvidenceText$inboundSchema;
  /** @deprecated use `EvidenceText$outboundSchema` instead. */
  export const outboundSchema = EvidenceText$outboundSchema;
  /** @deprecated use `EvidenceText$Outbound` instead. */
  export type Outbound = EvidenceText$Outbound;
}

export function evidenceTextToJSON(evidenceText: EvidenceText): string {
  return JSON.stringify(EvidenceText$outboundSchema.parse(evidenceText));
}

export function evidenceTextFromJSON(
  jsonString: string,
): SafeParseResult<EvidenceText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvidenceText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvidenceText' from JSON`,
  );
}
