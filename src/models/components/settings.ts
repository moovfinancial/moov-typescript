/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ACHPaymentSettings,
  ACHPaymentSettings$inboundSchema,
  ACHPaymentSettings$Outbound,
  ACHPaymentSettings$outboundSchema,
} from "./achpaymentsettings.js";
import {
  CardPaymentSettings,
  CardPaymentSettings$inboundSchema,
  CardPaymentSettings$Outbound,
  CardPaymentSettings$outboundSchema,
} from "./cardpaymentsettings.js";

/**
 * User provided settings to manage an account.
 */
export type Settings = {
  /**
   * User provided settings to manage card payments. This data is only allowed on a business account.
   */
  cardPayment?: CardPaymentSettings | undefined;
  achPayment?: ACHPaymentSettings | undefined;
};

/** @internal */
export const Settings$inboundSchema: z.ZodType<
  Settings,
  z.ZodTypeDef,
  unknown
> = z.object({
  cardPayment: CardPaymentSettings$inboundSchema.optional(),
  achPayment: ACHPaymentSettings$inboundSchema.optional(),
});

/** @internal */
export type Settings$Outbound = {
  cardPayment?: CardPaymentSettings$Outbound | undefined;
  achPayment?: ACHPaymentSettings$Outbound | undefined;
};

/** @internal */
export const Settings$outboundSchema: z.ZodType<
  Settings$Outbound,
  z.ZodTypeDef,
  Settings
> = z.object({
  cardPayment: CardPaymentSettings$outboundSchema.optional(),
  achPayment: ACHPaymentSettings$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settings$ {
  /** @deprecated use `Settings$inboundSchema` instead. */
  export const inboundSchema = Settings$inboundSchema;
  /** @deprecated use `Settings$outboundSchema` instead. */
  export const outboundSchema = Settings$outboundSchema;
  /** @deprecated use `Settings$Outbound` instead. */
  export type Outbound = Settings$Outbound;
}

export function settingsToJSON(settings: Settings): string {
  return JSON.stringify(Settings$outboundSchema.parse(settings));
}

export function settingsFromJSON(
  jsonString: string,
): SafeParseResult<Settings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Settings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Settings' from JSON`,
  );
}
