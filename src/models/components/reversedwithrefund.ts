/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardAcquiringRefund,
  CardAcquiringRefund$inboundSchema,
  CardAcquiringRefund$Outbound,
  CardAcquiringRefund$outboundSchema,
} from "./cardacquiringrefund.js";

export type ReversedWithRefund = {
  /**
   * Details of a card refund.
   */
  refund: CardAcquiringRefund;
};

/** @internal */
export const ReversedWithRefund$inboundSchema: z.ZodType<
  ReversedWithRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  refund: CardAcquiringRefund$inboundSchema,
});

/** @internal */
export type ReversedWithRefund$Outbound = {
  refund: CardAcquiringRefund$Outbound;
};

/** @internal */
export const ReversedWithRefund$outboundSchema: z.ZodType<
  ReversedWithRefund$Outbound,
  z.ZodTypeDef,
  ReversedWithRefund
> = z.object({
  refund: CardAcquiringRefund$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReversedWithRefund$ {
  /** @deprecated use `ReversedWithRefund$inboundSchema` instead. */
  export const inboundSchema = ReversedWithRefund$inboundSchema;
  /** @deprecated use `ReversedWithRefund$outboundSchema` instead. */
  export const outboundSchema = ReversedWithRefund$outboundSchema;
  /** @deprecated use `ReversedWithRefund$Outbound` instead. */
  export type Outbound = ReversedWithRefund$Outbound;
}

export function reversedWithRefundToJSON(
  reversedWithRefund: ReversedWithRefund,
): string {
  return JSON.stringify(
    ReversedWithRefund$outboundSchema.parse(reversedWithRefund),
  );
}

export function reversedWithRefundFromJSON(
  jsonString: string,
): SafeParseResult<ReversedWithRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReversedWithRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReversedWithRefund' from JSON`,
  );
}
