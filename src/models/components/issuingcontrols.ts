/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IssuingVelocityLimit,
  IssuingVelocityLimit$inboundSchema,
  IssuingVelocityLimit$Outbound,
  IssuingVelocityLimit$outboundSchema,
} from "./issuingvelocitylimit.js";

export type IssuingControls = {
  /**
   * Indicates if the card is single-use. If true, the card closes after the first authorization.
   */
  singleUse?: boolean | undefined;
  /**
   * Sets the spending limit per time interval. Only one limit per interval is supported.
   */
  velocityLimits?: Array<IssuingVelocityLimit> | undefined;
};

/** @internal */
export const IssuingControls$inboundSchema: z.ZodType<
  IssuingControls,
  z.ZodTypeDef,
  unknown
> = z.object({
  singleUse: z.boolean().optional(),
  velocityLimits: z.array(IssuingVelocityLimit$inboundSchema).optional(),
});

/** @internal */
export type IssuingControls$Outbound = {
  singleUse?: boolean | undefined;
  velocityLimits?: Array<IssuingVelocityLimit$Outbound> | undefined;
};

/** @internal */
export const IssuingControls$outboundSchema: z.ZodType<
  IssuingControls$Outbound,
  z.ZodTypeDef,
  IssuingControls
> = z.object({
  singleUse: z.boolean().optional(),
  velocityLimits: z.array(IssuingVelocityLimit$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssuingControls$ {
  /** @deprecated use `IssuingControls$inboundSchema` instead. */
  export const inboundSchema = IssuingControls$inboundSchema;
  /** @deprecated use `IssuingControls$outboundSchema` instead. */
  export const outboundSchema = IssuingControls$outboundSchema;
  /** @deprecated use `IssuingControls$Outbound` instead. */
  export type Outbound = IssuingControls$Outbound;
}

export function issuingControlsToJSON(
  issuingControls: IssuingControls,
): string {
  return JSON.stringify(IssuingControls$outboundSchema.parse(issuingControls));
}

export function issuingControlsFromJSON(
  jsonString: string,
): SafeParseResult<IssuingControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IssuingControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IssuingControls' from JSON`,
  );
}
