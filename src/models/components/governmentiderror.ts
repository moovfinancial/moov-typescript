/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Ssn = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

export type Itin = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

export type GovernmentIDError = {
  ssn?: Ssn | undefined;
  itin?: Itin | undefined;
};

/** @internal */
export const Ssn$inboundSchema: z.ZodType<Ssn, z.ZodTypeDef, unknown> = z
  .object({
    full: z.string().optional(),
    lastFour: z.string().optional(),
  });

/** @internal */
export type Ssn$Outbound = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

/** @internal */
export const Ssn$outboundSchema: z.ZodType<Ssn$Outbound, z.ZodTypeDef, Ssn> = z
  .object({
    full: z.string().optional(),
    lastFour: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ssn$ {
  /** @deprecated use `Ssn$inboundSchema` instead. */
  export const inboundSchema = Ssn$inboundSchema;
  /** @deprecated use `Ssn$outboundSchema` instead. */
  export const outboundSchema = Ssn$outboundSchema;
  /** @deprecated use `Ssn$Outbound` instead. */
  export type Outbound = Ssn$Outbound;
}

export function ssnToJSON(ssn: Ssn): string {
  return JSON.stringify(Ssn$outboundSchema.parse(ssn));
}

export function ssnFromJSON(
  jsonString: string,
): SafeParseResult<Ssn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ssn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ssn' from JSON`,
  );
}

/** @internal */
export const Itin$inboundSchema: z.ZodType<Itin, z.ZodTypeDef, unknown> = z
  .object({
    full: z.string().optional(),
    lastFour: z.string().optional(),
  });

/** @internal */
export type Itin$Outbound = {
  full?: string | undefined;
  lastFour?: string | undefined;
};

/** @internal */
export const Itin$outboundSchema: z.ZodType<Itin$Outbound, z.ZodTypeDef, Itin> =
  z.object({
    full: z.string().optional(),
    lastFour: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Itin$ {
  /** @deprecated use `Itin$inboundSchema` instead. */
  export const inboundSchema = Itin$inboundSchema;
  /** @deprecated use `Itin$outboundSchema` instead. */
  export const outboundSchema = Itin$outboundSchema;
  /** @deprecated use `Itin$Outbound` instead. */
  export type Outbound = Itin$Outbound;
}

export function itinToJSON(itin: Itin): string {
  return JSON.stringify(Itin$outboundSchema.parse(itin));
}

export function itinFromJSON(
  jsonString: string,
): SafeParseResult<Itin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Itin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Itin' from JSON`,
  );
}

/** @internal */
export const GovernmentIDError$inboundSchema: z.ZodType<
  GovernmentIDError,
  z.ZodTypeDef,
  unknown
> = z.object({
  ssn: z.lazy(() => Ssn$inboundSchema).optional(),
  itin: z.lazy(() => Itin$inboundSchema).optional(),
});

/** @internal */
export type GovernmentIDError$Outbound = {
  ssn?: Ssn$Outbound | undefined;
  itin?: Itin$Outbound | undefined;
};

/** @internal */
export const GovernmentIDError$outboundSchema: z.ZodType<
  GovernmentIDError$Outbound,
  z.ZodTypeDef,
  GovernmentIDError
> = z.object({
  ssn: z.lazy(() => Ssn$outboundSchema).optional(),
  itin: z.lazy(() => Itin$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GovernmentIDError$ {
  /** @deprecated use `GovernmentIDError$inboundSchema` instead. */
  export const inboundSchema = GovernmentIDError$inboundSchema;
  /** @deprecated use `GovernmentIDError$outboundSchema` instead. */
  export const outboundSchema = GovernmentIDError$outboundSchema;
  /** @deprecated use `GovernmentIDError$Outbound` instead. */
  export type Outbound = GovernmentIDError$Outbound;
}

export function governmentIDErrorToJSON(
  governmentIDError: GovernmentIDError,
): string {
  return JSON.stringify(
    GovernmentIDError$outboundSchema.parse(governmentIDError),
  );
}

export function governmentIDErrorFromJSON(
  jsonString: string,
): SafeParseResult<GovernmentIDError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GovernmentIDError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GovernmentIDError' from JSON`,
  );
}
