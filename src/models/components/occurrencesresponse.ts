/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  OccurrenceStatus,
  OccurrenceStatus$inboundSchema,
  OccurrenceStatus$outboundSchema,
} from "./occurrencestatus.js";
import {
  RunTransfer,
  RunTransfer$inboundSchema,
  RunTransfer$Outbound,
  RunTransfer$outboundSchema,
} from "./runtransfer.js";

/**
 * Contains details on why the occurrence errored.
 */
export type ErrorT = {
  message?: string | undefined;
};

export type OccurrencesResponse = {
  scheduleID?: string | undefined;
  occurrenceID?: string | undefined;
  /**
   * Sandbox or production account mode of this schedule.
   */
  mode?: Mode | undefined;
  /**
   * True if this was generated by a RRule.
   */
  generated?: boolean | undefined;
  /**
   * True if the RRule set runs indefinitely.
   */
  indefinite?: boolean | undefined;
  canceledOn?: Date | undefined;
  runOn: Date;
  /**
   * Defines the attributes of a transfer.
   */
  runTransfer: RunTransfer;
  ranOn?: Date | undefined;
  ranTransferID?: string | undefined;
  /**
   * Status of the completed occurrence.
   */
  status?: OccurrenceStatus | undefined;
  /**
   * Contains details on why the occurrence errored.
   */
  error?: ErrorT | undefined;
};

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    message: z.string().optional(),
  });

/** @internal */
export type ErrorT$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const OccurrencesResponse$inboundSchema: z.ZodType<
  OccurrencesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  scheduleID: z.string().optional(),
  occurrenceID: z.string().optional(),
  mode: Mode$inboundSchema.optional(),
  generated: z.boolean().optional(),
  indefinite: z.boolean().optional(),
  canceledOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  runOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  runTransfer: RunTransfer$inboundSchema,
  ranOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ranTransferID: z.string().optional(),
  status: OccurrenceStatus$inboundSchema.optional(),
  error: z.lazy(() => ErrorT$inboundSchema).optional(),
});

/** @internal */
export type OccurrencesResponse$Outbound = {
  scheduleID?: string | undefined;
  occurrenceID?: string | undefined;
  mode?: string | undefined;
  generated?: boolean | undefined;
  indefinite?: boolean | undefined;
  canceledOn?: string | undefined;
  runOn: string;
  runTransfer: RunTransfer$Outbound;
  ranOn?: string | undefined;
  ranTransferID?: string | undefined;
  status?: string | undefined;
  error?: ErrorT$Outbound | undefined;
};

/** @internal */
export const OccurrencesResponse$outboundSchema: z.ZodType<
  OccurrencesResponse$Outbound,
  z.ZodTypeDef,
  OccurrencesResponse
> = z.object({
  scheduleID: z.string().optional(),
  occurrenceID: z.string().optional(),
  mode: Mode$outboundSchema.optional(),
  generated: z.boolean().optional(),
  indefinite: z.boolean().optional(),
  canceledOn: z.date().transform(v => v.toISOString()).optional(),
  runOn: z.date().transform(v => v.toISOString()),
  runTransfer: RunTransfer$outboundSchema,
  ranOn: z.date().transform(v => v.toISOString()).optional(),
  ranTransferID: z.string().optional(),
  status: OccurrenceStatus$outboundSchema.optional(),
  error: z.lazy(() => ErrorT$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OccurrencesResponse$ {
  /** @deprecated use `OccurrencesResponse$inboundSchema` instead. */
  export const inboundSchema = OccurrencesResponse$inboundSchema;
  /** @deprecated use `OccurrencesResponse$outboundSchema` instead. */
  export const outboundSchema = OccurrencesResponse$outboundSchema;
  /** @deprecated use `OccurrencesResponse$Outbound` instead. */
  export type Outbound = OccurrencesResponse$Outbound;
}

export function occurrencesResponseToJSON(
  occurrencesResponse: OccurrencesResponse,
): string {
  return JSON.stringify(
    OccurrencesResponse$outboundSchema.parse(occurrencesResponse),
  );
}

export function occurrencesResponseFromJSON(
  jsonString: string,
): SafeParseResult<OccurrencesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OccurrencesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OccurrencesResponse' from JSON`,
  );
}
