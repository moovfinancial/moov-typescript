/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RTPFailureCode,
  RTPFailureCode$inboundSchema,
  RTPFailureCode$outboundSchema,
} from "./rtpfailurecode.js";
import {
  RTPTransactionStatus,
  RTPTransactionStatus$inboundSchema,
  RTPTransactionStatus$outboundSchema,
} from "./rtptransactionstatus.js";

/**
 * RTP specific details about the transaction.
 */
export type RTPTransactionDetails = {
  /**
   * Status of a transaction within the RTP lifecycle.
   */
  status: RTPTransactionStatus;
  /**
   * Response code returned by network on failure.
   */
  networkResponseCode?: string | undefined;
  /**
   * Status codes for RTP failures.
   */
  failureCode?: RTPFailureCode | undefined;
  initiatedOn?: Date | undefined;
  completedOn?: Date | undefined;
  failedOn?: Date | undefined;
  acceptedWithoutPostingOn?: Date | undefined;
};

/** @internal */
export const RTPTransactionDetails$inboundSchema: z.ZodType<
  RTPTransactionDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: RTPTransactionStatus$inboundSchema,
  networkResponseCode: z.string().optional(),
  failureCode: RTPFailureCode$inboundSchema.optional(),
  initiatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  failedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  acceptedWithoutPostingOn: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
});

/** @internal */
export type RTPTransactionDetails$Outbound = {
  status: string;
  networkResponseCode?: string | undefined;
  failureCode?: string | undefined;
  initiatedOn?: string | undefined;
  completedOn?: string | undefined;
  failedOn?: string | undefined;
  acceptedWithoutPostingOn?: string | undefined;
};

/** @internal */
export const RTPTransactionDetails$outboundSchema: z.ZodType<
  RTPTransactionDetails$Outbound,
  z.ZodTypeDef,
  RTPTransactionDetails
> = z.object({
  status: RTPTransactionStatus$outboundSchema,
  networkResponseCode: z.string().optional(),
  failureCode: RTPFailureCode$outboundSchema.optional(),
  initiatedOn: z.date().transform(v => v.toISOString()).optional(),
  completedOn: z.date().transform(v => v.toISOString()).optional(),
  failedOn: z.date().transform(v => v.toISOString()).optional(),
  acceptedWithoutPostingOn: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RTPTransactionDetails$ {
  /** @deprecated use `RTPTransactionDetails$inboundSchema` instead. */
  export const inboundSchema = RTPTransactionDetails$inboundSchema;
  /** @deprecated use `RTPTransactionDetails$outboundSchema` instead. */
  export const outboundSchema = RTPTransactionDetails$outboundSchema;
  /** @deprecated use `RTPTransactionDetails$Outbound` instead. */
  export type Outbound = RTPTransactionDetails$Outbound;
}

export function rtpTransactionDetailsToJSON(
  rtpTransactionDetails: RTPTransactionDetails,
): string {
  return JSON.stringify(
    RTPTransactionDetails$outboundSchema.parse(rtpTransactionDetails),
  );
}

export function rtpTransactionDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RTPTransactionDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RTPTransactionDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RTPTransactionDetails' from JSON`,
  );
}
