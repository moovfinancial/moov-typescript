/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  CreateTransferDestination,
  CreateTransferDestination$inboundSchema,
  CreateTransferDestination$Outbound,
  CreateTransferDestination$outboundSchema,
} from "./createtransferdestination.js";
import {
  CreateTransferSource,
  CreateTransferSource$inboundSchema,
  CreateTransferSource$Outbound,
  CreateTransferSource$outboundSchema,
} from "./createtransfersource.js";
import {
  FacilitatorFee,
  FacilitatorFee$inboundSchema,
  FacilitatorFee$Outbound,
  FacilitatorFee$outboundSchema,
} from "./facilitatorfee.js";

export type CreateTransfer = {
  /**
   * Where funds for a transfer originate. For the source, you must include either a `paymentMethodID` or a `transferID`.
   */
  source: CreateTransferSource;
  /**
   * The final stage of a transfer and the ultimate recipient of the funds.
   */
  destination: CreateTransferDestination;
  amount: Amount;
  /**
   * Total or markup fee.
   */
  facilitatorFee?: FacilitatorFee | undefined;
  /**
   * An optional description of the transfer that is used on receipts and for your own internal use.
   */
  description?: string | undefined;
  /**
   * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
   */
  metadata?: { [k: string]: string } | undefined;
  /**
   * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and represents the total amount charged.
   */
  salesTaxAmount?: Amount | undefined;
  /**
   * Optional alias from a foreign/external system which can be used to reference this resource.
   */
  foreignID?: string | undefined;
};

/** @internal */
export const CreateTransfer$inboundSchema: z.ZodType<
  CreateTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: CreateTransferSource$inboundSchema,
  destination: CreateTransferDestination$inboundSchema,
  amount: Amount$inboundSchema,
  facilitatorFee: FacilitatorFee$inboundSchema.optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  salesTaxAmount: Amount$inboundSchema.optional(),
  foreignID: z.string().optional(),
});

/** @internal */
export type CreateTransfer$Outbound = {
  source: CreateTransferSource$Outbound;
  destination: CreateTransferDestination$Outbound;
  amount: Amount$Outbound;
  facilitatorFee?: FacilitatorFee$Outbound | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  salesTaxAmount?: Amount$Outbound | undefined;
  foreignID?: string | undefined;
};

/** @internal */
export const CreateTransfer$outboundSchema: z.ZodType<
  CreateTransfer$Outbound,
  z.ZodTypeDef,
  CreateTransfer
> = z.object({
  source: CreateTransferSource$outboundSchema,
  destination: CreateTransferDestination$outboundSchema,
  amount: Amount$outboundSchema,
  facilitatorFee: FacilitatorFee$outboundSchema.optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  salesTaxAmount: Amount$outboundSchema.optional(),
  foreignID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransfer$ {
  /** @deprecated use `CreateTransfer$inboundSchema` instead. */
  export const inboundSchema = CreateTransfer$inboundSchema;
  /** @deprecated use `CreateTransfer$outboundSchema` instead. */
  export const outboundSchema = CreateTransfer$outboundSchema;
  /** @deprecated use `CreateTransfer$Outbound` instead. */
  export type Outbound = CreateTransfer$Outbound;
}

export function createTransferToJSON(createTransfer: CreateTransfer): string {
  return JSON.stringify(CreateTransfer$outboundSchema.parse(createTransfer));
}

export function createTransferFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransfer' from JSON`,
  );
}
