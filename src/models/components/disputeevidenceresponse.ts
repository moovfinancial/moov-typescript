/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvidenceType,
  EvidenceType$inboundSchema,
  EvidenceType$outboundSchema,
} from "./evidencetype.js";

export type DisputeEvidenceResponse = {
  evidenceID: string;
  disputeID: string;
  evidenceType: EvidenceType;
  /**
   * For text evidence, the text submitted as evidence.
   */
  text?: string | undefined;
  /**
   * For file evidence, the MIME type of the file.
   */
  mimeType?: string | undefined;
  /**
   * For file evidence, the name of the file.
   */
  filename?: string | undefined;
  /**
   * For file evidence, the size of the file.
   */
  size?: number | undefined;
  createdOn: Date;
  updatedOn: Date;
  /**
   * When the evidence was submitted for review.
   */
  submittedOn?: Date | undefined;
};

/** @internal */
export const DisputeEvidenceResponse$inboundSchema: z.ZodType<
  DisputeEvidenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  evidenceType: EvidenceType$inboundSchema,
  text: z.string().optional(),
  mimeType: z.string().optional(),
  filename: z.string().optional(),
  size: z.number().int().optional(),
  createdOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedOn: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  submittedOn: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type DisputeEvidenceResponse$Outbound = {
  evidenceID: string;
  disputeID: string;
  evidenceType: string;
  text?: string | undefined;
  mimeType?: string | undefined;
  filename?: string | undefined;
  size?: number | undefined;
  createdOn: string;
  updatedOn: string;
  submittedOn?: string | undefined;
};

/** @internal */
export const DisputeEvidenceResponse$outboundSchema: z.ZodType<
  DisputeEvidenceResponse$Outbound,
  z.ZodTypeDef,
  DisputeEvidenceResponse
> = z.object({
  evidenceID: z.string(),
  disputeID: z.string(),
  evidenceType: EvidenceType$outboundSchema,
  text: z.string().optional(),
  mimeType: z.string().optional(),
  filename: z.string().optional(),
  size: z.number().int().optional(),
  createdOn: z.date().transform(v => v.toISOString()),
  updatedOn: z.date().transform(v => v.toISOString()),
  submittedOn: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisputeEvidenceResponse$ {
  /** @deprecated use `DisputeEvidenceResponse$inboundSchema` instead. */
  export const inboundSchema = DisputeEvidenceResponse$inboundSchema;
  /** @deprecated use `DisputeEvidenceResponse$outboundSchema` instead. */
  export const outboundSchema = DisputeEvidenceResponse$outboundSchema;
  /** @deprecated use `DisputeEvidenceResponse$Outbound` instead. */
  export type Outbound = DisputeEvidenceResponse$Outbound;
}

export function disputeEvidenceResponseToJSON(
  disputeEvidenceResponse: DisputeEvidenceResponse,
): string {
  return JSON.stringify(
    DisputeEvidenceResponse$outboundSchema.parse(disputeEvidenceResponse),
  );
}

export function disputeEvidenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<DisputeEvidenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisputeEvidenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisputeEvidenceResponse' from JSON`,
  );
}
