/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type End2EndEncryptionError = {
  token?: string | undefined;
};

/** @internal */
export const End2EndEncryptionError$inboundSchema: z.ZodType<
  End2EndEncryptionError,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
});

/** @internal */
export type End2EndEncryptionError$Outbound = {
  token?: string | undefined;
};

/** @internal */
export const End2EndEncryptionError$outboundSchema: z.ZodType<
  End2EndEncryptionError$Outbound,
  z.ZodTypeDef,
  End2EndEncryptionError
> = z.object({
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace End2EndEncryptionError$ {
  /** @deprecated use `End2EndEncryptionError$inboundSchema` instead. */
  export const inboundSchema = End2EndEncryptionError$inboundSchema;
  /** @deprecated use `End2EndEncryptionError$outboundSchema` instead. */
  export const outboundSchema = End2EndEncryptionError$outboundSchema;
  /** @deprecated use `End2EndEncryptionError$Outbound` instead. */
  export type Outbound = End2EndEncryptionError$Outbound;
}

export function end2EndEncryptionErrorToJSON(
  end2EndEncryptionError: End2EndEncryptionError,
): string {
  return JSON.stringify(
    End2EndEncryptionError$outboundSchema.parse(end2EndEncryptionError),
  );
}

export function end2EndEncryptionErrorFromJSON(
  jsonString: string,
): SafeParseResult<End2EndEncryptionError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => End2EndEncryptionError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'End2EndEncryptionError' from JSON`,
  );
}
