/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingCountAndAmount,
  BillingCountAndAmount$inboundSchema,
  BillingCountAndAmount$Outbound,
  BillingCountAndAmount$outboundSchema,
} from "./billingcountandamount.js";

/**
 * A detailed breakdown of instant payment fees.
 */
export type InstantPaymentFees = {
  /**
   * Fees for RTP credit transactions.
   */
  rtpCreditTransaction: BillingCountAndAmount;
  /**
   * Fees for RTP declines.
   */
  rtpDecline?: BillingCountAndAmount | undefined;
  /**
   * Fees for push-to-card transactions.
   */
  pushToCardTransaction: BillingCountAndAmount;
  /**
   * Fees for push-to-card declines.
   */
  pushToCardDecline?: BillingCountAndAmount | undefined;
  /**
   * Fees for pull-from-card transactions.
   */
  pullFromCardTransaction: BillingCountAndAmount;
  /**
   * Fees for pull-from-card declines.
   */
  pullFromCardDecline?: BillingCountAndAmount | undefined;
  /**
   * Fees for pull-from-card refunds.
   */
  pullFromCardRefund?: BillingCountAndAmount | undefined;
  /**
   * Total instant payment fees.
   */
  total: BillingCountAndAmount;
};

/** @internal */
export const InstantPaymentFees$inboundSchema: z.ZodType<
  InstantPaymentFees,
  z.ZodTypeDef,
  unknown
> = z.object({
  rtpCreditTransaction: BillingCountAndAmount$inboundSchema,
  rtpDecline: BillingCountAndAmount$inboundSchema.optional(),
  pushToCardTransaction: BillingCountAndAmount$inboundSchema,
  pushToCardDecline: BillingCountAndAmount$inboundSchema.optional(),
  pullFromCardTransaction: BillingCountAndAmount$inboundSchema,
  pullFromCardDecline: BillingCountAndAmount$inboundSchema.optional(),
  pullFromCardRefund: BillingCountAndAmount$inboundSchema.optional(),
  total: BillingCountAndAmount$inboundSchema,
});

/** @internal */
export type InstantPaymentFees$Outbound = {
  rtpCreditTransaction: BillingCountAndAmount$Outbound;
  rtpDecline?: BillingCountAndAmount$Outbound | undefined;
  pushToCardTransaction: BillingCountAndAmount$Outbound;
  pushToCardDecline?: BillingCountAndAmount$Outbound | undefined;
  pullFromCardTransaction: BillingCountAndAmount$Outbound;
  pullFromCardDecline?: BillingCountAndAmount$Outbound | undefined;
  pullFromCardRefund?: BillingCountAndAmount$Outbound | undefined;
  total: BillingCountAndAmount$Outbound;
};

/** @internal */
export const InstantPaymentFees$outboundSchema: z.ZodType<
  InstantPaymentFees$Outbound,
  z.ZodTypeDef,
  InstantPaymentFees
> = z.object({
  rtpCreditTransaction: BillingCountAndAmount$outboundSchema,
  rtpDecline: BillingCountAndAmount$outboundSchema.optional(),
  pushToCardTransaction: BillingCountAndAmount$outboundSchema,
  pushToCardDecline: BillingCountAndAmount$outboundSchema.optional(),
  pullFromCardTransaction: BillingCountAndAmount$outboundSchema,
  pullFromCardDecline: BillingCountAndAmount$outboundSchema.optional(),
  pullFromCardRefund: BillingCountAndAmount$outboundSchema.optional(),
  total: BillingCountAndAmount$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstantPaymentFees$ {
  /** @deprecated use `InstantPaymentFees$inboundSchema` instead. */
  export const inboundSchema = InstantPaymentFees$inboundSchema;
  /** @deprecated use `InstantPaymentFees$outboundSchema` instead. */
  export const outboundSchema = InstantPaymentFees$outboundSchema;
  /** @deprecated use `InstantPaymentFees$Outbound` instead. */
  export type Outbound = InstantPaymentFees$Outbound;
}

export function instantPaymentFeesToJSON(
  instantPaymentFees: InstantPaymentFees,
): string {
  return JSON.stringify(
    InstantPaymentFees$outboundSchema.parse(instantPaymentFees),
  );
}

export function instantPaymentFeesFromJSON(
  jsonString: string,
): SafeParseResult<InstantPaymentFees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstantPaymentFees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstantPaymentFees' from JSON`,
  );
}
