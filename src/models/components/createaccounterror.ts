/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateAccountSettings,
  CreateAccountSettings$inboundSchema,
  CreateAccountSettings$Outbound,
  CreateAccountSettings$outboundSchema,
} from "./createaccountsettings.js";
import {
  CreateProfileError,
  CreateProfileError$inboundSchema,
  CreateProfileError$Outbound,
  CreateProfileError$outboundSchema,
} from "./createprofileerror.js";
import {
  CustomerSupportError,
  CustomerSupportError$inboundSchema,
  CustomerSupportError$Outbound,
  CustomerSupportError$outboundSchema,
} from "./customersupporterror.js";
import {
  TermsOfServiceError,
  TermsOfServiceError$inboundSchema,
  TermsOfServiceError$Outbound,
  TermsOfServiceError$outboundSchema,
} from "./termsofserviceerror.js";

export type CreateAccountError = {
  accountType?: string | undefined;
  profile?: CreateProfileError | undefined;
  metadata?: string | undefined;
  termsOfService?: TermsOfServiceError | undefined;
  foreignID?: string | undefined;
  customerSupport?: CustomerSupportError | undefined;
  settings?: CreateAccountSettings | undefined;
  capabilities?: { [k: string]: string } | undefined;
};

/** @internal */
export const CreateAccountError$inboundSchema: z.ZodType<
  CreateAccountError,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountType: z.string().optional(),
  profile: CreateProfileError$inboundSchema.optional(),
  metadata: z.string().optional(),
  termsOfService: TermsOfServiceError$inboundSchema.optional(),
  foreignID: z.string().optional(),
  customerSupport: CustomerSupportError$inboundSchema.optional(),
  settings: CreateAccountSettings$inboundSchema.optional(),
  capabilities: z.record(z.string()).optional(),
});

/** @internal */
export type CreateAccountError$Outbound = {
  accountType?: string | undefined;
  profile?: CreateProfileError$Outbound | undefined;
  metadata?: string | undefined;
  termsOfService?: TermsOfServiceError$Outbound | undefined;
  foreignID?: string | undefined;
  customerSupport?: CustomerSupportError$Outbound | undefined;
  settings?: CreateAccountSettings$Outbound | undefined;
  capabilities?: { [k: string]: string } | undefined;
};

/** @internal */
export const CreateAccountError$outboundSchema: z.ZodType<
  CreateAccountError$Outbound,
  z.ZodTypeDef,
  CreateAccountError
> = z.object({
  accountType: z.string().optional(),
  profile: CreateProfileError$outboundSchema.optional(),
  metadata: z.string().optional(),
  termsOfService: TermsOfServiceError$outboundSchema.optional(),
  foreignID: z.string().optional(),
  customerSupport: CustomerSupportError$outboundSchema.optional(),
  settings: CreateAccountSettings$outboundSchema.optional(),
  capabilities: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountError$ {
  /** @deprecated use `CreateAccountError$inboundSchema` instead. */
  export const inboundSchema = CreateAccountError$inboundSchema;
  /** @deprecated use `CreateAccountError$outboundSchema` instead. */
  export const outboundSchema = CreateAccountError$outboundSchema;
  /** @deprecated use `CreateAccountError$Outbound` instead. */
  export type Outbound = CreateAccountError$Outbound;
}

export function createAccountErrorToJSON(
  createAccountError: CreateAccountError,
): string {
  return JSON.stringify(
    CreateAccountError$outboundSchema.parse(createAccountError),
  );
}

export function createAccountErrorFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountError' from JSON`,
  );
}
