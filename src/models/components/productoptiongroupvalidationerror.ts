/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductOptionValidationError,
  ProductOptionValidationError$inboundSchema,
  ProductOptionValidationError$Outbound,
  ProductOptionValidationError$outboundSchema,
} from "./productoptionvalidationerror.js";

export type ProductOptionGroupValidationError = {
  name?: string | undefined;
  description?: string | undefined;
  minSelect?: string | undefined;
  maxSelect?: string | undefined;
  options?: { [k: string]: ProductOptionValidationError } | undefined;
};

/** @internal */
export const ProductOptionGroupValidationError$inboundSchema: z.ZodType<
  ProductOptionGroupValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  minSelect: z.string().optional(),
  maxSelect: z.string().optional(),
  options: z.record(ProductOptionValidationError$inboundSchema).optional(),
});

/** @internal */
export type ProductOptionGroupValidationError$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  minSelect?: string | undefined;
  maxSelect?: string | undefined;
  options?: { [k: string]: ProductOptionValidationError$Outbound } | undefined;
};

/** @internal */
export const ProductOptionGroupValidationError$outboundSchema: z.ZodType<
  ProductOptionGroupValidationError$Outbound,
  z.ZodTypeDef,
  ProductOptionGroupValidationError
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  minSelect: z.string().optional(),
  maxSelect: z.string().optional(),
  options: z.record(ProductOptionValidationError$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductOptionGroupValidationError$ {
  /** @deprecated use `ProductOptionGroupValidationError$inboundSchema` instead. */
  export const inboundSchema = ProductOptionGroupValidationError$inboundSchema;
  /** @deprecated use `ProductOptionGroupValidationError$outboundSchema` instead. */
  export const outboundSchema =
    ProductOptionGroupValidationError$outboundSchema;
  /** @deprecated use `ProductOptionGroupValidationError$Outbound` instead. */
  export type Outbound = ProductOptionGroupValidationError$Outbound;
}

export function productOptionGroupValidationErrorToJSON(
  productOptionGroupValidationError: ProductOptionGroupValidationError,
): string {
  return JSON.stringify(
    ProductOptionGroupValidationError$outboundSchema.parse(
      productOptionGroupValidationError,
    ),
  );
}

export function productOptionGroupValidationErrorFromJSON(
  jsonString: string,
): SafeParseResult<ProductOptionGroupValidationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductOptionGroupValidationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductOptionGroupValidationError' from JSON`,
  );
}
