/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ACHReturnCode,
  ACHReturnCode$inboundSchema,
  ACHReturnCode$outboundSchema,
} from "./achreturncode.js";
import {
  RTPRejectionCode,
  RTPRejectionCode$inboundSchema,
  RTPRejectionCode$outboundSchema,
} from "./rtprejectioncode.js";

/**
 * Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
 */
export type BankAccountException = {
  /**
   * The return code of an ACH transaction that caused the bank account status to change.
   *
   * @remarks
   *
   * - R02: Account Closed
   * - R03: No Account/Unable to Locate Account
   * - R04: Invalid Account Number
   * - R05: Improper Debit to Consumer Account
   * - R07: Authorization Revoked by Customer
   * - R08: Payment Stopped
   * - R10: Customer Advises Originator is Not Known or Authorized to Receiver
   * - R11: Customer Advises Entry Not in Accordance with the Terms of the Authorization
   * - R12: Branch Sold to Another DFI
   * - R13: RDFI not qualified to participate
   * - R14: Representative payee deceased or unable to continue in that capacity
   * - R15: Beneficiary or bank account holder
   * - R16: Bank account frozen
   * - R17: Entry with Invalid Account Number Initiated Under Questionable Circumstances
   * - R20: Non-payment bank account
   * - R23: Credit entry refused by receiver
   * - R29: Corporate customer advises not authorized
   * - R34: Limited participation RDFI
   * - R38: Stop Payment on Source Document (Adjustment Entry)
   * - R39: Improper Source Document
   */
  achReturnCode?: ACHReturnCode | undefined;
  /**
   * The rejection code of an RTP transaction that caused the bank account status to change.
   *
   * @remarks
   *
   * - AC03: Account Invalid
   * - AC04: Account Closed
   * - AC06: Account Blocked
   * - AC14: Creditor Account Type Invalid
   * - AG01: Transactions Forbidden On Account
   * - AG03: Transaction Type Not Supported
   * - MD07: Customer Deceased
   */
  rtpRejectionCode?: RTPRejectionCode | undefined;
  /**
   * Details related to an `errored` or `verificationFailed` bank account status.
   */
  description: string;
};

/** @internal */
export const BankAccountException$inboundSchema: z.ZodType<
  BankAccountException,
  z.ZodTypeDef,
  unknown
> = z.object({
  achReturnCode: ACHReturnCode$inboundSchema.optional(),
  rtpRejectionCode: RTPRejectionCode$inboundSchema.optional(),
  description: z.string(),
});

/** @internal */
export type BankAccountException$Outbound = {
  achReturnCode?: string | undefined;
  rtpRejectionCode?: string | undefined;
  description: string;
};

/** @internal */
export const BankAccountException$outboundSchema: z.ZodType<
  BankAccountException$Outbound,
  z.ZodTypeDef,
  BankAccountException
> = z.object({
  achReturnCode: ACHReturnCode$outboundSchema.optional(),
  rtpRejectionCode: RTPRejectionCode$outboundSchema.optional(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountException$ {
  /** @deprecated use `BankAccountException$inboundSchema` instead. */
  export const inboundSchema = BankAccountException$inboundSchema;
  /** @deprecated use `BankAccountException$outboundSchema` instead. */
  export const outboundSchema = BankAccountException$outboundSchema;
  /** @deprecated use `BankAccountException$Outbound` instead. */
  export type Outbound = BankAccountException$Outbound;
}

export function bankAccountExceptionToJSON(
  bankAccountException: BankAccountException,
): string {
  return JSON.stringify(
    BankAccountException$outboundSchema.parse(bankAccountException),
  );
}

export function bankAccountExceptionFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountException, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountException$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountException' from JSON`,
  );
}
