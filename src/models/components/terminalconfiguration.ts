/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes a terminal configuration.
 */
export type TerminalConfiguration = {
  configuration: string;
};

/** @internal */
export const TerminalConfiguration$inboundSchema: z.ZodType<
  TerminalConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration: z.string(),
});

/** @internal */
export type TerminalConfiguration$Outbound = {
  configuration: string;
};

/** @internal */
export const TerminalConfiguration$outboundSchema: z.ZodType<
  TerminalConfiguration$Outbound,
  z.ZodTypeDef,
  TerminalConfiguration
> = z.object({
  configuration: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TerminalConfiguration$ {
  /** @deprecated use `TerminalConfiguration$inboundSchema` instead. */
  export const inboundSchema = TerminalConfiguration$inboundSchema;
  /** @deprecated use `TerminalConfiguration$outboundSchema` instead. */
  export const outboundSchema = TerminalConfiguration$outboundSchema;
  /** @deprecated use `TerminalConfiguration$Outbound` instead. */
  export type Outbound = TerminalConfiguration$Outbound;
}

export function terminalConfigurationToJSON(
  terminalConfiguration: TerminalConfiguration,
): string {
  return JSON.stringify(
    TerminalConfiguration$outboundSchema.parse(terminalConfiguration),
  );
}

export function terminalConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<TerminalConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TerminalConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TerminalConfiguration' from JSON`,
  );
}
