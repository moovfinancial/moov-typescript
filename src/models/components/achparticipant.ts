/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AchLocation,
  AchLocation$inboundSchema,
  AchLocation$Outbound,
  AchLocation$outboundSchema,
} from "./achlocation.js";

export type Logo = {
  name: string;
  url: string;
};

export type AchParticipant = {
  achLocation: AchLocation;
  customerName: string;
  newRoutingNumber: string;
  officeCode: string;
  phoneNumber: string;
  recordTypeCode: string;
  revised: string;
  routingNumber: string;
  servicingFRBNumber: string;
  statusCode: string;
  viewCode: string;
  cleanName: string;
  logo: Logo | null;
};

/** @internal */
export const Logo$inboundSchema: z.ZodType<Logo, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    url: z.string(),
  });

/** @internal */
export type Logo$Outbound = {
  name: string;
  url: string;
};

/** @internal */
export const Logo$outboundSchema: z.ZodType<Logo$Outbound, z.ZodTypeDef, Logo> =
  z.object({
    name: z.string(),
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Logo$ {
  /** @deprecated use `Logo$inboundSchema` instead. */
  export const inboundSchema = Logo$inboundSchema;
  /** @deprecated use `Logo$outboundSchema` instead. */
  export const outboundSchema = Logo$outboundSchema;
  /** @deprecated use `Logo$Outbound` instead. */
  export type Outbound = Logo$Outbound;
}

export function logoToJSON(logo: Logo): string {
  return JSON.stringify(Logo$outboundSchema.parse(logo));
}

export function logoFromJSON(
  jsonString: string,
): SafeParseResult<Logo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Logo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Logo' from JSON`,
  );
}

/** @internal */
export const AchParticipant$inboundSchema: z.ZodType<
  AchParticipant,
  z.ZodTypeDef,
  unknown
> = z.object({
  achLocation: AchLocation$inboundSchema,
  customerName: z.string(),
  newRoutingNumber: z.string(),
  officeCode: z.string(),
  phoneNumber: z.string(),
  recordTypeCode: z.string(),
  revised: z.string(),
  routingNumber: z.string(),
  servicingFRBNumber: z.string(),
  statusCode: z.string(),
  viewCode: z.string(),
  cleanName: z.string(),
  logo: z.nullable(z.lazy(() => Logo$inboundSchema)),
});

/** @internal */
export type AchParticipant$Outbound = {
  achLocation: AchLocation$Outbound;
  customerName: string;
  newRoutingNumber: string;
  officeCode: string;
  phoneNumber: string;
  recordTypeCode: string;
  revised: string;
  routingNumber: string;
  servicingFRBNumber: string;
  statusCode: string;
  viewCode: string;
  cleanName: string;
  logo: Logo$Outbound | null;
};

/** @internal */
export const AchParticipant$outboundSchema: z.ZodType<
  AchParticipant$Outbound,
  z.ZodTypeDef,
  AchParticipant
> = z.object({
  achLocation: AchLocation$outboundSchema,
  customerName: z.string(),
  newRoutingNumber: z.string(),
  officeCode: z.string(),
  phoneNumber: z.string(),
  recordTypeCode: z.string(),
  revised: z.string(),
  routingNumber: z.string(),
  servicingFRBNumber: z.string(),
  statusCode: z.string(),
  viewCode: z.string(),
  cleanName: z.string(),
  logo: z.nullable(z.lazy(() => Logo$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AchParticipant$ {
  /** @deprecated use `AchParticipant$inboundSchema` instead. */
  export const inboundSchema = AchParticipant$inboundSchema;
  /** @deprecated use `AchParticipant$outboundSchema` instead. */
  export const outboundSchema = AchParticipant$outboundSchema;
  /** @deprecated use `AchParticipant$Outbound` instead. */
  export type Outbound = AchParticipant$Outbound;
}

export function achParticipantToJSON(achParticipant: AchParticipant): string {
  return JSON.stringify(AchParticipant$outboundSchema.parse(achParticipant));
}

export function achParticipantFromJSON(
  jsonString: string,
): SafeParseResult<AchParticipant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AchParticipant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AchParticipant' from JSON`,
  );
}
