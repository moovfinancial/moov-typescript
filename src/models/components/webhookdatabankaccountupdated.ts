/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccountException,
  BankAccountException$inboundSchema,
  BankAccountException$Outbound,
  BankAccountException$outboundSchema,
} from "./bankaccountexception.js";
import {
  BankAccountStatus,
  BankAccountStatus$inboundSchema,
  BankAccountStatus$outboundSchema,
} from "./bankaccountstatus.js";
import {
  BankAccountStatusReason,
  BankAccountStatusReason$inboundSchema,
  BankAccountStatusReason$outboundSchema,
} from "./bankaccountstatusreason.js";

export type WebhookDataBankAccountUpdated = {
  bankAccountID: string;
  accountID: string;
  status: BankAccountStatus;
  /**
   * The reason the bank account status changed to the current value.
   */
  statusReason: BankAccountStatusReason;
  /**
   * Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
   */
  exceptionDetails?: BankAccountException | undefined;
};

/** @internal */
export const WebhookDataBankAccountUpdated$inboundSchema: z.ZodType<
  WebhookDataBankAccountUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  bankAccountID: z.string(),
  accountID: z.string(),
  status: BankAccountStatus$inboundSchema,
  statusReason: BankAccountStatusReason$inboundSchema,
  exceptionDetails: BankAccountException$inboundSchema.optional(),
});

/** @internal */
export type WebhookDataBankAccountUpdated$Outbound = {
  bankAccountID: string;
  accountID: string;
  status: string;
  statusReason: string;
  exceptionDetails?: BankAccountException$Outbound | undefined;
};

/** @internal */
export const WebhookDataBankAccountUpdated$outboundSchema: z.ZodType<
  WebhookDataBankAccountUpdated$Outbound,
  z.ZodTypeDef,
  WebhookDataBankAccountUpdated
> = z.object({
  bankAccountID: z.string(),
  accountID: z.string(),
  status: BankAccountStatus$outboundSchema,
  statusReason: BankAccountStatusReason$outboundSchema,
  exceptionDetails: BankAccountException$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDataBankAccountUpdated$ {
  /** @deprecated use `WebhookDataBankAccountUpdated$inboundSchema` instead. */
  export const inboundSchema = WebhookDataBankAccountUpdated$inboundSchema;
  /** @deprecated use `WebhookDataBankAccountUpdated$outboundSchema` instead. */
  export const outboundSchema = WebhookDataBankAccountUpdated$outboundSchema;
  /** @deprecated use `WebhookDataBankAccountUpdated$Outbound` instead. */
  export type Outbound = WebhookDataBankAccountUpdated$Outbound;
}

export function webhookDataBankAccountUpdatedToJSON(
  webhookDataBankAccountUpdated: WebhookDataBankAccountUpdated,
): string {
  return JSON.stringify(
    WebhookDataBankAccountUpdated$outboundSchema.parse(
      webhookDataBankAccountUpdated,
    ),
  );
}

export function webhookDataBankAccountUpdatedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDataBankAccountUpdated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDataBankAccountUpdated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDataBankAccountUpdated' from JSON`,
  );
}
