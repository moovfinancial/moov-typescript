/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The available balance of a wallet.
 */
export type WebhookWalletAvailableBalance = {
  currency: string;
  value: number;
  valueDecimal: string;
};

/** @internal */
export const WebhookWalletAvailableBalance$inboundSchema: z.ZodType<
  WebhookWalletAvailableBalance,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.number().int(),
  valueDecimal: z.string(),
});

/** @internal */
export type WebhookWalletAvailableBalance$Outbound = {
  currency: string;
  value: number;
  valueDecimal: string;
};

/** @internal */
export const WebhookWalletAvailableBalance$outboundSchema: z.ZodType<
  WebhookWalletAvailableBalance$Outbound,
  z.ZodTypeDef,
  WebhookWalletAvailableBalance
> = z.object({
  currency: z.string(),
  value: z.number().int(),
  valueDecimal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookWalletAvailableBalance$ {
  /** @deprecated use `WebhookWalletAvailableBalance$inboundSchema` instead. */
  export const inboundSchema = WebhookWalletAvailableBalance$inboundSchema;
  /** @deprecated use `WebhookWalletAvailableBalance$outboundSchema` instead. */
  export const outboundSchema = WebhookWalletAvailableBalance$outboundSchema;
  /** @deprecated use `WebhookWalletAvailableBalance$Outbound` instead. */
  export type Outbound = WebhookWalletAvailableBalance$Outbound;
}

export function webhookWalletAvailableBalanceToJSON(
  webhookWalletAvailableBalance: WebhookWalletAvailableBalance,
): string {
  return JSON.stringify(
    WebhookWalletAvailableBalance$outboundSchema.parse(
      webhookWalletAvailableBalance,
    ),
  );
}

export function webhookWalletAvailableBalanceFromJSON(
  jsonString: string,
): SafeParseResult<WebhookWalletAvailableBalance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookWalletAvailableBalance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookWalletAvailableBalance' from JSON`,
  );
}
